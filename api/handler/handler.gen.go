// Package handler provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.4 DO NOT EDIT.
package handler

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	. "github.com/younghan-jo/gqlgen-todos/api/models"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /companies)
	GetCompanies(ctx echo.Context) error

	// (POST /companies)
	AddCompany(ctx echo.Context) error

	// (POST /graphql)
	PostGraphql(ctx echo.Context) error

	// (GET /playground)
	GetPlayground(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetCompanies converts echo context to params.
func (w *ServerInterfaceWrapper) GetCompanies(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCompanies(ctx)
	return err
}

// AddCompany converts echo context to params.
func (w *ServerInterfaceWrapper) AddCompany(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AddCompany(ctx)
	return err
}

// PostGraphql converts echo context to params.
func (w *ServerInterfaceWrapper) PostGraphql(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostGraphql(ctx)
	return err
}

// GetPlayground converts echo context to params.
func (w *ServerInterfaceWrapper) GetPlayground(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetPlayground(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/companies", wrapper.GetCompanies)
	router.POST(baseURL+"/companies", wrapper.AddCompany)
	router.POST(baseURL+"/graphql", wrapper.PostGraphql)
	router.GET(baseURL+"/playground", wrapper.GetPlayground)

}

type GetCompaniesRequestObject struct {
}

type GetCompaniesResponseObject interface {
	VisitGetCompaniesResponse(w http.ResponseWriter) error
}

type GetCompanies200JSONResponse Company

func (response GetCompanies200JSONResponse) VisitGetCompaniesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetCompaniesdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response GetCompaniesdefaultJSONResponse) VisitGetCompaniesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type AddCompanyRequestObject struct {
	Body *AddCompanyJSONRequestBody
}

type AddCompanyResponseObject interface {
	VisitAddCompanyResponse(w http.ResponseWriter) error
}

type AddCompany200JSONResponse Company

func (response AddCompany200JSONResponse) VisitAddCompanyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AddCompanydefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response AddCompanydefaultJSONResponse) VisitAddCompanyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type PostGraphqlRequestObject struct {
	Body *PostGraphqlJSONRequestBody
}

type PostGraphqlResponseObject interface {
	VisitPostGraphqlResponse(w http.ResponseWriter) error
}

type PostGraphql200JSONResponse struct {
	// Data Query result
	Data   *map[string]interface{}   `json:"data,omitempty"`
	Errors *[]map[string]interface{} `json:"errors,omitempty"`
}

func (response PostGraphql200JSONResponse) VisitPostGraphqlResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetPlaygroundRequestObject struct {
}

type GetPlaygroundResponseObject interface {
	VisitGetPlaygroundResponse(w http.ResponseWriter) error
}

type GetPlayground200JSONResponse Playground

func (response GetPlayground200JSONResponse) VisitGetPlaygroundResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetPlaygrounddefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response GetPlaygrounddefaultJSONResponse) VisitGetPlaygroundResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {

	// (GET /companies)
	GetCompanies(ctx context.Context, request GetCompaniesRequestObject) (GetCompaniesResponseObject, error)

	// (POST /companies)
	AddCompany(ctx context.Context, request AddCompanyRequestObject) (AddCompanyResponseObject, error)

	// (POST /graphql)
	PostGraphql(ctx context.Context, request PostGraphqlRequestObject) (PostGraphqlResponseObject, error)

	// (GET /playground)
	GetPlayground(ctx context.Context, request GetPlaygroundRequestObject) (GetPlaygroundResponseObject, error)
}

type StrictHandlerFunc = runtime.StrictEchoHandlerFunc
type StrictMiddlewareFunc = runtime.StrictEchoMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetCompanies operation middleware
func (sh *strictHandler) GetCompanies(ctx echo.Context) error {
	var request GetCompaniesRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetCompanies(ctx.Request().Context(), request.(GetCompaniesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetCompanies")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetCompaniesResponseObject); ok {
		return validResponse.VisitGetCompaniesResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// AddCompany operation middleware
func (sh *strictHandler) AddCompany(ctx echo.Context) error {
	var request AddCompanyRequestObject

	var body AddCompanyJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AddCompany(ctx.Request().Context(), request.(AddCompanyRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AddCompany")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AddCompanyResponseObject); ok {
		return validResponse.VisitAddCompanyResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// PostGraphql operation middleware
func (sh *strictHandler) PostGraphql(ctx echo.Context) error {
	var request PostGraphqlRequestObject

	var body PostGraphqlJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostGraphql(ctx.Request().Context(), request.(PostGraphqlRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostGraphql")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostGraphqlResponseObject); ok {
		return validResponse.VisitPostGraphqlResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetPlayground operation middleware
func (sh *strictHandler) GetPlayground(ctx echo.Context) error {
	var request GetPlaygroundRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetPlayground(ctx.Request().Context(), request.(GetPlaygroundRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetPlayground")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetPlaygroundResponseObject); ok {
		return validResponse.VisitGetPlaygroundResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xWW2/dNgz+Kwa3hw1wj93tqX5aFwxFgG47xS4vRRDoyLStwrqEolMbgf/7IPncPPtk",
	"6ZAhe5PFTx/JjxTlB5BWO2vQsIfiAbxsUIu4vLJaW7Ml65BYYdxzsy9JKBjLW8Hhq7KkwwpKwfiKlUZI",
	"gQeHUIBnUqaGMQVVzrC7gVdhnSu/kHo87tjdJ5QcWK6sdsIMgUK07a8VFB8f4GvCCgr4Kjtlnu3Tzn7B",
	"z4czY/o4dCHPeDOm8BORpaVSGr0XNYblMmzCu04RllB8PAJvVrI5C27hQElrbpWubztqo0PRv0dTcwPF",
	"6zxfEdgIjU8CEjpCj4YFq3u8ffI5z4I7/wTo3xSIDtbS37ZiqMl2pnxU3y/zdlnvgFSmsrHRrWEhYyui",
	"FqqFAvq+/6Hv+420Gg5qAilj6042ClKIhYCG2fkiy46WjcGYTYleknKsrIEC3m6vk8pSogdJdtfaGlJo",
	"lUTjY057+p+vf18QW4fG244kbizV2f6Qz7TiV/uPjWtccMmK20ijTk7ukfwUwutNvskDLDAKp6CA7+NW",
	"Ck5wE2WO90CYveg1RkXmmdTIyQkV2UgE23UJBbxDvjozEnpnQ7iB57s8P2iNJjIL51ol4+nskw/0hwEV",
	"Vv9wOadLPC6kllZrNJwcfE/FqETX8rO5n6bAivPOYO9QMpYJnjDO+hUlp+maiMTg572kw0LQt2V5dTSF",
	"xkbPP9pyeLZUzifi/PIwdTi+WA2D6WVq+MdKDccUspqEa+7i9D0UdF6rrfX8bg/698WaD767DmlY9k50",
	"8+F9MplXpvO9ICV27UQyP/vnwRQnEjc4sSTfqCoRZvgWlqNydXg+b6fM0y4Fi2XkH2KchD70wcoLEss1",
	"PZeM2l+WbQI+kvFxQxCJ4ZICc/LfOinR+6prz/o2HBS1D08RsoSb2Elu9tJdHLNnsJU5uz23/meX9MzL",
	"SsqnCP8/4zagPFJ4+OLv4Ok5LbKstVK0jfVcvMnf5OGX7q8AAAD//325AIkhCwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
