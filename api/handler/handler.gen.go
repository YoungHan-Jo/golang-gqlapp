// Package handler provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.4 DO NOT EDIT.
package handler

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	. "github.com/younghan-jo/gqlgen-todos/api/models"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /comments)
	GetComments(ctx echo.Context) error

	// (POST /comments)
	AddComment(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetComments converts echo context to params.
func (w *ServerInterfaceWrapper) GetComments(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetComments(ctx)
	return err
}

// AddComment converts echo context to params.
func (w *ServerInterfaceWrapper) AddComment(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AddComment(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/comments", wrapper.GetComments)
	router.POST(baseURL+"/comments", wrapper.AddComment)

}

type GetCommentsRequestObject struct {
}

type GetCommentsResponseObject interface {
	VisitGetCommentsResponse(w http.ResponseWriter) error
}

type GetComments200JSONResponse Comment

func (response GetComments200JSONResponse) VisitGetCommentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetCommentsdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response GetCommentsdefaultJSONResponse) VisitGetCommentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type AddCommentRequestObject struct {
	Body *AddCommentJSONRequestBody
}

type AddCommentResponseObject interface {
	VisitAddCommentResponse(w http.ResponseWriter) error
}

type AddComment200JSONResponse Comment

func (response AddComment200JSONResponse) VisitAddCommentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AddCommentdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response AddCommentdefaultJSONResponse) VisitAddCommentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {

	// (GET /comments)
	GetComments(ctx context.Context, request GetCommentsRequestObject) (GetCommentsResponseObject, error)

	// (POST /comments)
	AddComment(ctx context.Context, request AddCommentRequestObject) (AddCommentResponseObject, error)
}

type StrictHandlerFunc = runtime.StrictEchoHandlerFunc
type StrictMiddlewareFunc = runtime.StrictEchoMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetComments operation middleware
func (sh *strictHandler) GetComments(ctx echo.Context) error {
	var request GetCommentsRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetComments(ctx.Request().Context(), request.(GetCommentsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetComments")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetCommentsResponseObject); ok {
		return validResponse.VisitGetCommentsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// AddComment operation middleware
func (sh *strictHandler) AddComment(ctx echo.Context) error {
	var request AddCommentRequestObject

	var body AddCommentJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AddComment(ctx.Request().Context(), request.(AddCommentRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AddComment")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AddCommentResponseObject); ok {
		return validResponse.VisitAddCommentResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+RVT2vcPhD9KmZ+v6NjO20pQaemoZRA/+TQnkIoijy2Faw/HY0bL4u/e5F2vc7ipaGQ",
	"W29j6c2bmSc9eQvKGe8sWg4gthBUh0am8MoZg5ZjKPv+awPidgv/EzYg4L9ySSv3OeUXfJxzpvzP0Ihz",
	"9oacR2KNAaa7KYfVqtiCP/pShJKx/iFTW40jEyOoJeMZa4OQA288goDApG0LUw66PsJqy2/fLDhtGVuk",
	"CBx8/Zfk02HF3T+ginPDByJH684NhiBbjOGahPDnoAlrELcH4N0J7icKrwowjmnVyPET2pY7EOdVlT9T",
	"LWWtS0WYto1LmjvLUiVuNFL3IGAcx3fjOBbKGcjBShNzSVvXDqrTkMNAEdYx+yDK8rBTWExz1BgUac/a",
	"WRBweXOdNY4ys1Hk7nvXQg69VmhDkmtP//n624rYebTBDaSwcNSW+6RQGs1n+4/Cdz6WZM19otFLkV9I",
	"YdfCeVEVVYRFRuk1CHidlnLwkrskcLzHZvZJi0mQ40Fa5OwASlwk49Z1DQI+Il8te4TBu9hrZHlVVbPQ",
	"s+G877VKyeVDiOSzNWP0nLOSA6eVzvvWsrn27iQaOfT8YuV3t/9E8cHi6FEx1hkuGO/CCR13Ls9kZvFx",
	"FnSl52VdXx224pXGwO9dvXmxUZ4+Z8e2YRpw+gfP8PuJM4yogBStlH4Qi0FFWfZOyb5zgcVFdVHFR/53",
	"AAAA//9UwByBcAYAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
