package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"encoding/hex"

	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/younghan-jo/gqlgen-todos/api/boiler"
	"github.com/younghan-jo/gqlgen-todos/api/graph/model"
)

// CreateCompany is the resolver for the createCompany field.
func (r *mutationResolver) CreateCompany(ctx context.Context, input *model.NewCompany) (*model.Company, error) {

	comp := boiler.Company{
		Name:               input.Name,
		RepresentativeName: input.RepresentativeName,
		Status:             input.Status,
		IconImgURL:         null.StringFrom(input.IconImgURL),
	}

	if err := comp.Insert(ctx, boil.GetContextDB(), boil.Infer()); err != nil {
		return nil, err
	}

	return &model.Company{
		ID:                 hex.EncodeToString(comp.ID),
		Name:               comp.Name,
		RepresentativeName: comp.RepresentativeName,
		Status:             comp.Status,
		IconImgURL:         comp.IconImgURL.String,
	}, nil
}

// Companies is the resolver for the companies field.
func (r *queryResolver) Companies(ctx context.Context) ([]*model.Company, error) {
	companies, err := boiler.Companies().All(ctx, boil.GetContextDB())
	if err != nil {
		return nil, err
	}

	var result []*model.Company

	for _, comp := range companies {
		result = append(result, &model.Company{
			ID:                 hex.EncodeToString(comp.ID),
			Name:               comp.Name,
			RepresentativeName: comp.RepresentativeName,
			Status:             comp.Status,
			IconImgURL:         comp.IconImgURL.String,
		})
	}

	return result, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
