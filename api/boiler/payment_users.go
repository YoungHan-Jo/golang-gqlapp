// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// PaymentUser is an object representing the database table.
type PaymentUser struct { // 決済担当者ID
	ID []byte `boil:"id" json:"id" toml:"id" yaml:"id"`
	// ユーザID
	UserID []byte `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	// ヒアリングプロジェクトID
	HearingProjectID []byte `boil:"hearing_project_id" json:"hearing_project_id" toml:"hearing_project_id" yaml:"hearing_project_id"`
	// stripe customer ID
	StripeCustomerID string `boil:"stripe_customer_id" json:"stripe_customer_id" toml:"stripe_customer_id" yaml:"stripe_customer_id"`
	// データ作成日
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	// データ更新日
	UpdatedAt time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *paymentUserR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L paymentUserL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PaymentUserColumns = struct {
	ID               string
	UserID           string
	HearingProjectID string
	StripeCustomerID string
	CreatedAt        string
	UpdatedAt        string
}{
	ID:               "id",
	UserID:           "user_id",
	HearingProjectID: "hearing_project_id",
	StripeCustomerID: "stripe_customer_id",
	CreatedAt:        "created_at",
	UpdatedAt:        "updated_at",
}

var PaymentUserTableColumns = struct {
	ID               string
	UserID           string
	HearingProjectID string
	StripeCustomerID string
	CreatedAt        string
	UpdatedAt        string
}{
	ID:               "payment_users.id",
	UserID:           "payment_users.user_id",
	HearingProjectID: "payment_users.hearing_project_id",
	StripeCustomerID: "payment_users.stripe_customer_id",
	CreatedAt:        "payment_users.created_at",
	UpdatedAt:        "payment_users.updated_at",
}

// Generated where

var PaymentUserWhere = struct {
	ID               whereHelper__byte
	UserID           whereHelper__byte
	HearingProjectID whereHelper__byte
	StripeCustomerID whereHelperstring
	CreatedAt        whereHelpertime_Time
	UpdatedAt        whereHelpertime_Time
}{
	ID:               whereHelper__byte{field: "\"payment_users\".\"id\""},
	UserID:           whereHelper__byte{field: "\"payment_users\".\"user_id\""},
	HearingProjectID: whereHelper__byte{field: "\"payment_users\".\"hearing_project_id\""},
	StripeCustomerID: whereHelperstring{field: "\"payment_users\".\"stripe_customer_id\""},
	CreatedAt:        whereHelpertime_Time{field: "\"payment_users\".\"created_at\""},
	UpdatedAt:        whereHelpertime_Time{field: "\"payment_users\".\"updated_at\""},
}

// PaymentUserRels is where relationship names are stored.
var PaymentUserRels = struct {
	HearingProject   string
	User             string
	PaymentHistories string
}{
	HearingProject:   "HearingProject",
	User:             "User",
	PaymentHistories: "PaymentHistories",
}

// paymentUserR is where relationships are stored.
type paymentUserR struct {
	HearingProject   *HearingProject     `boil:"HearingProject" json:"HearingProject" toml:"HearingProject" yaml:"HearingProject"`
	User             *User               `boil:"User" json:"User" toml:"User" yaml:"User"`
	PaymentHistories PaymentHistorySlice `boil:"PaymentHistories" json:"PaymentHistories" toml:"PaymentHistories" yaml:"PaymentHistories"`
}

// NewStruct creates a new relationship struct
func (*paymentUserR) NewStruct() *paymentUserR {
	return &paymentUserR{}
}

func (r *paymentUserR) GetHearingProject() *HearingProject {
	if r == nil {
		return nil
	}
	return r.HearingProject
}

func (r *paymentUserR) GetUser() *User {
	if r == nil {
		return nil
	}
	return r.User
}

func (r *paymentUserR) GetPaymentHistories() PaymentHistorySlice {
	if r == nil {
		return nil
	}
	return r.PaymentHistories
}

// paymentUserL is where Load methods for each relationship are stored.
type paymentUserL struct{}

var (
	paymentUserAllColumns            = []string{"id", "user_id", "hearing_project_id", "stripe_customer_id", "created_at", "updated_at"}
	paymentUserColumnsWithoutDefault = []string{"user_id", "hearing_project_id", "stripe_customer_id"}
	paymentUserColumnsWithDefault    = []string{"id", "created_at", "updated_at"}
	paymentUserPrimaryKeyColumns     = []string{"id"}
	paymentUserGeneratedColumns      = []string{}
)

type (
	// PaymentUserSlice is an alias for a slice of pointers to PaymentUser.
	// This should almost always be used instead of []PaymentUser.
	PaymentUserSlice []*PaymentUser
	// PaymentUserHook is the signature for custom PaymentUser hook methods
	PaymentUserHook func(context.Context, boil.ContextExecutor, *PaymentUser) error

	paymentUserQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	paymentUserType                 = reflect.TypeOf(&PaymentUser{})
	paymentUserMapping              = queries.MakeStructMapping(paymentUserType)
	paymentUserPrimaryKeyMapping, _ = queries.BindMapping(paymentUserType, paymentUserMapping, paymentUserPrimaryKeyColumns)
	paymentUserInsertCacheMut       sync.RWMutex
	paymentUserInsertCache          = make(map[string]insertCache)
	paymentUserUpdateCacheMut       sync.RWMutex
	paymentUserUpdateCache          = make(map[string]updateCache)
	paymentUserUpsertCacheMut       sync.RWMutex
	paymentUserUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var paymentUserAfterSelectHooks []PaymentUserHook

var paymentUserBeforeInsertHooks []PaymentUserHook
var paymentUserAfterInsertHooks []PaymentUserHook

var paymentUserBeforeUpdateHooks []PaymentUserHook
var paymentUserAfterUpdateHooks []PaymentUserHook

var paymentUserBeforeDeleteHooks []PaymentUserHook
var paymentUserAfterDeleteHooks []PaymentUserHook

var paymentUserBeforeUpsertHooks []PaymentUserHook
var paymentUserAfterUpsertHooks []PaymentUserHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *PaymentUser) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range paymentUserAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *PaymentUser) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range paymentUserBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *PaymentUser) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range paymentUserAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *PaymentUser) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range paymentUserBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *PaymentUser) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range paymentUserAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *PaymentUser) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range paymentUserBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *PaymentUser) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range paymentUserAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *PaymentUser) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range paymentUserBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *PaymentUser) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range paymentUserAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPaymentUserHook registers your hook function for all future operations.
func AddPaymentUserHook(hookPoint boil.HookPoint, paymentUserHook PaymentUserHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		paymentUserAfterSelectHooks = append(paymentUserAfterSelectHooks, paymentUserHook)
	case boil.BeforeInsertHook:
		paymentUserBeforeInsertHooks = append(paymentUserBeforeInsertHooks, paymentUserHook)
	case boil.AfterInsertHook:
		paymentUserAfterInsertHooks = append(paymentUserAfterInsertHooks, paymentUserHook)
	case boil.BeforeUpdateHook:
		paymentUserBeforeUpdateHooks = append(paymentUserBeforeUpdateHooks, paymentUserHook)
	case boil.AfterUpdateHook:
		paymentUserAfterUpdateHooks = append(paymentUserAfterUpdateHooks, paymentUserHook)
	case boil.BeforeDeleteHook:
		paymentUserBeforeDeleteHooks = append(paymentUserBeforeDeleteHooks, paymentUserHook)
	case boil.AfterDeleteHook:
		paymentUserAfterDeleteHooks = append(paymentUserAfterDeleteHooks, paymentUserHook)
	case boil.BeforeUpsertHook:
		paymentUserBeforeUpsertHooks = append(paymentUserBeforeUpsertHooks, paymentUserHook)
	case boil.AfterUpsertHook:
		paymentUserAfterUpsertHooks = append(paymentUserAfterUpsertHooks, paymentUserHook)
	}
}

// One returns a single paymentUser record from the query.
func (q paymentUserQuery) One(ctx context.Context, exec boil.ContextExecutor) (*PaymentUser, error) {
	o := &PaymentUser{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for payment_users")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all PaymentUser records from the query.
func (q paymentUserQuery) All(ctx context.Context, exec boil.ContextExecutor) (PaymentUserSlice, error) {
	var o []*PaymentUser

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to PaymentUser slice")
	}

	if len(paymentUserAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all PaymentUser records in the query.
func (q paymentUserQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count payment_users rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q paymentUserQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if payment_users exists")
	}

	return count > 0, nil
}

// HearingProject pointed to by the foreign key.
func (o *PaymentUser) HearingProject(mods ...qm.QueryMod) hearingProjectQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.HearingProjectID),
	}

	queryMods = append(queryMods, mods...)

	return HearingProjects(queryMods...)
}

// User pointed to by the foreign key.
func (o *PaymentUser) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// PaymentHistories retrieves all the payment_history's PaymentHistories with an executor.
func (o *PaymentUser) PaymentHistories(mods ...qm.QueryMod) paymentHistoryQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"payment_histories\".\"payment_user_id\"=?", o.ID),
	)

	return PaymentHistories(queryMods...)
}

// LoadHearingProject allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (paymentUserL) LoadHearingProject(ctx context.Context, e boil.ContextExecutor, singular bool, maybePaymentUser interface{}, mods queries.Applicator) error {
	var slice []*PaymentUser
	var object *PaymentUser

	if singular {
		var ok bool
		object, ok = maybePaymentUser.(*PaymentUser)
		if !ok {
			object = new(PaymentUser)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePaymentUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePaymentUser))
			}
		}
	} else {
		s, ok := maybePaymentUser.(*[]*PaymentUser)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePaymentUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePaymentUser))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &paymentUserR{}
		}
		if !queries.IsNil(object.HearingProjectID) {
			args = append(args, object.HearingProjectID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &paymentUserR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.HearingProjectID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.HearingProjectID) {
				args = append(args, obj.HearingProjectID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`hearing_projects`),
		qm.WhereIn(`hearing_projects.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load HearingProject")
	}

	var resultSlice []*HearingProject
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice HearingProject")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for hearing_projects")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for hearing_projects")
	}

	if len(hearingProjectAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.HearingProject = foreign
		if foreign.R == nil {
			foreign.R = &hearingProjectR{}
		}
		foreign.R.PaymentUsers = append(foreign.R.PaymentUsers, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.HearingProjectID, foreign.ID) {
				local.R.HearingProject = foreign
				if foreign.R == nil {
					foreign.R = &hearingProjectR{}
				}
				foreign.R.PaymentUsers = append(foreign.R.PaymentUsers, local)
				break
			}
		}
	}

	return nil
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (paymentUserL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybePaymentUser interface{}, mods queries.Applicator) error {
	var slice []*PaymentUser
	var object *PaymentUser

	if singular {
		var ok bool
		object, ok = maybePaymentUser.(*PaymentUser)
		if !ok {
			object = new(PaymentUser)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePaymentUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePaymentUser))
			}
		}
	} else {
		s, ok := maybePaymentUser.(*[]*PaymentUser)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePaymentUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePaymentUser))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &paymentUserR{}
		}
		if !queries.IsNil(object.UserID) {
			args = append(args, object.UserID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &paymentUserR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.UserID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.UserID) {
				args = append(args, obj.UserID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.PaymentUsers = append(foreign.R.PaymentUsers, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.UserID, foreign.ID) {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.PaymentUsers = append(foreign.R.PaymentUsers, local)
				break
			}
		}
	}

	return nil
}

// LoadPaymentHistories allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (paymentUserL) LoadPaymentHistories(ctx context.Context, e boil.ContextExecutor, singular bool, maybePaymentUser interface{}, mods queries.Applicator) error {
	var slice []*PaymentUser
	var object *PaymentUser

	if singular {
		var ok bool
		object, ok = maybePaymentUser.(*PaymentUser)
		if !ok {
			object = new(PaymentUser)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePaymentUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePaymentUser))
			}
		}
	} else {
		s, ok := maybePaymentUser.(*[]*PaymentUser)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePaymentUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePaymentUser))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &paymentUserR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &paymentUserR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`payment_histories`),
		qm.WhereIn(`payment_histories.payment_user_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load payment_histories")
	}

	var resultSlice []*PaymentHistory
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice payment_histories")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on payment_histories")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for payment_histories")
	}

	if len(paymentHistoryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.PaymentHistories = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &paymentHistoryR{}
			}
			foreign.R.PaymentUser = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.PaymentUserID) {
				local.R.PaymentHistories = append(local.R.PaymentHistories, foreign)
				if foreign.R == nil {
					foreign.R = &paymentHistoryR{}
				}
				foreign.R.PaymentUser = local
				break
			}
		}
	}

	return nil
}

// SetHearingProject of the paymentUser to the related item.
// Sets o.R.HearingProject to related.
// Adds o to related.R.PaymentUsers.
func (o *PaymentUser) SetHearingProject(ctx context.Context, exec boil.ContextExecutor, insert bool, related *HearingProject) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"payment_users\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"hearing_project_id"}),
		strmangle.WhereClause("\"", "\"", 2, paymentUserPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.HearingProjectID, related.ID)
	if o.R == nil {
		o.R = &paymentUserR{
			HearingProject: related,
		}
	} else {
		o.R.HearingProject = related
	}

	if related.R == nil {
		related.R = &hearingProjectR{
			PaymentUsers: PaymentUserSlice{o},
		}
	} else {
		related.R.PaymentUsers = append(related.R.PaymentUsers, o)
	}

	return nil
}

// SetUser of the paymentUser to the related item.
// Sets o.R.User to related.
// Adds o to related.R.PaymentUsers.
func (o *PaymentUser) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"payment_users\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, paymentUserPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.UserID, related.ID)
	if o.R == nil {
		o.R = &paymentUserR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			PaymentUsers: PaymentUserSlice{o},
		}
	} else {
		related.R.PaymentUsers = append(related.R.PaymentUsers, o)
	}

	return nil
}

// AddPaymentHistories adds the given related objects to the existing relationships
// of the payment_user, optionally inserting them as new records.
// Appends related to o.R.PaymentHistories.
// Sets related.R.PaymentUser appropriately.
func (o *PaymentUser) AddPaymentHistories(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*PaymentHistory) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.PaymentUserID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"payment_histories\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"payment_user_id"}),
				strmangle.WhereClause("\"", "\"", 2, paymentHistoryPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.PaymentUserID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &paymentUserR{
			PaymentHistories: related,
		}
	} else {
		o.R.PaymentHistories = append(o.R.PaymentHistories, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &paymentHistoryR{
				PaymentUser: o,
			}
		} else {
			rel.R.PaymentUser = o
		}
	}
	return nil
}

// PaymentUsers retrieves all the records using an executor.
func PaymentUsers(mods ...qm.QueryMod) paymentUserQuery {
	mods = append(mods, qm.From("\"payment_users\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"payment_users\".*"})
	}

	return paymentUserQuery{q}
}

// FindPaymentUser retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPaymentUser(ctx context.Context, exec boil.ContextExecutor, iD []byte, selectCols ...string) (*PaymentUser, error) {
	paymentUserObj := &PaymentUser{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"payment_users\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, paymentUserObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from payment_users")
	}

	if err = paymentUserObj.doAfterSelectHooks(ctx, exec); err != nil {
		return paymentUserObj, err
	}

	return paymentUserObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *PaymentUser) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no payment_users provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(paymentUserColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	paymentUserInsertCacheMut.RLock()
	cache, cached := paymentUserInsertCache[key]
	paymentUserInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			paymentUserAllColumns,
			paymentUserColumnsWithDefault,
			paymentUserColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(paymentUserType, paymentUserMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(paymentUserType, paymentUserMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"payment_users\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"payment_users\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into payment_users")
	}

	if !cached {
		paymentUserInsertCacheMut.Lock()
		paymentUserInsertCache[key] = cache
		paymentUserInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the PaymentUser.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *PaymentUser) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	paymentUserUpdateCacheMut.RLock()
	cache, cached := paymentUserUpdateCache[key]
	paymentUserUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			paymentUserAllColumns,
			paymentUserPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update payment_users, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"payment_users\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, paymentUserPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(paymentUserType, paymentUserMapping, append(wl, paymentUserPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update payment_users row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for payment_users")
	}

	if !cached {
		paymentUserUpdateCacheMut.Lock()
		paymentUserUpdateCache[key] = cache
		paymentUserUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q paymentUserQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for payment_users")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for payment_users")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PaymentUserSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), paymentUserPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"payment_users\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, paymentUserPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in paymentUser slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all paymentUser")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *PaymentUser) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no payment_users provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(paymentUserColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	paymentUserUpsertCacheMut.RLock()
	cache, cached := paymentUserUpsertCache[key]
	paymentUserUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			paymentUserAllColumns,
			paymentUserColumnsWithDefault,
			paymentUserColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			paymentUserAllColumns,
			paymentUserPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert payment_users, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(paymentUserPrimaryKeyColumns))
			copy(conflict, paymentUserPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"payment_users\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(paymentUserType, paymentUserMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(paymentUserType, paymentUserMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert payment_users")
	}

	if !cached {
		paymentUserUpsertCacheMut.Lock()
		paymentUserUpsertCache[key] = cache
		paymentUserUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single PaymentUser record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *PaymentUser) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no PaymentUser provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), paymentUserPrimaryKeyMapping)
	sql := "DELETE FROM \"payment_users\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from payment_users")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for payment_users")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q paymentUserQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no paymentUserQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from payment_users")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for payment_users")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PaymentUserSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(paymentUserBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), paymentUserPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"payment_users\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, paymentUserPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from paymentUser slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for payment_users")
	}

	if len(paymentUserAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *PaymentUser) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPaymentUser(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PaymentUserSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PaymentUserSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), paymentUserPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"payment_users\".* FROM \"payment_users\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, paymentUserPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in PaymentUserSlice")
	}

	*o = slice

	return nil
}

// PaymentUserExists checks if the PaymentUser row exists.
func PaymentUserExists(ctx context.Context, exec boil.ContextExecutor, iD []byte) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"payment_users\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if payment_users exists")
	}

	return exists, nil
}

// Exists checks if the PaymentUser row exists.
func (o *PaymentUser) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return PaymentUserExists(ctx, exec, o.ID)
}
