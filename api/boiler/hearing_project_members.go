// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// HearingProjectMember is an object representing the database table.
type HearingProjectMember struct { // ヒアリングプロジェクトメンバーID
	ID []byte `boil:"id" json:"id" toml:"id" yaml:"id"`
	// ユーザID
	UserID []byte `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	// ヒアリングプロジェクトID
	HearingProjectID []byte `boil:"hearing_project_id" json:"hearing_project_id" toml:"hearing_project_id" yaml:"hearing_project_id"`
	// データ作成日
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	// データ更新日
	UpdatedAt time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *hearingProjectMemberR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L hearingProjectMemberL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var HearingProjectMemberColumns = struct {
	ID               string
	UserID           string
	HearingProjectID string
	CreatedAt        string
	UpdatedAt        string
}{
	ID:               "id",
	UserID:           "user_id",
	HearingProjectID: "hearing_project_id",
	CreatedAt:        "created_at",
	UpdatedAt:        "updated_at",
}

var HearingProjectMemberTableColumns = struct {
	ID               string
	UserID           string
	HearingProjectID string
	CreatedAt        string
	UpdatedAt        string
}{
	ID:               "hearing_project_members.id",
	UserID:           "hearing_project_members.user_id",
	HearingProjectID: "hearing_project_members.hearing_project_id",
	CreatedAt:        "hearing_project_members.created_at",
	UpdatedAt:        "hearing_project_members.updated_at",
}

// Generated where

var HearingProjectMemberWhere = struct {
	ID               whereHelper__byte
	UserID           whereHelper__byte
	HearingProjectID whereHelper__byte
	CreatedAt        whereHelpertime_Time
	UpdatedAt        whereHelpertime_Time
}{
	ID:               whereHelper__byte{field: "\"hearing_project_members\".\"id\""},
	UserID:           whereHelper__byte{field: "\"hearing_project_members\".\"user_id\""},
	HearingProjectID: whereHelper__byte{field: "\"hearing_project_members\".\"hearing_project_id\""},
	CreatedAt:        whereHelpertime_Time{field: "\"hearing_project_members\".\"created_at\""},
	UpdatedAt:        whereHelpertime_Time{field: "\"hearing_project_members\".\"updated_at\""},
}

// HearingProjectMemberRels is where relationship names are stored.
var HearingProjectMemberRels = struct {
	HearingProject string
	User           string
}{
	HearingProject: "HearingProject",
	User:           "User",
}

// hearingProjectMemberR is where relationships are stored.
type hearingProjectMemberR struct {
	HearingProject *HearingProject `boil:"HearingProject" json:"HearingProject" toml:"HearingProject" yaml:"HearingProject"`
	User           *User           `boil:"User" json:"User" toml:"User" yaml:"User"`
}

// NewStruct creates a new relationship struct
func (*hearingProjectMemberR) NewStruct() *hearingProjectMemberR {
	return &hearingProjectMemberR{}
}

func (r *hearingProjectMemberR) GetHearingProject() *HearingProject {
	if r == nil {
		return nil
	}
	return r.HearingProject
}

func (r *hearingProjectMemberR) GetUser() *User {
	if r == nil {
		return nil
	}
	return r.User
}

// hearingProjectMemberL is where Load methods for each relationship are stored.
type hearingProjectMemberL struct{}

var (
	hearingProjectMemberAllColumns            = []string{"id", "user_id", "hearing_project_id", "created_at", "updated_at"}
	hearingProjectMemberColumnsWithoutDefault = []string{"user_id", "hearing_project_id"}
	hearingProjectMemberColumnsWithDefault    = []string{"id", "created_at", "updated_at"}
	hearingProjectMemberPrimaryKeyColumns     = []string{"id"}
	hearingProjectMemberGeneratedColumns      = []string{}
)

type (
	// HearingProjectMemberSlice is an alias for a slice of pointers to HearingProjectMember.
	// This should almost always be used instead of []HearingProjectMember.
	HearingProjectMemberSlice []*HearingProjectMember
	// HearingProjectMemberHook is the signature for custom HearingProjectMember hook methods
	HearingProjectMemberHook func(context.Context, boil.ContextExecutor, *HearingProjectMember) error

	hearingProjectMemberQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	hearingProjectMemberType                 = reflect.TypeOf(&HearingProjectMember{})
	hearingProjectMemberMapping              = queries.MakeStructMapping(hearingProjectMemberType)
	hearingProjectMemberPrimaryKeyMapping, _ = queries.BindMapping(hearingProjectMemberType, hearingProjectMemberMapping, hearingProjectMemberPrimaryKeyColumns)
	hearingProjectMemberInsertCacheMut       sync.RWMutex
	hearingProjectMemberInsertCache          = make(map[string]insertCache)
	hearingProjectMemberUpdateCacheMut       sync.RWMutex
	hearingProjectMemberUpdateCache          = make(map[string]updateCache)
	hearingProjectMemberUpsertCacheMut       sync.RWMutex
	hearingProjectMemberUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var hearingProjectMemberAfterSelectHooks []HearingProjectMemberHook

var hearingProjectMemberBeforeInsertHooks []HearingProjectMemberHook
var hearingProjectMemberAfterInsertHooks []HearingProjectMemberHook

var hearingProjectMemberBeforeUpdateHooks []HearingProjectMemberHook
var hearingProjectMemberAfterUpdateHooks []HearingProjectMemberHook

var hearingProjectMemberBeforeDeleteHooks []HearingProjectMemberHook
var hearingProjectMemberAfterDeleteHooks []HearingProjectMemberHook

var hearingProjectMemberBeforeUpsertHooks []HearingProjectMemberHook
var hearingProjectMemberAfterUpsertHooks []HearingProjectMemberHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *HearingProjectMember) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range hearingProjectMemberAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *HearingProjectMember) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range hearingProjectMemberBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *HearingProjectMember) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range hearingProjectMemberAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *HearingProjectMember) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range hearingProjectMemberBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *HearingProjectMember) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range hearingProjectMemberAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *HearingProjectMember) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range hearingProjectMemberBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *HearingProjectMember) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range hearingProjectMemberAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *HearingProjectMember) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range hearingProjectMemberBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *HearingProjectMember) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range hearingProjectMemberAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddHearingProjectMemberHook registers your hook function for all future operations.
func AddHearingProjectMemberHook(hookPoint boil.HookPoint, hearingProjectMemberHook HearingProjectMemberHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		hearingProjectMemberAfterSelectHooks = append(hearingProjectMemberAfterSelectHooks, hearingProjectMemberHook)
	case boil.BeforeInsertHook:
		hearingProjectMemberBeforeInsertHooks = append(hearingProjectMemberBeforeInsertHooks, hearingProjectMemberHook)
	case boil.AfterInsertHook:
		hearingProjectMemberAfterInsertHooks = append(hearingProjectMemberAfterInsertHooks, hearingProjectMemberHook)
	case boil.BeforeUpdateHook:
		hearingProjectMemberBeforeUpdateHooks = append(hearingProjectMemberBeforeUpdateHooks, hearingProjectMemberHook)
	case boil.AfterUpdateHook:
		hearingProjectMemberAfterUpdateHooks = append(hearingProjectMemberAfterUpdateHooks, hearingProjectMemberHook)
	case boil.BeforeDeleteHook:
		hearingProjectMemberBeforeDeleteHooks = append(hearingProjectMemberBeforeDeleteHooks, hearingProjectMemberHook)
	case boil.AfterDeleteHook:
		hearingProjectMemberAfterDeleteHooks = append(hearingProjectMemberAfterDeleteHooks, hearingProjectMemberHook)
	case boil.BeforeUpsertHook:
		hearingProjectMemberBeforeUpsertHooks = append(hearingProjectMemberBeforeUpsertHooks, hearingProjectMemberHook)
	case boil.AfterUpsertHook:
		hearingProjectMemberAfterUpsertHooks = append(hearingProjectMemberAfterUpsertHooks, hearingProjectMemberHook)
	}
}

// One returns a single hearingProjectMember record from the query.
func (q hearingProjectMemberQuery) One(ctx context.Context, exec boil.ContextExecutor) (*HearingProjectMember, error) {
	o := &HearingProjectMember{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for hearing_project_members")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all HearingProjectMember records from the query.
func (q hearingProjectMemberQuery) All(ctx context.Context, exec boil.ContextExecutor) (HearingProjectMemberSlice, error) {
	var o []*HearingProjectMember

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to HearingProjectMember slice")
	}

	if len(hearingProjectMemberAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all HearingProjectMember records in the query.
func (q hearingProjectMemberQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count hearing_project_members rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q hearingProjectMemberQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if hearing_project_members exists")
	}

	return count > 0, nil
}

// HearingProject pointed to by the foreign key.
func (o *HearingProjectMember) HearingProject(mods ...qm.QueryMod) hearingProjectQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.HearingProjectID),
	}

	queryMods = append(queryMods, mods...)

	return HearingProjects(queryMods...)
}

// User pointed to by the foreign key.
func (o *HearingProjectMember) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// LoadHearingProject allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (hearingProjectMemberL) LoadHearingProject(ctx context.Context, e boil.ContextExecutor, singular bool, maybeHearingProjectMember interface{}, mods queries.Applicator) error {
	var slice []*HearingProjectMember
	var object *HearingProjectMember

	if singular {
		var ok bool
		object, ok = maybeHearingProjectMember.(*HearingProjectMember)
		if !ok {
			object = new(HearingProjectMember)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeHearingProjectMember)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeHearingProjectMember))
			}
		}
	} else {
		s, ok := maybeHearingProjectMember.(*[]*HearingProjectMember)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeHearingProjectMember)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeHearingProjectMember))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &hearingProjectMemberR{}
		}
		if !queries.IsNil(object.HearingProjectID) {
			args = append(args, object.HearingProjectID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &hearingProjectMemberR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.HearingProjectID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.HearingProjectID) {
				args = append(args, obj.HearingProjectID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`hearing_projects`),
		qm.WhereIn(`hearing_projects.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load HearingProject")
	}

	var resultSlice []*HearingProject
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice HearingProject")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for hearing_projects")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for hearing_projects")
	}

	if len(hearingProjectAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.HearingProject = foreign
		if foreign.R == nil {
			foreign.R = &hearingProjectR{}
		}
		foreign.R.HearingProjectMembers = append(foreign.R.HearingProjectMembers, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.HearingProjectID, foreign.ID) {
				local.R.HearingProject = foreign
				if foreign.R == nil {
					foreign.R = &hearingProjectR{}
				}
				foreign.R.HearingProjectMembers = append(foreign.R.HearingProjectMembers, local)
				break
			}
		}
	}

	return nil
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (hearingProjectMemberL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeHearingProjectMember interface{}, mods queries.Applicator) error {
	var slice []*HearingProjectMember
	var object *HearingProjectMember

	if singular {
		var ok bool
		object, ok = maybeHearingProjectMember.(*HearingProjectMember)
		if !ok {
			object = new(HearingProjectMember)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeHearingProjectMember)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeHearingProjectMember))
			}
		}
	} else {
		s, ok := maybeHearingProjectMember.(*[]*HearingProjectMember)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeHearingProjectMember)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeHearingProjectMember))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &hearingProjectMemberR{}
		}
		if !queries.IsNil(object.UserID) {
			args = append(args, object.UserID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &hearingProjectMemberR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.UserID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.UserID) {
				args = append(args, obj.UserID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.HearingProjectMembers = append(foreign.R.HearingProjectMembers, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.UserID, foreign.ID) {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.HearingProjectMembers = append(foreign.R.HearingProjectMembers, local)
				break
			}
		}
	}

	return nil
}

// SetHearingProject of the hearingProjectMember to the related item.
// Sets o.R.HearingProject to related.
// Adds o to related.R.HearingProjectMembers.
func (o *HearingProjectMember) SetHearingProject(ctx context.Context, exec boil.ContextExecutor, insert bool, related *HearingProject) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"hearing_project_members\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"hearing_project_id"}),
		strmangle.WhereClause("\"", "\"", 2, hearingProjectMemberPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.HearingProjectID, related.ID)
	if o.R == nil {
		o.R = &hearingProjectMemberR{
			HearingProject: related,
		}
	} else {
		o.R.HearingProject = related
	}

	if related.R == nil {
		related.R = &hearingProjectR{
			HearingProjectMembers: HearingProjectMemberSlice{o},
		}
	} else {
		related.R.HearingProjectMembers = append(related.R.HearingProjectMembers, o)
	}

	return nil
}

// SetUser of the hearingProjectMember to the related item.
// Sets o.R.User to related.
// Adds o to related.R.HearingProjectMembers.
func (o *HearingProjectMember) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"hearing_project_members\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, hearingProjectMemberPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.UserID, related.ID)
	if o.R == nil {
		o.R = &hearingProjectMemberR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			HearingProjectMembers: HearingProjectMemberSlice{o},
		}
	} else {
		related.R.HearingProjectMembers = append(related.R.HearingProjectMembers, o)
	}

	return nil
}

// HearingProjectMembers retrieves all the records using an executor.
func HearingProjectMembers(mods ...qm.QueryMod) hearingProjectMemberQuery {
	mods = append(mods, qm.From("\"hearing_project_members\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"hearing_project_members\".*"})
	}

	return hearingProjectMemberQuery{q}
}

// FindHearingProjectMember retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindHearingProjectMember(ctx context.Context, exec boil.ContextExecutor, iD []byte, selectCols ...string) (*HearingProjectMember, error) {
	hearingProjectMemberObj := &HearingProjectMember{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"hearing_project_members\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, hearingProjectMemberObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from hearing_project_members")
	}

	if err = hearingProjectMemberObj.doAfterSelectHooks(ctx, exec); err != nil {
		return hearingProjectMemberObj, err
	}

	return hearingProjectMemberObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *HearingProjectMember) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no hearing_project_members provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(hearingProjectMemberColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	hearingProjectMemberInsertCacheMut.RLock()
	cache, cached := hearingProjectMemberInsertCache[key]
	hearingProjectMemberInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			hearingProjectMemberAllColumns,
			hearingProjectMemberColumnsWithDefault,
			hearingProjectMemberColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(hearingProjectMemberType, hearingProjectMemberMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(hearingProjectMemberType, hearingProjectMemberMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"hearing_project_members\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"hearing_project_members\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into hearing_project_members")
	}

	if !cached {
		hearingProjectMemberInsertCacheMut.Lock()
		hearingProjectMemberInsertCache[key] = cache
		hearingProjectMemberInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the HearingProjectMember.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *HearingProjectMember) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	hearingProjectMemberUpdateCacheMut.RLock()
	cache, cached := hearingProjectMemberUpdateCache[key]
	hearingProjectMemberUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			hearingProjectMemberAllColumns,
			hearingProjectMemberPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update hearing_project_members, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"hearing_project_members\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, hearingProjectMemberPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(hearingProjectMemberType, hearingProjectMemberMapping, append(wl, hearingProjectMemberPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update hearing_project_members row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for hearing_project_members")
	}

	if !cached {
		hearingProjectMemberUpdateCacheMut.Lock()
		hearingProjectMemberUpdateCache[key] = cache
		hearingProjectMemberUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q hearingProjectMemberQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for hearing_project_members")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for hearing_project_members")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o HearingProjectMemberSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), hearingProjectMemberPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"hearing_project_members\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, hearingProjectMemberPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in hearingProjectMember slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all hearingProjectMember")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *HearingProjectMember) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no hearing_project_members provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(hearingProjectMemberColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	hearingProjectMemberUpsertCacheMut.RLock()
	cache, cached := hearingProjectMemberUpsertCache[key]
	hearingProjectMemberUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			hearingProjectMemberAllColumns,
			hearingProjectMemberColumnsWithDefault,
			hearingProjectMemberColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			hearingProjectMemberAllColumns,
			hearingProjectMemberPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert hearing_project_members, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(hearingProjectMemberPrimaryKeyColumns))
			copy(conflict, hearingProjectMemberPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"hearing_project_members\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(hearingProjectMemberType, hearingProjectMemberMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(hearingProjectMemberType, hearingProjectMemberMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert hearing_project_members")
	}

	if !cached {
		hearingProjectMemberUpsertCacheMut.Lock()
		hearingProjectMemberUpsertCache[key] = cache
		hearingProjectMemberUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single HearingProjectMember record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *HearingProjectMember) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no HearingProjectMember provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), hearingProjectMemberPrimaryKeyMapping)
	sql := "DELETE FROM \"hearing_project_members\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from hearing_project_members")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for hearing_project_members")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q hearingProjectMemberQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no hearingProjectMemberQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from hearing_project_members")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for hearing_project_members")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o HearingProjectMemberSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(hearingProjectMemberBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), hearingProjectMemberPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"hearing_project_members\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, hearingProjectMemberPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from hearingProjectMember slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for hearing_project_members")
	}

	if len(hearingProjectMemberAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *HearingProjectMember) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindHearingProjectMember(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *HearingProjectMemberSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := HearingProjectMemberSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), hearingProjectMemberPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"hearing_project_members\".* FROM \"hearing_project_members\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, hearingProjectMemberPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in HearingProjectMemberSlice")
	}

	*o = slice

	return nil
}

// HearingProjectMemberExists checks if the HearingProjectMember row exists.
func HearingProjectMemberExists(ctx context.Context, exec boil.ContextExecutor, iD []byte) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"hearing_project_members\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if hearing_project_members exists")
	}

	return exists, nil
}

// Exists checks if the HearingProjectMember row exists.
func (o *HearingProjectMember) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return HearingProjectMemberExists(ctx, exec, o.ID)
}
