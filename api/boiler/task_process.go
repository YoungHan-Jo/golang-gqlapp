// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// TaskProcess is an object representing the database table.
type TaskProcess struct { // 業務プロセスID
	ID []byte `boil:"id" json:"id" toml:"id" yaml:"id"`
	// 業務ID
	TaskID []byte `boil:"task_id" json:"task_id" toml:"task_id" yaml:"task_id"`
	// 処理名
	Name null.String `boil:"name" json:"name,omitempty" toml:"name" yaml:"name,omitempty"`
	// 担当者
	Staff null.String `boil:"staff" json:"staff,omitempty" toml:"staff" yaml:"staff,omitempty"`
	// 処理の種類
	Kind null.String `boil:"kind" json:"kind,omitempty" toml:"kind" yaml:"kind,omitempty"`
	// システム名
	SystemName null.String `boil:"system_name" json:"system_name,omitempty" toml:"system_name" yaml:"system_name,omitempty"`
	// データ作成日
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	// データ更新日
	UpdatedAt time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *taskProcessR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L taskProcessL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TaskProcessColumns = struct {
	ID         string
	TaskID     string
	Name       string
	Staff      string
	Kind       string
	SystemName string
	CreatedAt  string
	UpdatedAt  string
}{
	ID:         "id",
	TaskID:     "task_id",
	Name:       "name",
	Staff:      "staff",
	Kind:       "kind",
	SystemName: "system_name",
	CreatedAt:  "created_at",
	UpdatedAt:  "updated_at",
}

var TaskProcessTableColumns = struct {
	ID         string
	TaskID     string
	Name       string
	Staff      string
	Kind       string
	SystemName string
	CreatedAt  string
	UpdatedAt  string
}{
	ID:         "task_process.id",
	TaskID:     "task_process.task_id",
	Name:       "task_process.name",
	Staff:      "task_process.staff",
	Kind:       "task_process.kind",
	SystemName: "task_process.system_name",
	CreatedAt:  "task_process.created_at",
	UpdatedAt:  "task_process.updated_at",
}

// Generated where

var TaskProcessWhere = struct {
	ID         whereHelper__byte
	TaskID     whereHelper__byte
	Name       whereHelpernull_String
	Staff      whereHelpernull_String
	Kind       whereHelpernull_String
	SystemName whereHelpernull_String
	CreatedAt  whereHelpertime_Time
	UpdatedAt  whereHelpertime_Time
}{
	ID:         whereHelper__byte{field: "\"task_process\".\"id\""},
	TaskID:     whereHelper__byte{field: "\"task_process\".\"task_id\""},
	Name:       whereHelpernull_String{field: "\"task_process\".\"name\""},
	Staff:      whereHelpernull_String{field: "\"task_process\".\"staff\""},
	Kind:       whereHelpernull_String{field: "\"task_process\".\"kind\""},
	SystemName: whereHelpernull_String{field: "\"task_process\".\"system_name\""},
	CreatedAt:  whereHelpertime_Time{field: "\"task_process\".\"created_at\""},
	UpdatedAt:  whereHelpertime_Time{field: "\"task_process\".\"updated_at\""},
}

// TaskProcessRels is where relationship names are stored.
var TaskProcessRels = struct {
	Task string
}{
	Task: "Task",
}

// taskProcessR is where relationships are stored.
type taskProcessR struct {
	Task *Task `boil:"Task" json:"Task" toml:"Task" yaml:"Task"`
}

// NewStruct creates a new relationship struct
func (*taskProcessR) NewStruct() *taskProcessR {
	return &taskProcessR{}
}

func (r *taskProcessR) GetTask() *Task {
	if r == nil {
		return nil
	}
	return r.Task
}

// taskProcessL is where Load methods for each relationship are stored.
type taskProcessL struct{}

var (
	taskProcessAllColumns            = []string{"id", "task_id", "name", "staff", "kind", "system_name", "created_at", "updated_at"}
	taskProcessColumnsWithoutDefault = []string{"task_id"}
	taskProcessColumnsWithDefault    = []string{"id", "name", "staff", "kind", "system_name", "created_at", "updated_at"}
	taskProcessPrimaryKeyColumns     = []string{"id"}
	taskProcessGeneratedColumns      = []string{}
)

type (
	// TaskProcessSlice is an alias for a slice of pointers to TaskProcess.
	// This should almost always be used instead of []TaskProcess.
	TaskProcessSlice []*TaskProcess
	// TaskProcessHook is the signature for custom TaskProcess hook methods
	TaskProcessHook func(context.Context, boil.ContextExecutor, *TaskProcess) error

	taskProcessQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	taskProcessType                 = reflect.TypeOf(&TaskProcess{})
	taskProcessMapping              = queries.MakeStructMapping(taskProcessType)
	taskProcessPrimaryKeyMapping, _ = queries.BindMapping(taskProcessType, taskProcessMapping, taskProcessPrimaryKeyColumns)
	taskProcessInsertCacheMut       sync.RWMutex
	taskProcessInsertCache          = make(map[string]insertCache)
	taskProcessUpdateCacheMut       sync.RWMutex
	taskProcessUpdateCache          = make(map[string]updateCache)
	taskProcessUpsertCacheMut       sync.RWMutex
	taskProcessUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var taskProcessAfterSelectHooks []TaskProcessHook

var taskProcessBeforeInsertHooks []TaskProcessHook
var taskProcessAfterInsertHooks []TaskProcessHook

var taskProcessBeforeUpdateHooks []TaskProcessHook
var taskProcessAfterUpdateHooks []TaskProcessHook

var taskProcessBeforeDeleteHooks []TaskProcessHook
var taskProcessAfterDeleteHooks []TaskProcessHook

var taskProcessBeforeUpsertHooks []TaskProcessHook
var taskProcessAfterUpsertHooks []TaskProcessHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *TaskProcess) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range taskProcessAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *TaskProcess) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range taskProcessBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *TaskProcess) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range taskProcessAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *TaskProcess) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range taskProcessBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *TaskProcess) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range taskProcessAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *TaskProcess) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range taskProcessBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *TaskProcess) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range taskProcessAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *TaskProcess) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range taskProcessBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *TaskProcess) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range taskProcessAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTaskProcessHook registers your hook function for all future operations.
func AddTaskProcessHook(hookPoint boil.HookPoint, taskProcessHook TaskProcessHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		taskProcessAfterSelectHooks = append(taskProcessAfterSelectHooks, taskProcessHook)
	case boil.BeforeInsertHook:
		taskProcessBeforeInsertHooks = append(taskProcessBeforeInsertHooks, taskProcessHook)
	case boil.AfterInsertHook:
		taskProcessAfterInsertHooks = append(taskProcessAfterInsertHooks, taskProcessHook)
	case boil.BeforeUpdateHook:
		taskProcessBeforeUpdateHooks = append(taskProcessBeforeUpdateHooks, taskProcessHook)
	case boil.AfterUpdateHook:
		taskProcessAfterUpdateHooks = append(taskProcessAfterUpdateHooks, taskProcessHook)
	case boil.BeforeDeleteHook:
		taskProcessBeforeDeleteHooks = append(taskProcessBeforeDeleteHooks, taskProcessHook)
	case boil.AfterDeleteHook:
		taskProcessAfterDeleteHooks = append(taskProcessAfterDeleteHooks, taskProcessHook)
	case boil.BeforeUpsertHook:
		taskProcessBeforeUpsertHooks = append(taskProcessBeforeUpsertHooks, taskProcessHook)
	case boil.AfterUpsertHook:
		taskProcessAfterUpsertHooks = append(taskProcessAfterUpsertHooks, taskProcessHook)
	}
}

// One returns a single taskProcess record from the query.
func (q taskProcessQuery) One(ctx context.Context, exec boil.ContextExecutor) (*TaskProcess, error) {
	o := &TaskProcess{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for task_process")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all TaskProcess records from the query.
func (q taskProcessQuery) All(ctx context.Context, exec boil.ContextExecutor) (TaskProcessSlice, error) {
	var o []*TaskProcess

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to TaskProcess slice")
	}

	if len(taskProcessAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all TaskProcess records in the query.
func (q taskProcessQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count task_process rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q taskProcessQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if task_process exists")
	}

	return count > 0, nil
}

// Task pointed to by the foreign key.
func (o *TaskProcess) Task(mods ...qm.QueryMod) taskQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.TaskID),
	}

	queryMods = append(queryMods, mods...)

	return Tasks(queryMods...)
}

// LoadTask allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (taskProcessL) LoadTask(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTaskProcess interface{}, mods queries.Applicator) error {
	var slice []*TaskProcess
	var object *TaskProcess

	if singular {
		var ok bool
		object, ok = maybeTaskProcess.(*TaskProcess)
		if !ok {
			object = new(TaskProcess)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTaskProcess)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTaskProcess))
			}
		}
	} else {
		s, ok := maybeTaskProcess.(*[]*TaskProcess)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTaskProcess)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTaskProcess))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &taskProcessR{}
		}
		if !queries.IsNil(object.TaskID) {
			args = append(args, object.TaskID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &taskProcessR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.TaskID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.TaskID) {
				args = append(args, obj.TaskID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`tasks`),
		qm.WhereIn(`tasks.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Task")
	}

	var resultSlice []*Task
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Task")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for tasks")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for tasks")
	}

	if len(taskAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Task = foreign
		if foreign.R == nil {
			foreign.R = &taskR{}
		}
		foreign.R.TaskProcesses = append(foreign.R.TaskProcesses, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.TaskID, foreign.ID) {
				local.R.Task = foreign
				if foreign.R == nil {
					foreign.R = &taskR{}
				}
				foreign.R.TaskProcesses = append(foreign.R.TaskProcesses, local)
				break
			}
		}
	}

	return nil
}

// SetTask of the taskProcess to the related item.
// Sets o.R.Task to related.
// Adds o to related.R.TaskProcesses.
func (o *TaskProcess) SetTask(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Task) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"task_process\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"task_id"}),
		strmangle.WhereClause("\"", "\"", 2, taskProcessPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.TaskID, related.ID)
	if o.R == nil {
		o.R = &taskProcessR{
			Task: related,
		}
	} else {
		o.R.Task = related
	}

	if related.R == nil {
		related.R = &taskR{
			TaskProcesses: TaskProcessSlice{o},
		}
	} else {
		related.R.TaskProcesses = append(related.R.TaskProcesses, o)
	}

	return nil
}

// TaskProcesses retrieves all the records using an executor.
func TaskProcesses(mods ...qm.QueryMod) taskProcessQuery {
	mods = append(mods, qm.From("\"task_process\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"task_process\".*"})
	}

	return taskProcessQuery{q}
}

// FindTaskProcess retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTaskProcess(ctx context.Context, exec boil.ContextExecutor, iD []byte, selectCols ...string) (*TaskProcess, error) {
	taskProcessObj := &TaskProcess{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"task_process\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, taskProcessObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from task_process")
	}

	if err = taskProcessObj.doAfterSelectHooks(ctx, exec); err != nil {
		return taskProcessObj, err
	}

	return taskProcessObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *TaskProcess) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no task_process provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(taskProcessColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	taskProcessInsertCacheMut.RLock()
	cache, cached := taskProcessInsertCache[key]
	taskProcessInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			taskProcessAllColumns,
			taskProcessColumnsWithDefault,
			taskProcessColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(taskProcessType, taskProcessMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(taskProcessType, taskProcessMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"task_process\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"task_process\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into task_process")
	}

	if !cached {
		taskProcessInsertCacheMut.Lock()
		taskProcessInsertCache[key] = cache
		taskProcessInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the TaskProcess.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *TaskProcess) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	taskProcessUpdateCacheMut.RLock()
	cache, cached := taskProcessUpdateCache[key]
	taskProcessUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			taskProcessAllColumns,
			taskProcessPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update task_process, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"task_process\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, taskProcessPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(taskProcessType, taskProcessMapping, append(wl, taskProcessPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update task_process row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for task_process")
	}

	if !cached {
		taskProcessUpdateCacheMut.Lock()
		taskProcessUpdateCache[key] = cache
		taskProcessUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q taskProcessQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for task_process")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for task_process")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TaskProcessSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), taskProcessPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"task_process\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, taskProcessPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in taskProcess slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all taskProcess")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *TaskProcess) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no task_process provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(taskProcessColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	taskProcessUpsertCacheMut.RLock()
	cache, cached := taskProcessUpsertCache[key]
	taskProcessUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			taskProcessAllColumns,
			taskProcessColumnsWithDefault,
			taskProcessColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			taskProcessAllColumns,
			taskProcessPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert task_process, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(taskProcessPrimaryKeyColumns))
			copy(conflict, taskProcessPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"task_process\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(taskProcessType, taskProcessMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(taskProcessType, taskProcessMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert task_process")
	}

	if !cached {
		taskProcessUpsertCacheMut.Lock()
		taskProcessUpsertCache[key] = cache
		taskProcessUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single TaskProcess record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *TaskProcess) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no TaskProcess provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), taskProcessPrimaryKeyMapping)
	sql := "DELETE FROM \"task_process\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from task_process")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for task_process")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q taskProcessQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no taskProcessQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from task_process")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for task_process")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TaskProcessSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(taskProcessBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), taskProcessPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"task_process\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, taskProcessPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from taskProcess slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for task_process")
	}

	if len(taskProcessAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *TaskProcess) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindTaskProcess(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TaskProcessSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TaskProcessSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), taskProcessPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"task_process\".* FROM \"task_process\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, taskProcessPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in TaskProcessSlice")
	}

	*o = slice

	return nil
}

// TaskProcessExists checks if the TaskProcess row exists.
func TaskProcessExists(ctx context.Context, exec boil.ContextExecutor, iD []byte) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"task_process\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if task_process exists")
	}

	return exists, nil
}

// Exists checks if the TaskProcess row exists.
func (o *TaskProcess) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return TaskProcessExists(ctx, exec, o.ID)
}
