// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SolutionSaasResearchProduct is an object representing the database table.
type SolutionSaasResearchProduct struct { // SaaS調査プロダクトID
	ID []byte `boil:"id" json:"id" toml:"id" yaml:"id"`
	// ソリューションプロダクトID
	SolutionProductID []byte `boil:"solution_product_id" json:"solution_product_id" toml:"solution_product_id" yaml:"solution_product_id"`
	// 掲載
	Publishing null.Bool `boil:"publishing" json:"publishing,omitempty" toml:"publishing" yaml:"publishing,omitempty"`
	// 比較
	Comparison null.Bool `boil:"comparison" json:"comparison,omitempty" toml:"comparison" yaml:"comparison,omitempty"`
	// 口コミ
	WordOfMouth null.Bool `boil:"word_of_mouth" json:"word_of_mouth,omitempty" toml:"word_of_mouth" yaml:"word_of_mouth,omitempty"`
	// データ作成日
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	// データ更新日
	UpdatedAt time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *solutionSaasResearchProductR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L solutionSaasResearchProductL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SolutionSaasResearchProductColumns = struct {
	ID                string
	SolutionProductID string
	Publishing        string
	Comparison        string
	WordOfMouth       string
	CreatedAt         string
	UpdatedAt         string
}{
	ID:                "id",
	SolutionProductID: "solution_product_id",
	Publishing:        "publishing",
	Comparison:        "comparison",
	WordOfMouth:       "word_of_mouth",
	CreatedAt:         "created_at",
	UpdatedAt:         "updated_at",
}

var SolutionSaasResearchProductTableColumns = struct {
	ID                string
	SolutionProductID string
	Publishing        string
	Comparison        string
	WordOfMouth       string
	CreatedAt         string
	UpdatedAt         string
}{
	ID:                "solution_saas_research_products.id",
	SolutionProductID: "solution_saas_research_products.solution_product_id",
	Publishing:        "solution_saas_research_products.publishing",
	Comparison:        "solution_saas_research_products.comparison",
	WordOfMouth:       "solution_saas_research_products.word_of_mouth",
	CreatedAt:         "solution_saas_research_products.created_at",
	UpdatedAt:         "solution_saas_research_products.updated_at",
}

// Generated where

var SolutionSaasResearchProductWhere = struct {
	ID                whereHelper__byte
	SolutionProductID whereHelper__byte
	Publishing        whereHelpernull_Bool
	Comparison        whereHelpernull_Bool
	WordOfMouth       whereHelpernull_Bool
	CreatedAt         whereHelpertime_Time
	UpdatedAt         whereHelpertime_Time
}{
	ID:                whereHelper__byte{field: "\"solution_saas_research_products\".\"id\""},
	SolutionProductID: whereHelper__byte{field: "\"solution_saas_research_products\".\"solution_product_id\""},
	Publishing:        whereHelpernull_Bool{field: "\"solution_saas_research_products\".\"publishing\""},
	Comparison:        whereHelpernull_Bool{field: "\"solution_saas_research_products\".\"comparison\""},
	WordOfMouth:       whereHelpernull_Bool{field: "\"solution_saas_research_products\".\"word_of_mouth\""},
	CreatedAt:         whereHelpertime_Time{field: "\"solution_saas_research_products\".\"created_at\""},
	UpdatedAt:         whereHelpertime_Time{field: "\"solution_saas_research_products\".\"updated_at\""},
}

// SolutionSaasResearchProductRels is where relationship names are stored.
var SolutionSaasResearchProductRels = struct {
	SolutionProduct string
}{
	SolutionProduct: "SolutionProduct",
}

// solutionSaasResearchProductR is where relationships are stored.
type solutionSaasResearchProductR struct {
	SolutionProduct *SolutionProduct `boil:"SolutionProduct" json:"SolutionProduct" toml:"SolutionProduct" yaml:"SolutionProduct"`
}

// NewStruct creates a new relationship struct
func (*solutionSaasResearchProductR) NewStruct() *solutionSaasResearchProductR {
	return &solutionSaasResearchProductR{}
}

func (r *solutionSaasResearchProductR) GetSolutionProduct() *SolutionProduct {
	if r == nil {
		return nil
	}
	return r.SolutionProduct
}

// solutionSaasResearchProductL is where Load methods for each relationship are stored.
type solutionSaasResearchProductL struct{}

var (
	solutionSaasResearchProductAllColumns            = []string{"id", "solution_product_id", "publishing", "comparison", "word_of_mouth", "created_at", "updated_at"}
	solutionSaasResearchProductColumnsWithoutDefault = []string{"solution_product_id"}
	solutionSaasResearchProductColumnsWithDefault    = []string{"id", "publishing", "comparison", "word_of_mouth", "created_at", "updated_at"}
	solutionSaasResearchProductPrimaryKeyColumns     = []string{"id"}
	solutionSaasResearchProductGeneratedColumns      = []string{}
)

type (
	// SolutionSaasResearchProductSlice is an alias for a slice of pointers to SolutionSaasResearchProduct.
	// This should almost always be used instead of []SolutionSaasResearchProduct.
	SolutionSaasResearchProductSlice []*SolutionSaasResearchProduct
	// SolutionSaasResearchProductHook is the signature for custom SolutionSaasResearchProduct hook methods
	SolutionSaasResearchProductHook func(context.Context, boil.ContextExecutor, *SolutionSaasResearchProduct) error

	solutionSaasResearchProductQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	solutionSaasResearchProductType                 = reflect.TypeOf(&SolutionSaasResearchProduct{})
	solutionSaasResearchProductMapping              = queries.MakeStructMapping(solutionSaasResearchProductType)
	solutionSaasResearchProductPrimaryKeyMapping, _ = queries.BindMapping(solutionSaasResearchProductType, solutionSaasResearchProductMapping, solutionSaasResearchProductPrimaryKeyColumns)
	solutionSaasResearchProductInsertCacheMut       sync.RWMutex
	solutionSaasResearchProductInsertCache          = make(map[string]insertCache)
	solutionSaasResearchProductUpdateCacheMut       sync.RWMutex
	solutionSaasResearchProductUpdateCache          = make(map[string]updateCache)
	solutionSaasResearchProductUpsertCacheMut       sync.RWMutex
	solutionSaasResearchProductUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var solutionSaasResearchProductAfterSelectHooks []SolutionSaasResearchProductHook

var solutionSaasResearchProductBeforeInsertHooks []SolutionSaasResearchProductHook
var solutionSaasResearchProductAfterInsertHooks []SolutionSaasResearchProductHook

var solutionSaasResearchProductBeforeUpdateHooks []SolutionSaasResearchProductHook
var solutionSaasResearchProductAfterUpdateHooks []SolutionSaasResearchProductHook

var solutionSaasResearchProductBeforeDeleteHooks []SolutionSaasResearchProductHook
var solutionSaasResearchProductAfterDeleteHooks []SolutionSaasResearchProductHook

var solutionSaasResearchProductBeforeUpsertHooks []SolutionSaasResearchProductHook
var solutionSaasResearchProductAfterUpsertHooks []SolutionSaasResearchProductHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SolutionSaasResearchProduct) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range solutionSaasResearchProductAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SolutionSaasResearchProduct) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range solutionSaasResearchProductBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SolutionSaasResearchProduct) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range solutionSaasResearchProductAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SolutionSaasResearchProduct) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range solutionSaasResearchProductBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SolutionSaasResearchProduct) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range solutionSaasResearchProductAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SolutionSaasResearchProduct) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range solutionSaasResearchProductBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SolutionSaasResearchProduct) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range solutionSaasResearchProductAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SolutionSaasResearchProduct) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range solutionSaasResearchProductBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SolutionSaasResearchProduct) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range solutionSaasResearchProductAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSolutionSaasResearchProductHook registers your hook function for all future operations.
func AddSolutionSaasResearchProductHook(hookPoint boil.HookPoint, solutionSaasResearchProductHook SolutionSaasResearchProductHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		solutionSaasResearchProductAfterSelectHooks = append(solutionSaasResearchProductAfterSelectHooks, solutionSaasResearchProductHook)
	case boil.BeforeInsertHook:
		solutionSaasResearchProductBeforeInsertHooks = append(solutionSaasResearchProductBeforeInsertHooks, solutionSaasResearchProductHook)
	case boil.AfterInsertHook:
		solutionSaasResearchProductAfterInsertHooks = append(solutionSaasResearchProductAfterInsertHooks, solutionSaasResearchProductHook)
	case boil.BeforeUpdateHook:
		solutionSaasResearchProductBeforeUpdateHooks = append(solutionSaasResearchProductBeforeUpdateHooks, solutionSaasResearchProductHook)
	case boil.AfterUpdateHook:
		solutionSaasResearchProductAfterUpdateHooks = append(solutionSaasResearchProductAfterUpdateHooks, solutionSaasResearchProductHook)
	case boil.BeforeDeleteHook:
		solutionSaasResearchProductBeforeDeleteHooks = append(solutionSaasResearchProductBeforeDeleteHooks, solutionSaasResearchProductHook)
	case boil.AfterDeleteHook:
		solutionSaasResearchProductAfterDeleteHooks = append(solutionSaasResearchProductAfterDeleteHooks, solutionSaasResearchProductHook)
	case boil.BeforeUpsertHook:
		solutionSaasResearchProductBeforeUpsertHooks = append(solutionSaasResearchProductBeforeUpsertHooks, solutionSaasResearchProductHook)
	case boil.AfterUpsertHook:
		solutionSaasResearchProductAfterUpsertHooks = append(solutionSaasResearchProductAfterUpsertHooks, solutionSaasResearchProductHook)
	}
}

// One returns a single solutionSaasResearchProduct record from the query.
func (q solutionSaasResearchProductQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SolutionSaasResearchProduct, error) {
	o := &SolutionSaasResearchProduct{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for solution_saas_research_products")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SolutionSaasResearchProduct records from the query.
func (q solutionSaasResearchProductQuery) All(ctx context.Context, exec boil.ContextExecutor) (SolutionSaasResearchProductSlice, error) {
	var o []*SolutionSaasResearchProduct

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to SolutionSaasResearchProduct slice")
	}

	if len(solutionSaasResearchProductAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SolutionSaasResearchProduct records in the query.
func (q solutionSaasResearchProductQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count solution_saas_research_products rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q solutionSaasResearchProductQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if solution_saas_research_products exists")
	}

	return count > 0, nil
}

// SolutionProduct pointed to by the foreign key.
func (o *SolutionSaasResearchProduct) SolutionProduct(mods ...qm.QueryMod) solutionProductQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.SolutionProductID),
	}

	queryMods = append(queryMods, mods...)

	return SolutionProducts(queryMods...)
}

// LoadSolutionProduct allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (solutionSaasResearchProductL) LoadSolutionProduct(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSolutionSaasResearchProduct interface{}, mods queries.Applicator) error {
	var slice []*SolutionSaasResearchProduct
	var object *SolutionSaasResearchProduct

	if singular {
		var ok bool
		object, ok = maybeSolutionSaasResearchProduct.(*SolutionSaasResearchProduct)
		if !ok {
			object = new(SolutionSaasResearchProduct)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeSolutionSaasResearchProduct)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeSolutionSaasResearchProduct))
			}
		}
	} else {
		s, ok := maybeSolutionSaasResearchProduct.(*[]*SolutionSaasResearchProduct)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeSolutionSaasResearchProduct)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeSolutionSaasResearchProduct))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &solutionSaasResearchProductR{}
		}
		if !queries.IsNil(object.SolutionProductID) {
			args = append(args, object.SolutionProductID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &solutionSaasResearchProductR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.SolutionProductID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.SolutionProductID) {
				args = append(args, obj.SolutionProductID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`solution_products`),
		qm.WhereIn(`solution_products.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load SolutionProduct")
	}

	var resultSlice []*SolutionProduct
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice SolutionProduct")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for solution_products")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for solution_products")
	}

	if len(solutionProductAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.SolutionProduct = foreign
		if foreign.R == nil {
			foreign.R = &solutionProductR{}
		}
		foreign.R.SolutionSaasResearchProduct = object
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.SolutionProductID, foreign.ID) {
				local.R.SolutionProduct = foreign
				if foreign.R == nil {
					foreign.R = &solutionProductR{}
				}
				foreign.R.SolutionSaasResearchProduct = local
				break
			}
		}
	}

	return nil
}

// SetSolutionProduct of the solutionSaasResearchProduct to the related item.
// Sets o.R.SolutionProduct to related.
// Adds o to related.R.SolutionSaasResearchProduct.
func (o *SolutionSaasResearchProduct) SetSolutionProduct(ctx context.Context, exec boil.ContextExecutor, insert bool, related *SolutionProduct) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"solution_saas_research_products\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"solution_product_id"}),
		strmangle.WhereClause("\"", "\"", 2, solutionSaasResearchProductPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.SolutionProductID, related.ID)
	if o.R == nil {
		o.R = &solutionSaasResearchProductR{
			SolutionProduct: related,
		}
	} else {
		o.R.SolutionProduct = related
	}

	if related.R == nil {
		related.R = &solutionProductR{
			SolutionSaasResearchProduct: o,
		}
	} else {
		related.R.SolutionSaasResearchProduct = o
	}

	return nil
}

// SolutionSaasResearchProducts retrieves all the records using an executor.
func SolutionSaasResearchProducts(mods ...qm.QueryMod) solutionSaasResearchProductQuery {
	mods = append(mods, qm.From("\"solution_saas_research_products\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"solution_saas_research_products\".*"})
	}

	return solutionSaasResearchProductQuery{q}
}

// FindSolutionSaasResearchProduct retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSolutionSaasResearchProduct(ctx context.Context, exec boil.ContextExecutor, iD []byte, selectCols ...string) (*SolutionSaasResearchProduct, error) {
	solutionSaasResearchProductObj := &SolutionSaasResearchProduct{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"solution_saas_research_products\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, solutionSaasResearchProductObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from solution_saas_research_products")
	}

	if err = solutionSaasResearchProductObj.doAfterSelectHooks(ctx, exec); err != nil {
		return solutionSaasResearchProductObj, err
	}

	return solutionSaasResearchProductObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SolutionSaasResearchProduct) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no solution_saas_research_products provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(solutionSaasResearchProductColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	solutionSaasResearchProductInsertCacheMut.RLock()
	cache, cached := solutionSaasResearchProductInsertCache[key]
	solutionSaasResearchProductInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			solutionSaasResearchProductAllColumns,
			solutionSaasResearchProductColumnsWithDefault,
			solutionSaasResearchProductColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(solutionSaasResearchProductType, solutionSaasResearchProductMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(solutionSaasResearchProductType, solutionSaasResearchProductMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"solution_saas_research_products\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"solution_saas_research_products\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into solution_saas_research_products")
	}

	if !cached {
		solutionSaasResearchProductInsertCacheMut.Lock()
		solutionSaasResearchProductInsertCache[key] = cache
		solutionSaasResearchProductInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SolutionSaasResearchProduct.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SolutionSaasResearchProduct) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	solutionSaasResearchProductUpdateCacheMut.RLock()
	cache, cached := solutionSaasResearchProductUpdateCache[key]
	solutionSaasResearchProductUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			solutionSaasResearchProductAllColumns,
			solutionSaasResearchProductPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update solution_saas_research_products, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"solution_saas_research_products\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, solutionSaasResearchProductPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(solutionSaasResearchProductType, solutionSaasResearchProductMapping, append(wl, solutionSaasResearchProductPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update solution_saas_research_products row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for solution_saas_research_products")
	}

	if !cached {
		solutionSaasResearchProductUpdateCacheMut.Lock()
		solutionSaasResearchProductUpdateCache[key] = cache
		solutionSaasResearchProductUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q solutionSaasResearchProductQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for solution_saas_research_products")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for solution_saas_research_products")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SolutionSaasResearchProductSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), solutionSaasResearchProductPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"solution_saas_research_products\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, solutionSaasResearchProductPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in solutionSaasResearchProduct slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all solutionSaasResearchProduct")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SolutionSaasResearchProduct) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no solution_saas_research_products provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(solutionSaasResearchProductColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	solutionSaasResearchProductUpsertCacheMut.RLock()
	cache, cached := solutionSaasResearchProductUpsertCache[key]
	solutionSaasResearchProductUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			solutionSaasResearchProductAllColumns,
			solutionSaasResearchProductColumnsWithDefault,
			solutionSaasResearchProductColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			solutionSaasResearchProductAllColumns,
			solutionSaasResearchProductPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert solution_saas_research_products, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(solutionSaasResearchProductPrimaryKeyColumns))
			copy(conflict, solutionSaasResearchProductPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"solution_saas_research_products\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(solutionSaasResearchProductType, solutionSaasResearchProductMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(solutionSaasResearchProductType, solutionSaasResearchProductMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert solution_saas_research_products")
	}

	if !cached {
		solutionSaasResearchProductUpsertCacheMut.Lock()
		solutionSaasResearchProductUpsertCache[key] = cache
		solutionSaasResearchProductUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SolutionSaasResearchProduct record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SolutionSaasResearchProduct) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no SolutionSaasResearchProduct provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), solutionSaasResearchProductPrimaryKeyMapping)
	sql := "DELETE FROM \"solution_saas_research_products\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from solution_saas_research_products")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for solution_saas_research_products")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q solutionSaasResearchProductQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no solutionSaasResearchProductQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from solution_saas_research_products")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for solution_saas_research_products")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SolutionSaasResearchProductSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(solutionSaasResearchProductBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), solutionSaasResearchProductPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"solution_saas_research_products\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, solutionSaasResearchProductPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from solutionSaasResearchProduct slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for solution_saas_research_products")
	}

	if len(solutionSaasResearchProductAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SolutionSaasResearchProduct) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSolutionSaasResearchProduct(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SolutionSaasResearchProductSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SolutionSaasResearchProductSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), solutionSaasResearchProductPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"solution_saas_research_products\".* FROM \"solution_saas_research_products\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, solutionSaasResearchProductPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in SolutionSaasResearchProductSlice")
	}

	*o = slice

	return nil
}

// SolutionSaasResearchProductExists checks if the SolutionSaasResearchProduct row exists.
func SolutionSaasResearchProductExists(ctx context.Context, exec boil.ContextExecutor, iD []byte) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"solution_saas_research_products\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if solution_saas_research_products exists")
	}

	return exists, nil
}

// Exists checks if the SolutionSaasResearchProduct row exists.
func (o *SolutionSaasResearchProduct) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return SolutionSaasResearchProductExists(ctx, exec, o.ID)
}
