// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// IndustryMaster is an object representing the database table.
type IndustryMaster struct { // 業界マスタID
	ID []byte `boil:"id" json:"id" toml:"id" yaml:"id"`
	// 業界
	Industry string `boil:"industry" json:"industry" toml:"industry" yaml:"industry"`
	// データ作成日
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	// データ更新日
	UpdatedAt time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *industryMasterR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L industryMasterL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var IndustryMasterColumns = struct {
	ID        string
	Industry  string
	CreatedAt string
	UpdatedAt string
}{
	ID:        "id",
	Industry:  "industry",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
}

var IndustryMasterTableColumns = struct {
	ID        string
	Industry  string
	CreatedAt string
	UpdatedAt string
}{
	ID:        "industry_masters.id",
	Industry:  "industry_masters.industry",
	CreatedAt: "industry_masters.created_at",
	UpdatedAt: "industry_masters.updated_at",
}

// Generated where

var IndustryMasterWhere = struct {
	ID        whereHelper__byte
	Industry  whereHelperstring
	CreatedAt whereHelpertime_Time
	UpdatedAt whereHelpertime_Time
}{
	ID:        whereHelper__byte{field: "\"industry_masters\".\"id\""},
	Industry:  whereHelperstring{field: "\"industry_masters\".\"industry\""},
	CreatedAt: whereHelpertime_Time{field: "\"industry_masters\".\"created_at\""},
	UpdatedAt: whereHelpertime_Time{field: "\"industry_masters\".\"updated_at\""},
}

// IndustryMasterRels is where relationship names are stored.
var IndustryMasterRels = struct {
	SolutionMasters string
}{
	SolutionMasters: "SolutionMasters",
}

// industryMasterR is where relationships are stored.
type industryMasterR struct {
	SolutionMasters SolutionMasterSlice `boil:"SolutionMasters" json:"SolutionMasters" toml:"SolutionMasters" yaml:"SolutionMasters"`
}

// NewStruct creates a new relationship struct
func (*industryMasterR) NewStruct() *industryMasterR {
	return &industryMasterR{}
}

func (r *industryMasterR) GetSolutionMasters() SolutionMasterSlice {
	if r == nil {
		return nil
	}
	return r.SolutionMasters
}

// industryMasterL is where Load methods for each relationship are stored.
type industryMasterL struct{}

var (
	industryMasterAllColumns            = []string{"id", "industry", "created_at", "updated_at"}
	industryMasterColumnsWithoutDefault = []string{"industry"}
	industryMasterColumnsWithDefault    = []string{"id", "created_at", "updated_at"}
	industryMasterPrimaryKeyColumns     = []string{"id"}
	industryMasterGeneratedColumns      = []string{}
)

type (
	// IndustryMasterSlice is an alias for a slice of pointers to IndustryMaster.
	// This should almost always be used instead of []IndustryMaster.
	IndustryMasterSlice []*IndustryMaster
	// IndustryMasterHook is the signature for custom IndustryMaster hook methods
	IndustryMasterHook func(context.Context, boil.ContextExecutor, *IndustryMaster) error

	industryMasterQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	industryMasterType                 = reflect.TypeOf(&IndustryMaster{})
	industryMasterMapping              = queries.MakeStructMapping(industryMasterType)
	industryMasterPrimaryKeyMapping, _ = queries.BindMapping(industryMasterType, industryMasterMapping, industryMasterPrimaryKeyColumns)
	industryMasterInsertCacheMut       sync.RWMutex
	industryMasterInsertCache          = make(map[string]insertCache)
	industryMasterUpdateCacheMut       sync.RWMutex
	industryMasterUpdateCache          = make(map[string]updateCache)
	industryMasterUpsertCacheMut       sync.RWMutex
	industryMasterUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var industryMasterAfterSelectHooks []IndustryMasterHook

var industryMasterBeforeInsertHooks []IndustryMasterHook
var industryMasterAfterInsertHooks []IndustryMasterHook

var industryMasterBeforeUpdateHooks []IndustryMasterHook
var industryMasterAfterUpdateHooks []IndustryMasterHook

var industryMasterBeforeDeleteHooks []IndustryMasterHook
var industryMasterAfterDeleteHooks []IndustryMasterHook

var industryMasterBeforeUpsertHooks []IndustryMasterHook
var industryMasterAfterUpsertHooks []IndustryMasterHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *IndustryMaster) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range industryMasterAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *IndustryMaster) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range industryMasterBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *IndustryMaster) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range industryMasterAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *IndustryMaster) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range industryMasterBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *IndustryMaster) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range industryMasterAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *IndustryMaster) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range industryMasterBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *IndustryMaster) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range industryMasterAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *IndustryMaster) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range industryMasterBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *IndustryMaster) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range industryMasterAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddIndustryMasterHook registers your hook function for all future operations.
func AddIndustryMasterHook(hookPoint boil.HookPoint, industryMasterHook IndustryMasterHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		industryMasterAfterSelectHooks = append(industryMasterAfterSelectHooks, industryMasterHook)
	case boil.BeforeInsertHook:
		industryMasterBeforeInsertHooks = append(industryMasterBeforeInsertHooks, industryMasterHook)
	case boil.AfterInsertHook:
		industryMasterAfterInsertHooks = append(industryMasterAfterInsertHooks, industryMasterHook)
	case boil.BeforeUpdateHook:
		industryMasterBeforeUpdateHooks = append(industryMasterBeforeUpdateHooks, industryMasterHook)
	case boil.AfterUpdateHook:
		industryMasterAfterUpdateHooks = append(industryMasterAfterUpdateHooks, industryMasterHook)
	case boil.BeforeDeleteHook:
		industryMasterBeforeDeleteHooks = append(industryMasterBeforeDeleteHooks, industryMasterHook)
	case boil.AfterDeleteHook:
		industryMasterAfterDeleteHooks = append(industryMasterAfterDeleteHooks, industryMasterHook)
	case boil.BeforeUpsertHook:
		industryMasterBeforeUpsertHooks = append(industryMasterBeforeUpsertHooks, industryMasterHook)
	case boil.AfterUpsertHook:
		industryMasterAfterUpsertHooks = append(industryMasterAfterUpsertHooks, industryMasterHook)
	}
}

// One returns a single industryMaster record from the query.
func (q industryMasterQuery) One(ctx context.Context, exec boil.ContextExecutor) (*IndustryMaster, error) {
	o := &IndustryMaster{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for industry_masters")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all IndustryMaster records from the query.
func (q industryMasterQuery) All(ctx context.Context, exec boil.ContextExecutor) (IndustryMasterSlice, error) {
	var o []*IndustryMaster

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to IndustryMaster slice")
	}

	if len(industryMasterAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all IndustryMaster records in the query.
func (q industryMasterQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count industry_masters rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q industryMasterQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if industry_masters exists")
	}

	return count > 0, nil
}

// SolutionMasters retrieves all the solution_master's SolutionMasters with an executor.
func (o *IndustryMaster) SolutionMasters(mods ...qm.QueryMod) solutionMasterQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"solution_masters\".\"industry_master_id\"=?", o.ID),
	)

	return SolutionMasters(queryMods...)
}

// LoadSolutionMasters allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (industryMasterL) LoadSolutionMasters(ctx context.Context, e boil.ContextExecutor, singular bool, maybeIndustryMaster interface{}, mods queries.Applicator) error {
	var slice []*IndustryMaster
	var object *IndustryMaster

	if singular {
		var ok bool
		object, ok = maybeIndustryMaster.(*IndustryMaster)
		if !ok {
			object = new(IndustryMaster)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeIndustryMaster)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeIndustryMaster))
			}
		}
	} else {
		s, ok := maybeIndustryMaster.(*[]*IndustryMaster)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeIndustryMaster)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeIndustryMaster))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &industryMasterR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &industryMasterR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`solution_masters`),
		qm.WhereIn(`solution_masters.industry_master_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load solution_masters")
	}

	var resultSlice []*SolutionMaster
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice solution_masters")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on solution_masters")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for solution_masters")
	}

	if len(solutionMasterAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.SolutionMasters = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &solutionMasterR{}
			}
			foreign.R.IndustryMaster = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.IndustryMasterID) {
				local.R.SolutionMasters = append(local.R.SolutionMasters, foreign)
				if foreign.R == nil {
					foreign.R = &solutionMasterR{}
				}
				foreign.R.IndustryMaster = local
				break
			}
		}
	}

	return nil
}

// AddSolutionMasters adds the given related objects to the existing relationships
// of the industry_master, optionally inserting them as new records.
// Appends related to o.R.SolutionMasters.
// Sets related.R.IndustryMaster appropriately.
func (o *IndustryMaster) AddSolutionMasters(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SolutionMaster) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.IndustryMasterID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"solution_masters\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"industry_master_id"}),
				strmangle.WhereClause("\"", "\"", 2, solutionMasterPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.IndustryMasterID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &industryMasterR{
			SolutionMasters: related,
		}
	} else {
		o.R.SolutionMasters = append(o.R.SolutionMasters, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &solutionMasterR{
				IndustryMaster: o,
			}
		} else {
			rel.R.IndustryMaster = o
		}
	}
	return nil
}

// IndustryMasters retrieves all the records using an executor.
func IndustryMasters(mods ...qm.QueryMod) industryMasterQuery {
	mods = append(mods, qm.From("\"industry_masters\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"industry_masters\".*"})
	}

	return industryMasterQuery{q}
}

// FindIndustryMaster retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindIndustryMaster(ctx context.Context, exec boil.ContextExecutor, iD []byte, selectCols ...string) (*IndustryMaster, error) {
	industryMasterObj := &IndustryMaster{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"industry_masters\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, industryMasterObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from industry_masters")
	}

	if err = industryMasterObj.doAfterSelectHooks(ctx, exec); err != nil {
		return industryMasterObj, err
	}

	return industryMasterObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *IndustryMaster) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no industry_masters provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(industryMasterColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	industryMasterInsertCacheMut.RLock()
	cache, cached := industryMasterInsertCache[key]
	industryMasterInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			industryMasterAllColumns,
			industryMasterColumnsWithDefault,
			industryMasterColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(industryMasterType, industryMasterMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(industryMasterType, industryMasterMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"industry_masters\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"industry_masters\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into industry_masters")
	}

	if !cached {
		industryMasterInsertCacheMut.Lock()
		industryMasterInsertCache[key] = cache
		industryMasterInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the IndustryMaster.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *IndustryMaster) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	industryMasterUpdateCacheMut.RLock()
	cache, cached := industryMasterUpdateCache[key]
	industryMasterUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			industryMasterAllColumns,
			industryMasterPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update industry_masters, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"industry_masters\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, industryMasterPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(industryMasterType, industryMasterMapping, append(wl, industryMasterPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update industry_masters row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for industry_masters")
	}

	if !cached {
		industryMasterUpdateCacheMut.Lock()
		industryMasterUpdateCache[key] = cache
		industryMasterUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q industryMasterQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for industry_masters")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for industry_masters")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o IndustryMasterSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), industryMasterPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"industry_masters\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, industryMasterPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in industryMaster slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all industryMaster")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *IndustryMaster) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no industry_masters provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(industryMasterColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	industryMasterUpsertCacheMut.RLock()
	cache, cached := industryMasterUpsertCache[key]
	industryMasterUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			industryMasterAllColumns,
			industryMasterColumnsWithDefault,
			industryMasterColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			industryMasterAllColumns,
			industryMasterPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert industry_masters, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(industryMasterPrimaryKeyColumns))
			copy(conflict, industryMasterPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"industry_masters\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(industryMasterType, industryMasterMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(industryMasterType, industryMasterMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert industry_masters")
	}

	if !cached {
		industryMasterUpsertCacheMut.Lock()
		industryMasterUpsertCache[key] = cache
		industryMasterUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single IndustryMaster record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *IndustryMaster) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no IndustryMaster provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), industryMasterPrimaryKeyMapping)
	sql := "DELETE FROM \"industry_masters\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from industry_masters")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for industry_masters")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q industryMasterQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no industryMasterQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from industry_masters")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for industry_masters")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o IndustryMasterSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(industryMasterBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), industryMasterPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"industry_masters\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, industryMasterPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from industryMaster slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for industry_masters")
	}

	if len(industryMasterAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *IndustryMaster) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindIndustryMaster(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *IndustryMasterSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := IndustryMasterSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), industryMasterPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"industry_masters\".* FROM \"industry_masters\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, industryMasterPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in IndustryMasterSlice")
	}

	*o = slice

	return nil
}

// IndustryMasterExists checks if the IndustryMaster row exists.
func IndustryMasterExists(ctx context.Context, exec boil.ContextExecutor, iD []byte) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"industry_masters\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if industry_masters exists")
	}

	return exists, nil
}

// Exists checks if the IndustryMaster row exists.
func (o *IndustryMaster) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return IndustryMasterExists(ctx, exec, o.ID)
}
