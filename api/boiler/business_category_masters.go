// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// BusinessCategoryMaster is an object representing the database table.
type BusinessCategoryMaster struct { // 業務種類マスタID
	ID []byte `boil:"id" json:"id" toml:"id" yaml:"id"`
	// 業務種類
	BusinessCategory string `boil:"business_category" json:"business_category" toml:"business_category" yaml:"business_category"`
	// データ作成日
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	// データ更新日
	UpdatedAt time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *businessCategoryMasterR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L businessCategoryMasterL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var BusinessCategoryMasterColumns = struct {
	ID               string
	BusinessCategory string
	CreatedAt        string
	UpdatedAt        string
}{
	ID:               "id",
	BusinessCategory: "business_category",
	CreatedAt:        "created_at",
	UpdatedAt:        "updated_at",
}

var BusinessCategoryMasterTableColumns = struct {
	ID               string
	BusinessCategory string
	CreatedAt        string
	UpdatedAt        string
}{
	ID:               "business_category_masters.id",
	BusinessCategory: "business_category_masters.business_category",
	CreatedAt:        "business_category_masters.created_at",
	UpdatedAt:        "business_category_masters.updated_at",
}

// Generated where

type whereHelper__byte struct{ field string }

func (w whereHelper__byte) EQ(x []byte) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelper__byte) NEQ(x []byte) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelper__byte) LT(x []byte) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelper__byte) LTE(x []byte) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelper__byte) GT(x []byte) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelper__byte) GTE(x []byte) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) LIKE(x string) qm.QueryMod   { return qm.Where(w.field+" LIKE ?", x) }
func (w whereHelperstring) NLIKE(x string) qm.QueryMod  { return qm.Where(w.field+" NOT LIKE ?", x) }
func (w whereHelperstring) ILIKE(x string) qm.QueryMod  { return qm.Where(w.field+" ILIKE ?", x) }
func (w whereHelperstring) NILIKE(x string) qm.QueryMod { return qm.Where(w.field+" NOT ILIKE ?", x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var BusinessCategoryMasterWhere = struct {
	ID               whereHelper__byte
	BusinessCategory whereHelperstring
	CreatedAt        whereHelpertime_Time
	UpdatedAt        whereHelpertime_Time
}{
	ID:               whereHelper__byte{field: "\"business_category_masters\".\"id\""},
	BusinessCategory: whereHelperstring{field: "\"business_category_masters\".\"business_category\""},
	CreatedAt:        whereHelpertime_Time{field: "\"business_category_masters\".\"created_at\""},
	UpdatedAt:        whereHelpertime_Time{field: "\"business_category_masters\".\"updated_at\""},
}

// BusinessCategoryMasterRels is where relationship names are stored.
var BusinessCategoryMasterRels = struct {
	SolutionMasters string
}{
	SolutionMasters: "SolutionMasters",
}

// businessCategoryMasterR is where relationships are stored.
type businessCategoryMasterR struct {
	SolutionMasters SolutionMasterSlice `boil:"SolutionMasters" json:"SolutionMasters" toml:"SolutionMasters" yaml:"SolutionMasters"`
}

// NewStruct creates a new relationship struct
func (*businessCategoryMasterR) NewStruct() *businessCategoryMasterR {
	return &businessCategoryMasterR{}
}

func (r *businessCategoryMasterR) GetSolutionMasters() SolutionMasterSlice {
	if r == nil {
		return nil
	}
	return r.SolutionMasters
}

// businessCategoryMasterL is where Load methods for each relationship are stored.
type businessCategoryMasterL struct{}

var (
	businessCategoryMasterAllColumns            = []string{"id", "business_category", "created_at", "updated_at"}
	businessCategoryMasterColumnsWithoutDefault = []string{"business_category"}
	businessCategoryMasterColumnsWithDefault    = []string{"id", "created_at", "updated_at"}
	businessCategoryMasterPrimaryKeyColumns     = []string{"id"}
	businessCategoryMasterGeneratedColumns      = []string{}
)

type (
	// BusinessCategoryMasterSlice is an alias for a slice of pointers to BusinessCategoryMaster.
	// This should almost always be used instead of []BusinessCategoryMaster.
	BusinessCategoryMasterSlice []*BusinessCategoryMaster
	// BusinessCategoryMasterHook is the signature for custom BusinessCategoryMaster hook methods
	BusinessCategoryMasterHook func(context.Context, boil.ContextExecutor, *BusinessCategoryMaster) error

	businessCategoryMasterQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	businessCategoryMasterType                 = reflect.TypeOf(&BusinessCategoryMaster{})
	businessCategoryMasterMapping              = queries.MakeStructMapping(businessCategoryMasterType)
	businessCategoryMasterPrimaryKeyMapping, _ = queries.BindMapping(businessCategoryMasterType, businessCategoryMasterMapping, businessCategoryMasterPrimaryKeyColumns)
	businessCategoryMasterInsertCacheMut       sync.RWMutex
	businessCategoryMasterInsertCache          = make(map[string]insertCache)
	businessCategoryMasterUpdateCacheMut       sync.RWMutex
	businessCategoryMasterUpdateCache          = make(map[string]updateCache)
	businessCategoryMasterUpsertCacheMut       sync.RWMutex
	businessCategoryMasterUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var businessCategoryMasterAfterSelectHooks []BusinessCategoryMasterHook

var businessCategoryMasterBeforeInsertHooks []BusinessCategoryMasterHook
var businessCategoryMasterAfterInsertHooks []BusinessCategoryMasterHook

var businessCategoryMasterBeforeUpdateHooks []BusinessCategoryMasterHook
var businessCategoryMasterAfterUpdateHooks []BusinessCategoryMasterHook

var businessCategoryMasterBeforeDeleteHooks []BusinessCategoryMasterHook
var businessCategoryMasterAfterDeleteHooks []BusinessCategoryMasterHook

var businessCategoryMasterBeforeUpsertHooks []BusinessCategoryMasterHook
var businessCategoryMasterAfterUpsertHooks []BusinessCategoryMasterHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *BusinessCategoryMaster) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range businessCategoryMasterAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *BusinessCategoryMaster) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range businessCategoryMasterBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *BusinessCategoryMaster) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range businessCategoryMasterAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *BusinessCategoryMaster) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range businessCategoryMasterBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *BusinessCategoryMaster) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range businessCategoryMasterAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *BusinessCategoryMaster) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range businessCategoryMasterBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *BusinessCategoryMaster) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range businessCategoryMasterAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *BusinessCategoryMaster) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range businessCategoryMasterBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *BusinessCategoryMaster) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range businessCategoryMasterAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddBusinessCategoryMasterHook registers your hook function for all future operations.
func AddBusinessCategoryMasterHook(hookPoint boil.HookPoint, businessCategoryMasterHook BusinessCategoryMasterHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		businessCategoryMasterAfterSelectHooks = append(businessCategoryMasterAfterSelectHooks, businessCategoryMasterHook)
	case boil.BeforeInsertHook:
		businessCategoryMasterBeforeInsertHooks = append(businessCategoryMasterBeforeInsertHooks, businessCategoryMasterHook)
	case boil.AfterInsertHook:
		businessCategoryMasterAfterInsertHooks = append(businessCategoryMasterAfterInsertHooks, businessCategoryMasterHook)
	case boil.BeforeUpdateHook:
		businessCategoryMasterBeforeUpdateHooks = append(businessCategoryMasterBeforeUpdateHooks, businessCategoryMasterHook)
	case boil.AfterUpdateHook:
		businessCategoryMasterAfterUpdateHooks = append(businessCategoryMasterAfterUpdateHooks, businessCategoryMasterHook)
	case boil.BeforeDeleteHook:
		businessCategoryMasterBeforeDeleteHooks = append(businessCategoryMasterBeforeDeleteHooks, businessCategoryMasterHook)
	case boil.AfterDeleteHook:
		businessCategoryMasterAfterDeleteHooks = append(businessCategoryMasterAfterDeleteHooks, businessCategoryMasterHook)
	case boil.BeforeUpsertHook:
		businessCategoryMasterBeforeUpsertHooks = append(businessCategoryMasterBeforeUpsertHooks, businessCategoryMasterHook)
	case boil.AfterUpsertHook:
		businessCategoryMasterAfterUpsertHooks = append(businessCategoryMasterAfterUpsertHooks, businessCategoryMasterHook)
	}
}

// One returns a single businessCategoryMaster record from the query.
func (q businessCategoryMasterQuery) One(ctx context.Context, exec boil.ContextExecutor) (*BusinessCategoryMaster, error) {
	o := &BusinessCategoryMaster{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for business_category_masters")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all BusinessCategoryMaster records from the query.
func (q businessCategoryMasterQuery) All(ctx context.Context, exec boil.ContextExecutor) (BusinessCategoryMasterSlice, error) {
	var o []*BusinessCategoryMaster

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to BusinessCategoryMaster slice")
	}

	if len(businessCategoryMasterAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all BusinessCategoryMaster records in the query.
func (q businessCategoryMasterQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count business_category_masters rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q businessCategoryMasterQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if business_category_masters exists")
	}

	return count > 0, nil
}

// SolutionMasters retrieves all the solution_master's SolutionMasters with an executor.
func (o *BusinessCategoryMaster) SolutionMasters(mods ...qm.QueryMod) solutionMasterQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"solution_masters\".\"business_category_master_id\"=?", o.ID),
	)

	return SolutionMasters(queryMods...)
}

// LoadSolutionMasters allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (businessCategoryMasterL) LoadSolutionMasters(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBusinessCategoryMaster interface{}, mods queries.Applicator) error {
	var slice []*BusinessCategoryMaster
	var object *BusinessCategoryMaster

	if singular {
		var ok bool
		object, ok = maybeBusinessCategoryMaster.(*BusinessCategoryMaster)
		if !ok {
			object = new(BusinessCategoryMaster)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeBusinessCategoryMaster)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeBusinessCategoryMaster))
			}
		}
	} else {
		s, ok := maybeBusinessCategoryMaster.(*[]*BusinessCategoryMaster)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeBusinessCategoryMaster)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeBusinessCategoryMaster))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &businessCategoryMasterR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &businessCategoryMasterR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`solution_masters`),
		qm.WhereIn(`solution_masters.business_category_master_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load solution_masters")
	}

	var resultSlice []*SolutionMaster
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice solution_masters")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on solution_masters")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for solution_masters")
	}

	if len(solutionMasterAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.SolutionMasters = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &solutionMasterR{}
			}
			foreign.R.BusinessCategoryMaster = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.BusinessCategoryMasterID) {
				local.R.SolutionMasters = append(local.R.SolutionMasters, foreign)
				if foreign.R == nil {
					foreign.R = &solutionMasterR{}
				}
				foreign.R.BusinessCategoryMaster = local
				break
			}
		}
	}

	return nil
}

// AddSolutionMasters adds the given related objects to the existing relationships
// of the business_category_master, optionally inserting them as new records.
// Appends related to o.R.SolutionMasters.
// Sets related.R.BusinessCategoryMaster appropriately.
func (o *BusinessCategoryMaster) AddSolutionMasters(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SolutionMaster) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.BusinessCategoryMasterID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"solution_masters\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"business_category_master_id"}),
				strmangle.WhereClause("\"", "\"", 2, solutionMasterPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.BusinessCategoryMasterID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &businessCategoryMasterR{
			SolutionMasters: related,
		}
	} else {
		o.R.SolutionMasters = append(o.R.SolutionMasters, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &solutionMasterR{
				BusinessCategoryMaster: o,
			}
		} else {
			rel.R.BusinessCategoryMaster = o
		}
	}
	return nil
}

// BusinessCategoryMasters retrieves all the records using an executor.
func BusinessCategoryMasters(mods ...qm.QueryMod) businessCategoryMasterQuery {
	mods = append(mods, qm.From("\"business_category_masters\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"business_category_masters\".*"})
	}

	return businessCategoryMasterQuery{q}
}

// FindBusinessCategoryMaster retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindBusinessCategoryMaster(ctx context.Context, exec boil.ContextExecutor, iD []byte, selectCols ...string) (*BusinessCategoryMaster, error) {
	businessCategoryMasterObj := &BusinessCategoryMaster{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"business_category_masters\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, businessCategoryMasterObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from business_category_masters")
	}

	if err = businessCategoryMasterObj.doAfterSelectHooks(ctx, exec); err != nil {
		return businessCategoryMasterObj, err
	}

	return businessCategoryMasterObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *BusinessCategoryMaster) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no business_category_masters provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(businessCategoryMasterColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	businessCategoryMasterInsertCacheMut.RLock()
	cache, cached := businessCategoryMasterInsertCache[key]
	businessCategoryMasterInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			businessCategoryMasterAllColumns,
			businessCategoryMasterColumnsWithDefault,
			businessCategoryMasterColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(businessCategoryMasterType, businessCategoryMasterMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(businessCategoryMasterType, businessCategoryMasterMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"business_category_masters\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"business_category_masters\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into business_category_masters")
	}

	if !cached {
		businessCategoryMasterInsertCacheMut.Lock()
		businessCategoryMasterInsertCache[key] = cache
		businessCategoryMasterInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the BusinessCategoryMaster.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *BusinessCategoryMaster) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	businessCategoryMasterUpdateCacheMut.RLock()
	cache, cached := businessCategoryMasterUpdateCache[key]
	businessCategoryMasterUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			businessCategoryMasterAllColumns,
			businessCategoryMasterPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update business_category_masters, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"business_category_masters\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, businessCategoryMasterPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(businessCategoryMasterType, businessCategoryMasterMapping, append(wl, businessCategoryMasterPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update business_category_masters row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for business_category_masters")
	}

	if !cached {
		businessCategoryMasterUpdateCacheMut.Lock()
		businessCategoryMasterUpdateCache[key] = cache
		businessCategoryMasterUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q businessCategoryMasterQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for business_category_masters")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for business_category_masters")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o BusinessCategoryMasterSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), businessCategoryMasterPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"business_category_masters\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, businessCategoryMasterPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in businessCategoryMaster slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all businessCategoryMaster")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *BusinessCategoryMaster) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no business_category_masters provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(businessCategoryMasterColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	businessCategoryMasterUpsertCacheMut.RLock()
	cache, cached := businessCategoryMasterUpsertCache[key]
	businessCategoryMasterUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			businessCategoryMasterAllColumns,
			businessCategoryMasterColumnsWithDefault,
			businessCategoryMasterColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			businessCategoryMasterAllColumns,
			businessCategoryMasterPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert business_category_masters, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(businessCategoryMasterPrimaryKeyColumns))
			copy(conflict, businessCategoryMasterPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"business_category_masters\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(businessCategoryMasterType, businessCategoryMasterMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(businessCategoryMasterType, businessCategoryMasterMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert business_category_masters")
	}

	if !cached {
		businessCategoryMasterUpsertCacheMut.Lock()
		businessCategoryMasterUpsertCache[key] = cache
		businessCategoryMasterUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single BusinessCategoryMaster record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *BusinessCategoryMaster) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no BusinessCategoryMaster provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), businessCategoryMasterPrimaryKeyMapping)
	sql := "DELETE FROM \"business_category_masters\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from business_category_masters")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for business_category_masters")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q businessCategoryMasterQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no businessCategoryMasterQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from business_category_masters")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for business_category_masters")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o BusinessCategoryMasterSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(businessCategoryMasterBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), businessCategoryMasterPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"business_category_masters\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, businessCategoryMasterPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from businessCategoryMaster slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for business_category_masters")
	}

	if len(businessCategoryMasterAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *BusinessCategoryMaster) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindBusinessCategoryMaster(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BusinessCategoryMasterSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := BusinessCategoryMasterSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), businessCategoryMasterPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"business_category_masters\".* FROM \"business_category_masters\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, businessCategoryMasterPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in BusinessCategoryMasterSlice")
	}

	*o = slice

	return nil
}

// BusinessCategoryMasterExists checks if the BusinessCategoryMaster row exists.
func BusinessCategoryMasterExists(ctx context.Context, exec boil.ContextExecutor, iD []byte) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"business_category_masters\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if business_category_masters exists")
	}

	return exists, nil
}

// Exists checks if the BusinessCategoryMaster row exists.
func (o *BusinessCategoryMaster) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return BusinessCategoryMasterExists(ctx, exec, o.ID)
}
