// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SolutionPackagingProduct is an object representing the database table.
type SolutionPackagingProduct struct { // 梱包プロダクトID
	ID []byte `boil:"id" json:"id" toml:"id" yaml:"id"`
	// ソリューションプロダクトID
	SolutionProductID []byte `boil:"solution_product_id" json:"solution_product_id" toml:"solution_product_id" yaml:"solution_product_id"`
	// ラベル対応
	LabelEnabled null.Bool `boil:"label_enabled" json:"label_enabled,omitempty" toml:"label_enabled" yaml:"label_enabled,omitempty"`
	// 汎用性
	Versatility null.Bool `boil:"versatility" json:"versatility,omitempty" toml:"versatility" yaml:"versatility,omitempty"`
	// データ作成日
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	// データ更新日
	UpdatedAt time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *solutionPackagingProductR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L solutionPackagingProductL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SolutionPackagingProductColumns = struct {
	ID                string
	SolutionProductID string
	LabelEnabled      string
	Versatility       string
	CreatedAt         string
	UpdatedAt         string
}{
	ID:                "id",
	SolutionProductID: "solution_product_id",
	LabelEnabled:      "label_enabled",
	Versatility:       "versatility",
	CreatedAt:         "created_at",
	UpdatedAt:         "updated_at",
}

var SolutionPackagingProductTableColumns = struct {
	ID                string
	SolutionProductID string
	LabelEnabled      string
	Versatility       string
	CreatedAt         string
	UpdatedAt         string
}{
	ID:                "solution_packaging_products.id",
	SolutionProductID: "solution_packaging_products.solution_product_id",
	LabelEnabled:      "solution_packaging_products.label_enabled",
	Versatility:       "solution_packaging_products.versatility",
	CreatedAt:         "solution_packaging_products.created_at",
	UpdatedAt:         "solution_packaging_products.updated_at",
}

// Generated where

var SolutionPackagingProductWhere = struct {
	ID                whereHelper__byte
	SolutionProductID whereHelper__byte
	LabelEnabled      whereHelpernull_Bool
	Versatility       whereHelpernull_Bool
	CreatedAt         whereHelpertime_Time
	UpdatedAt         whereHelpertime_Time
}{
	ID:                whereHelper__byte{field: "\"solution_packaging_products\".\"id\""},
	SolutionProductID: whereHelper__byte{field: "\"solution_packaging_products\".\"solution_product_id\""},
	LabelEnabled:      whereHelpernull_Bool{field: "\"solution_packaging_products\".\"label_enabled\""},
	Versatility:       whereHelpernull_Bool{field: "\"solution_packaging_products\".\"versatility\""},
	CreatedAt:         whereHelpertime_Time{field: "\"solution_packaging_products\".\"created_at\""},
	UpdatedAt:         whereHelpertime_Time{field: "\"solution_packaging_products\".\"updated_at\""},
}

// SolutionPackagingProductRels is where relationship names are stored.
var SolutionPackagingProductRels = struct {
	SolutionProduct string
}{
	SolutionProduct: "SolutionProduct",
}

// solutionPackagingProductR is where relationships are stored.
type solutionPackagingProductR struct {
	SolutionProduct *SolutionProduct `boil:"SolutionProduct" json:"SolutionProduct" toml:"SolutionProduct" yaml:"SolutionProduct"`
}

// NewStruct creates a new relationship struct
func (*solutionPackagingProductR) NewStruct() *solutionPackagingProductR {
	return &solutionPackagingProductR{}
}

func (r *solutionPackagingProductR) GetSolutionProduct() *SolutionProduct {
	if r == nil {
		return nil
	}
	return r.SolutionProduct
}

// solutionPackagingProductL is where Load methods for each relationship are stored.
type solutionPackagingProductL struct{}

var (
	solutionPackagingProductAllColumns            = []string{"id", "solution_product_id", "label_enabled", "versatility", "created_at", "updated_at"}
	solutionPackagingProductColumnsWithoutDefault = []string{"solution_product_id"}
	solutionPackagingProductColumnsWithDefault    = []string{"id", "label_enabled", "versatility", "created_at", "updated_at"}
	solutionPackagingProductPrimaryKeyColumns     = []string{"id"}
	solutionPackagingProductGeneratedColumns      = []string{}
)

type (
	// SolutionPackagingProductSlice is an alias for a slice of pointers to SolutionPackagingProduct.
	// This should almost always be used instead of []SolutionPackagingProduct.
	SolutionPackagingProductSlice []*SolutionPackagingProduct
	// SolutionPackagingProductHook is the signature for custom SolutionPackagingProduct hook methods
	SolutionPackagingProductHook func(context.Context, boil.ContextExecutor, *SolutionPackagingProduct) error

	solutionPackagingProductQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	solutionPackagingProductType                 = reflect.TypeOf(&SolutionPackagingProduct{})
	solutionPackagingProductMapping              = queries.MakeStructMapping(solutionPackagingProductType)
	solutionPackagingProductPrimaryKeyMapping, _ = queries.BindMapping(solutionPackagingProductType, solutionPackagingProductMapping, solutionPackagingProductPrimaryKeyColumns)
	solutionPackagingProductInsertCacheMut       sync.RWMutex
	solutionPackagingProductInsertCache          = make(map[string]insertCache)
	solutionPackagingProductUpdateCacheMut       sync.RWMutex
	solutionPackagingProductUpdateCache          = make(map[string]updateCache)
	solutionPackagingProductUpsertCacheMut       sync.RWMutex
	solutionPackagingProductUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var solutionPackagingProductAfterSelectHooks []SolutionPackagingProductHook

var solutionPackagingProductBeforeInsertHooks []SolutionPackagingProductHook
var solutionPackagingProductAfterInsertHooks []SolutionPackagingProductHook

var solutionPackagingProductBeforeUpdateHooks []SolutionPackagingProductHook
var solutionPackagingProductAfterUpdateHooks []SolutionPackagingProductHook

var solutionPackagingProductBeforeDeleteHooks []SolutionPackagingProductHook
var solutionPackagingProductAfterDeleteHooks []SolutionPackagingProductHook

var solutionPackagingProductBeforeUpsertHooks []SolutionPackagingProductHook
var solutionPackagingProductAfterUpsertHooks []SolutionPackagingProductHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SolutionPackagingProduct) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range solutionPackagingProductAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SolutionPackagingProduct) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range solutionPackagingProductBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SolutionPackagingProduct) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range solutionPackagingProductAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SolutionPackagingProduct) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range solutionPackagingProductBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SolutionPackagingProduct) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range solutionPackagingProductAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SolutionPackagingProduct) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range solutionPackagingProductBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SolutionPackagingProduct) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range solutionPackagingProductAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SolutionPackagingProduct) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range solutionPackagingProductBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SolutionPackagingProduct) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range solutionPackagingProductAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSolutionPackagingProductHook registers your hook function for all future operations.
func AddSolutionPackagingProductHook(hookPoint boil.HookPoint, solutionPackagingProductHook SolutionPackagingProductHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		solutionPackagingProductAfterSelectHooks = append(solutionPackagingProductAfterSelectHooks, solutionPackagingProductHook)
	case boil.BeforeInsertHook:
		solutionPackagingProductBeforeInsertHooks = append(solutionPackagingProductBeforeInsertHooks, solutionPackagingProductHook)
	case boil.AfterInsertHook:
		solutionPackagingProductAfterInsertHooks = append(solutionPackagingProductAfterInsertHooks, solutionPackagingProductHook)
	case boil.BeforeUpdateHook:
		solutionPackagingProductBeforeUpdateHooks = append(solutionPackagingProductBeforeUpdateHooks, solutionPackagingProductHook)
	case boil.AfterUpdateHook:
		solutionPackagingProductAfterUpdateHooks = append(solutionPackagingProductAfterUpdateHooks, solutionPackagingProductHook)
	case boil.BeforeDeleteHook:
		solutionPackagingProductBeforeDeleteHooks = append(solutionPackagingProductBeforeDeleteHooks, solutionPackagingProductHook)
	case boil.AfterDeleteHook:
		solutionPackagingProductAfterDeleteHooks = append(solutionPackagingProductAfterDeleteHooks, solutionPackagingProductHook)
	case boil.BeforeUpsertHook:
		solutionPackagingProductBeforeUpsertHooks = append(solutionPackagingProductBeforeUpsertHooks, solutionPackagingProductHook)
	case boil.AfterUpsertHook:
		solutionPackagingProductAfterUpsertHooks = append(solutionPackagingProductAfterUpsertHooks, solutionPackagingProductHook)
	}
}

// One returns a single solutionPackagingProduct record from the query.
func (q solutionPackagingProductQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SolutionPackagingProduct, error) {
	o := &SolutionPackagingProduct{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for solution_packaging_products")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SolutionPackagingProduct records from the query.
func (q solutionPackagingProductQuery) All(ctx context.Context, exec boil.ContextExecutor) (SolutionPackagingProductSlice, error) {
	var o []*SolutionPackagingProduct

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to SolutionPackagingProduct slice")
	}

	if len(solutionPackagingProductAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SolutionPackagingProduct records in the query.
func (q solutionPackagingProductQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count solution_packaging_products rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q solutionPackagingProductQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if solution_packaging_products exists")
	}

	return count > 0, nil
}

// SolutionProduct pointed to by the foreign key.
func (o *SolutionPackagingProduct) SolutionProduct(mods ...qm.QueryMod) solutionProductQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.SolutionProductID),
	}

	queryMods = append(queryMods, mods...)

	return SolutionProducts(queryMods...)
}

// LoadSolutionProduct allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (solutionPackagingProductL) LoadSolutionProduct(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSolutionPackagingProduct interface{}, mods queries.Applicator) error {
	var slice []*SolutionPackagingProduct
	var object *SolutionPackagingProduct

	if singular {
		var ok bool
		object, ok = maybeSolutionPackagingProduct.(*SolutionPackagingProduct)
		if !ok {
			object = new(SolutionPackagingProduct)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeSolutionPackagingProduct)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeSolutionPackagingProduct))
			}
		}
	} else {
		s, ok := maybeSolutionPackagingProduct.(*[]*SolutionPackagingProduct)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeSolutionPackagingProduct)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeSolutionPackagingProduct))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &solutionPackagingProductR{}
		}
		if !queries.IsNil(object.SolutionProductID) {
			args = append(args, object.SolutionProductID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &solutionPackagingProductR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.SolutionProductID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.SolutionProductID) {
				args = append(args, obj.SolutionProductID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`solution_products`),
		qm.WhereIn(`solution_products.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load SolutionProduct")
	}

	var resultSlice []*SolutionProduct
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice SolutionProduct")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for solution_products")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for solution_products")
	}

	if len(solutionProductAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.SolutionProduct = foreign
		if foreign.R == nil {
			foreign.R = &solutionProductR{}
		}
		foreign.R.SolutionPackagingProduct = object
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.SolutionProductID, foreign.ID) {
				local.R.SolutionProduct = foreign
				if foreign.R == nil {
					foreign.R = &solutionProductR{}
				}
				foreign.R.SolutionPackagingProduct = local
				break
			}
		}
	}

	return nil
}

// SetSolutionProduct of the solutionPackagingProduct to the related item.
// Sets o.R.SolutionProduct to related.
// Adds o to related.R.SolutionPackagingProduct.
func (o *SolutionPackagingProduct) SetSolutionProduct(ctx context.Context, exec boil.ContextExecutor, insert bool, related *SolutionProduct) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"solution_packaging_products\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"solution_product_id"}),
		strmangle.WhereClause("\"", "\"", 2, solutionPackagingProductPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.SolutionProductID, related.ID)
	if o.R == nil {
		o.R = &solutionPackagingProductR{
			SolutionProduct: related,
		}
	} else {
		o.R.SolutionProduct = related
	}

	if related.R == nil {
		related.R = &solutionProductR{
			SolutionPackagingProduct: o,
		}
	} else {
		related.R.SolutionPackagingProduct = o
	}

	return nil
}

// SolutionPackagingProducts retrieves all the records using an executor.
func SolutionPackagingProducts(mods ...qm.QueryMod) solutionPackagingProductQuery {
	mods = append(mods, qm.From("\"solution_packaging_products\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"solution_packaging_products\".*"})
	}

	return solutionPackagingProductQuery{q}
}

// FindSolutionPackagingProduct retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSolutionPackagingProduct(ctx context.Context, exec boil.ContextExecutor, iD []byte, selectCols ...string) (*SolutionPackagingProduct, error) {
	solutionPackagingProductObj := &SolutionPackagingProduct{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"solution_packaging_products\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, solutionPackagingProductObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from solution_packaging_products")
	}

	if err = solutionPackagingProductObj.doAfterSelectHooks(ctx, exec); err != nil {
		return solutionPackagingProductObj, err
	}

	return solutionPackagingProductObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SolutionPackagingProduct) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no solution_packaging_products provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(solutionPackagingProductColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	solutionPackagingProductInsertCacheMut.RLock()
	cache, cached := solutionPackagingProductInsertCache[key]
	solutionPackagingProductInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			solutionPackagingProductAllColumns,
			solutionPackagingProductColumnsWithDefault,
			solutionPackagingProductColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(solutionPackagingProductType, solutionPackagingProductMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(solutionPackagingProductType, solutionPackagingProductMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"solution_packaging_products\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"solution_packaging_products\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into solution_packaging_products")
	}

	if !cached {
		solutionPackagingProductInsertCacheMut.Lock()
		solutionPackagingProductInsertCache[key] = cache
		solutionPackagingProductInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SolutionPackagingProduct.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SolutionPackagingProduct) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	solutionPackagingProductUpdateCacheMut.RLock()
	cache, cached := solutionPackagingProductUpdateCache[key]
	solutionPackagingProductUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			solutionPackagingProductAllColumns,
			solutionPackagingProductPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update solution_packaging_products, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"solution_packaging_products\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, solutionPackagingProductPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(solutionPackagingProductType, solutionPackagingProductMapping, append(wl, solutionPackagingProductPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update solution_packaging_products row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for solution_packaging_products")
	}

	if !cached {
		solutionPackagingProductUpdateCacheMut.Lock()
		solutionPackagingProductUpdateCache[key] = cache
		solutionPackagingProductUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q solutionPackagingProductQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for solution_packaging_products")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for solution_packaging_products")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SolutionPackagingProductSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), solutionPackagingProductPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"solution_packaging_products\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, solutionPackagingProductPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in solutionPackagingProduct slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all solutionPackagingProduct")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SolutionPackagingProduct) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no solution_packaging_products provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(solutionPackagingProductColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	solutionPackagingProductUpsertCacheMut.RLock()
	cache, cached := solutionPackagingProductUpsertCache[key]
	solutionPackagingProductUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			solutionPackagingProductAllColumns,
			solutionPackagingProductColumnsWithDefault,
			solutionPackagingProductColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			solutionPackagingProductAllColumns,
			solutionPackagingProductPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert solution_packaging_products, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(solutionPackagingProductPrimaryKeyColumns))
			copy(conflict, solutionPackagingProductPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"solution_packaging_products\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(solutionPackagingProductType, solutionPackagingProductMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(solutionPackagingProductType, solutionPackagingProductMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert solution_packaging_products")
	}

	if !cached {
		solutionPackagingProductUpsertCacheMut.Lock()
		solutionPackagingProductUpsertCache[key] = cache
		solutionPackagingProductUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SolutionPackagingProduct record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SolutionPackagingProduct) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no SolutionPackagingProduct provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), solutionPackagingProductPrimaryKeyMapping)
	sql := "DELETE FROM \"solution_packaging_products\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from solution_packaging_products")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for solution_packaging_products")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q solutionPackagingProductQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no solutionPackagingProductQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from solution_packaging_products")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for solution_packaging_products")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SolutionPackagingProductSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(solutionPackagingProductBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), solutionPackagingProductPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"solution_packaging_products\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, solutionPackagingProductPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from solutionPackagingProduct slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for solution_packaging_products")
	}

	if len(solutionPackagingProductAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SolutionPackagingProduct) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSolutionPackagingProduct(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SolutionPackagingProductSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SolutionPackagingProductSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), solutionPackagingProductPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"solution_packaging_products\".* FROM \"solution_packaging_products\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, solutionPackagingProductPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in SolutionPackagingProductSlice")
	}

	*o = slice

	return nil
}

// SolutionPackagingProductExists checks if the SolutionPackagingProduct row exists.
func SolutionPackagingProductExists(ctx context.Context, exec boil.ContextExecutor, iD []byte) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"solution_packaging_products\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if solution_packaging_products exists")
	}

	return exists, nil
}

// Exists checks if the SolutionPackagingProduct row exists.
func (o *SolutionPackagingProduct) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return SolutionPackagingProductExists(ctx, exec, o.ID)
}
