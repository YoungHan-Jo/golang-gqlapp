// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// TicketHistory is an object representing the database table.
type TicketHistory struct { // チケット使用履歴ID
	ID []byte `boil:"id" json:"id" toml:"id" yaml:"id"`
	// チケットID
	TicketID []byte `boil:"ticket_id" json:"ticket_id" toml:"ticket_id" yaml:"ticket_id"`
	// ヒアリングID
	HearingID []byte `boil:"hearing_id" json:"hearing_id" toml:"hearing_id" yaml:"hearing_id"`
	// チケット使用日
	UsedDate time.Time `boil:"used_date" json:"used_date" toml:"used_date" yaml:"used_date"`
	// データ作成日
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	// データ更新日
	UpdatedAt time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *ticketHistoryR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L ticketHistoryL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TicketHistoryColumns = struct {
	ID        string
	TicketID  string
	HearingID string
	UsedDate  string
	CreatedAt string
	UpdatedAt string
}{
	ID:        "id",
	TicketID:  "ticket_id",
	HearingID: "hearing_id",
	UsedDate:  "used_date",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
}

var TicketHistoryTableColumns = struct {
	ID        string
	TicketID  string
	HearingID string
	UsedDate  string
	CreatedAt string
	UpdatedAt string
}{
	ID:        "ticket_histories.id",
	TicketID:  "ticket_histories.ticket_id",
	HearingID: "ticket_histories.hearing_id",
	UsedDate:  "ticket_histories.used_date",
	CreatedAt: "ticket_histories.created_at",
	UpdatedAt: "ticket_histories.updated_at",
}

// Generated where

var TicketHistoryWhere = struct {
	ID        whereHelper__byte
	TicketID  whereHelper__byte
	HearingID whereHelper__byte
	UsedDate  whereHelpertime_Time
	CreatedAt whereHelpertime_Time
	UpdatedAt whereHelpertime_Time
}{
	ID:        whereHelper__byte{field: "\"ticket_histories\".\"id\""},
	TicketID:  whereHelper__byte{field: "\"ticket_histories\".\"ticket_id\""},
	HearingID: whereHelper__byte{field: "\"ticket_histories\".\"hearing_id\""},
	UsedDate:  whereHelpertime_Time{field: "\"ticket_histories\".\"used_date\""},
	CreatedAt: whereHelpertime_Time{field: "\"ticket_histories\".\"created_at\""},
	UpdatedAt: whereHelpertime_Time{field: "\"ticket_histories\".\"updated_at\""},
}

// TicketHistoryRels is where relationship names are stored.
var TicketHistoryRels = struct {
	Hearing string
	Ticket  string
}{
	Hearing: "Hearing",
	Ticket:  "Ticket",
}

// ticketHistoryR is where relationships are stored.
type ticketHistoryR struct {
	Hearing *Hearing `boil:"Hearing" json:"Hearing" toml:"Hearing" yaml:"Hearing"`
	Ticket  *Ticket  `boil:"Ticket" json:"Ticket" toml:"Ticket" yaml:"Ticket"`
}

// NewStruct creates a new relationship struct
func (*ticketHistoryR) NewStruct() *ticketHistoryR {
	return &ticketHistoryR{}
}

func (r *ticketHistoryR) GetHearing() *Hearing {
	if r == nil {
		return nil
	}
	return r.Hearing
}

func (r *ticketHistoryR) GetTicket() *Ticket {
	if r == nil {
		return nil
	}
	return r.Ticket
}

// ticketHistoryL is where Load methods for each relationship are stored.
type ticketHistoryL struct{}

var (
	ticketHistoryAllColumns            = []string{"id", "ticket_id", "hearing_id", "used_date", "created_at", "updated_at"}
	ticketHistoryColumnsWithoutDefault = []string{"ticket_id", "hearing_id", "used_date"}
	ticketHistoryColumnsWithDefault    = []string{"id", "created_at", "updated_at"}
	ticketHistoryPrimaryKeyColumns     = []string{"id"}
	ticketHistoryGeneratedColumns      = []string{}
)

type (
	// TicketHistorySlice is an alias for a slice of pointers to TicketHistory.
	// This should almost always be used instead of []TicketHistory.
	TicketHistorySlice []*TicketHistory
	// TicketHistoryHook is the signature for custom TicketHistory hook methods
	TicketHistoryHook func(context.Context, boil.ContextExecutor, *TicketHistory) error

	ticketHistoryQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	ticketHistoryType                 = reflect.TypeOf(&TicketHistory{})
	ticketHistoryMapping              = queries.MakeStructMapping(ticketHistoryType)
	ticketHistoryPrimaryKeyMapping, _ = queries.BindMapping(ticketHistoryType, ticketHistoryMapping, ticketHistoryPrimaryKeyColumns)
	ticketHistoryInsertCacheMut       sync.RWMutex
	ticketHistoryInsertCache          = make(map[string]insertCache)
	ticketHistoryUpdateCacheMut       sync.RWMutex
	ticketHistoryUpdateCache          = make(map[string]updateCache)
	ticketHistoryUpsertCacheMut       sync.RWMutex
	ticketHistoryUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var ticketHistoryAfterSelectHooks []TicketHistoryHook

var ticketHistoryBeforeInsertHooks []TicketHistoryHook
var ticketHistoryAfterInsertHooks []TicketHistoryHook

var ticketHistoryBeforeUpdateHooks []TicketHistoryHook
var ticketHistoryAfterUpdateHooks []TicketHistoryHook

var ticketHistoryBeforeDeleteHooks []TicketHistoryHook
var ticketHistoryAfterDeleteHooks []TicketHistoryHook

var ticketHistoryBeforeUpsertHooks []TicketHistoryHook
var ticketHistoryAfterUpsertHooks []TicketHistoryHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *TicketHistory) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ticketHistoryAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *TicketHistory) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ticketHistoryBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *TicketHistory) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ticketHistoryAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *TicketHistory) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ticketHistoryBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *TicketHistory) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ticketHistoryAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *TicketHistory) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ticketHistoryBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *TicketHistory) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ticketHistoryAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *TicketHistory) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ticketHistoryBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *TicketHistory) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ticketHistoryAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTicketHistoryHook registers your hook function for all future operations.
func AddTicketHistoryHook(hookPoint boil.HookPoint, ticketHistoryHook TicketHistoryHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		ticketHistoryAfterSelectHooks = append(ticketHistoryAfterSelectHooks, ticketHistoryHook)
	case boil.BeforeInsertHook:
		ticketHistoryBeforeInsertHooks = append(ticketHistoryBeforeInsertHooks, ticketHistoryHook)
	case boil.AfterInsertHook:
		ticketHistoryAfterInsertHooks = append(ticketHistoryAfterInsertHooks, ticketHistoryHook)
	case boil.BeforeUpdateHook:
		ticketHistoryBeforeUpdateHooks = append(ticketHistoryBeforeUpdateHooks, ticketHistoryHook)
	case boil.AfterUpdateHook:
		ticketHistoryAfterUpdateHooks = append(ticketHistoryAfterUpdateHooks, ticketHistoryHook)
	case boil.BeforeDeleteHook:
		ticketHistoryBeforeDeleteHooks = append(ticketHistoryBeforeDeleteHooks, ticketHistoryHook)
	case boil.AfterDeleteHook:
		ticketHistoryAfterDeleteHooks = append(ticketHistoryAfterDeleteHooks, ticketHistoryHook)
	case boil.BeforeUpsertHook:
		ticketHistoryBeforeUpsertHooks = append(ticketHistoryBeforeUpsertHooks, ticketHistoryHook)
	case boil.AfterUpsertHook:
		ticketHistoryAfterUpsertHooks = append(ticketHistoryAfterUpsertHooks, ticketHistoryHook)
	}
}

// One returns a single ticketHistory record from the query.
func (q ticketHistoryQuery) One(ctx context.Context, exec boil.ContextExecutor) (*TicketHistory, error) {
	o := &TicketHistory{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for ticket_histories")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all TicketHistory records from the query.
func (q ticketHistoryQuery) All(ctx context.Context, exec boil.ContextExecutor) (TicketHistorySlice, error) {
	var o []*TicketHistory

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to TicketHistory slice")
	}

	if len(ticketHistoryAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all TicketHistory records in the query.
func (q ticketHistoryQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count ticket_histories rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q ticketHistoryQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if ticket_histories exists")
	}

	return count > 0, nil
}

// Hearing pointed to by the foreign key.
func (o *TicketHistory) Hearing(mods ...qm.QueryMod) hearingQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.HearingID),
	}

	queryMods = append(queryMods, mods...)

	return Hearings(queryMods...)
}

// Ticket pointed to by the foreign key.
func (o *TicketHistory) Ticket(mods ...qm.QueryMod) ticketQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.TicketID),
	}

	queryMods = append(queryMods, mods...)

	return Tickets(queryMods...)
}

// LoadHearing allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (ticketHistoryL) LoadHearing(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTicketHistory interface{}, mods queries.Applicator) error {
	var slice []*TicketHistory
	var object *TicketHistory

	if singular {
		var ok bool
		object, ok = maybeTicketHistory.(*TicketHistory)
		if !ok {
			object = new(TicketHistory)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTicketHistory)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTicketHistory))
			}
		}
	} else {
		s, ok := maybeTicketHistory.(*[]*TicketHistory)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTicketHistory)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTicketHistory))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &ticketHistoryR{}
		}
		if !queries.IsNil(object.HearingID) {
			args = append(args, object.HearingID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &ticketHistoryR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.HearingID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.HearingID) {
				args = append(args, obj.HearingID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`hearings`),
		qm.WhereIn(`hearings.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Hearing")
	}

	var resultSlice []*Hearing
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Hearing")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for hearings")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for hearings")
	}

	if len(hearingAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Hearing = foreign
		if foreign.R == nil {
			foreign.R = &hearingR{}
		}
		foreign.R.TicketHistories = append(foreign.R.TicketHistories, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.HearingID, foreign.ID) {
				local.R.Hearing = foreign
				if foreign.R == nil {
					foreign.R = &hearingR{}
				}
				foreign.R.TicketHistories = append(foreign.R.TicketHistories, local)
				break
			}
		}
	}

	return nil
}

// LoadTicket allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (ticketHistoryL) LoadTicket(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTicketHistory interface{}, mods queries.Applicator) error {
	var slice []*TicketHistory
	var object *TicketHistory

	if singular {
		var ok bool
		object, ok = maybeTicketHistory.(*TicketHistory)
		if !ok {
			object = new(TicketHistory)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTicketHistory)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTicketHistory))
			}
		}
	} else {
		s, ok := maybeTicketHistory.(*[]*TicketHistory)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTicketHistory)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTicketHistory))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &ticketHistoryR{}
		}
		if !queries.IsNil(object.TicketID) {
			args = append(args, object.TicketID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &ticketHistoryR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.TicketID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.TicketID) {
				args = append(args, obj.TicketID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`tickets`),
		qm.WhereIn(`tickets.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Ticket")
	}

	var resultSlice []*Ticket
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Ticket")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for tickets")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for tickets")
	}

	if len(ticketAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Ticket = foreign
		if foreign.R == nil {
			foreign.R = &ticketR{}
		}
		foreign.R.TicketHistories = append(foreign.R.TicketHistories, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.TicketID, foreign.ID) {
				local.R.Ticket = foreign
				if foreign.R == nil {
					foreign.R = &ticketR{}
				}
				foreign.R.TicketHistories = append(foreign.R.TicketHistories, local)
				break
			}
		}
	}

	return nil
}

// SetHearing of the ticketHistory to the related item.
// Sets o.R.Hearing to related.
// Adds o to related.R.TicketHistories.
func (o *TicketHistory) SetHearing(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Hearing) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"ticket_histories\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"hearing_id"}),
		strmangle.WhereClause("\"", "\"", 2, ticketHistoryPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.HearingID, related.ID)
	if o.R == nil {
		o.R = &ticketHistoryR{
			Hearing: related,
		}
	} else {
		o.R.Hearing = related
	}

	if related.R == nil {
		related.R = &hearingR{
			TicketHistories: TicketHistorySlice{o},
		}
	} else {
		related.R.TicketHistories = append(related.R.TicketHistories, o)
	}

	return nil
}

// SetTicket of the ticketHistory to the related item.
// Sets o.R.Ticket to related.
// Adds o to related.R.TicketHistories.
func (o *TicketHistory) SetTicket(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Ticket) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"ticket_histories\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"ticket_id"}),
		strmangle.WhereClause("\"", "\"", 2, ticketHistoryPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.TicketID, related.ID)
	if o.R == nil {
		o.R = &ticketHistoryR{
			Ticket: related,
		}
	} else {
		o.R.Ticket = related
	}

	if related.R == nil {
		related.R = &ticketR{
			TicketHistories: TicketHistorySlice{o},
		}
	} else {
		related.R.TicketHistories = append(related.R.TicketHistories, o)
	}

	return nil
}

// TicketHistories retrieves all the records using an executor.
func TicketHistories(mods ...qm.QueryMod) ticketHistoryQuery {
	mods = append(mods, qm.From("\"ticket_histories\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"ticket_histories\".*"})
	}

	return ticketHistoryQuery{q}
}

// FindTicketHistory retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTicketHistory(ctx context.Context, exec boil.ContextExecutor, iD []byte, selectCols ...string) (*TicketHistory, error) {
	ticketHistoryObj := &TicketHistory{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"ticket_histories\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, ticketHistoryObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from ticket_histories")
	}

	if err = ticketHistoryObj.doAfterSelectHooks(ctx, exec); err != nil {
		return ticketHistoryObj, err
	}

	return ticketHistoryObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *TicketHistory) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no ticket_histories provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(ticketHistoryColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	ticketHistoryInsertCacheMut.RLock()
	cache, cached := ticketHistoryInsertCache[key]
	ticketHistoryInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			ticketHistoryAllColumns,
			ticketHistoryColumnsWithDefault,
			ticketHistoryColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(ticketHistoryType, ticketHistoryMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(ticketHistoryType, ticketHistoryMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"ticket_histories\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"ticket_histories\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into ticket_histories")
	}

	if !cached {
		ticketHistoryInsertCacheMut.Lock()
		ticketHistoryInsertCache[key] = cache
		ticketHistoryInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the TicketHistory.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *TicketHistory) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	ticketHistoryUpdateCacheMut.RLock()
	cache, cached := ticketHistoryUpdateCache[key]
	ticketHistoryUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			ticketHistoryAllColumns,
			ticketHistoryPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update ticket_histories, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"ticket_histories\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, ticketHistoryPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(ticketHistoryType, ticketHistoryMapping, append(wl, ticketHistoryPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update ticket_histories row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for ticket_histories")
	}

	if !cached {
		ticketHistoryUpdateCacheMut.Lock()
		ticketHistoryUpdateCache[key] = cache
		ticketHistoryUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q ticketHistoryQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for ticket_histories")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for ticket_histories")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TicketHistorySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), ticketHistoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"ticket_histories\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, ticketHistoryPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in ticketHistory slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all ticketHistory")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *TicketHistory) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no ticket_histories provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(ticketHistoryColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	ticketHistoryUpsertCacheMut.RLock()
	cache, cached := ticketHistoryUpsertCache[key]
	ticketHistoryUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			ticketHistoryAllColumns,
			ticketHistoryColumnsWithDefault,
			ticketHistoryColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			ticketHistoryAllColumns,
			ticketHistoryPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert ticket_histories, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(ticketHistoryPrimaryKeyColumns))
			copy(conflict, ticketHistoryPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"ticket_histories\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(ticketHistoryType, ticketHistoryMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(ticketHistoryType, ticketHistoryMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert ticket_histories")
	}

	if !cached {
		ticketHistoryUpsertCacheMut.Lock()
		ticketHistoryUpsertCache[key] = cache
		ticketHistoryUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single TicketHistory record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *TicketHistory) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no TicketHistory provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), ticketHistoryPrimaryKeyMapping)
	sql := "DELETE FROM \"ticket_histories\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from ticket_histories")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for ticket_histories")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q ticketHistoryQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no ticketHistoryQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from ticket_histories")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for ticket_histories")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TicketHistorySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(ticketHistoryBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), ticketHistoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"ticket_histories\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, ticketHistoryPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from ticketHistory slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for ticket_histories")
	}

	if len(ticketHistoryAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *TicketHistory) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindTicketHistory(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TicketHistorySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TicketHistorySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), ticketHistoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"ticket_histories\".* FROM \"ticket_histories\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, ticketHistoryPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in TicketHistorySlice")
	}

	*o = slice

	return nil
}

// TicketHistoryExists checks if the TicketHistory row exists.
func TicketHistoryExists(ctx context.Context, exec boil.ContextExecutor, iD []byte) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"ticket_histories\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if ticket_histories exists")
	}

	return exists, nil
}

// Exists checks if the TicketHistory row exists.
func (o *TicketHistory) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return TicketHistoryExists(ctx, exec, o.ID)
}
