// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// PaymentHistory is an object representing the database table.
type PaymentHistory struct { // 決済履歴ID
	ID []byte `boil:"id" json:"id" toml:"id" yaml:"id"`
	// ヒアリングプロジェクトID
	HearingProjectID []byte `boil:"hearing_project_id" json:"hearing_project_id" toml:"hearing_project_id" yaml:"hearing_project_id"`
	// 決済担当者ID
	PaymentUserID []byte `boil:"payment_user_id" json:"payment_user_id" toml:"payment_user_id" yaml:"payment_user_id"`
	// 決済タイプ（定期/都度）
	PaymentType string `boil:"payment_type" json:"payment_type" toml:"payment_type" yaml:"payment_type"`
	// 決済価格
	Amount int `boil:"amount" json:"amount" toml:"amount" yaml:"amount"`
	// stripe payment intent ID
	StripePiID string `boil:"stripe_pi_id" json:"stripe_pi_id" toml:"stripe_pi_id" yaml:"stripe_pi_id"`
	// 決済日
	PaymentDate time.Time `boil:"payment_date" json:"payment_date" toml:"payment_date" yaml:"payment_date"`
	// データ作成日
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	// データ更新日
	UpdatedAt time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *paymentHistoryR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L paymentHistoryL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PaymentHistoryColumns = struct {
	ID               string
	HearingProjectID string
	PaymentUserID    string
	PaymentType      string
	Amount           string
	StripePiID       string
	PaymentDate      string
	CreatedAt        string
	UpdatedAt        string
}{
	ID:               "id",
	HearingProjectID: "hearing_project_id",
	PaymentUserID:    "payment_user_id",
	PaymentType:      "payment_type",
	Amount:           "amount",
	StripePiID:       "stripe_pi_id",
	PaymentDate:      "payment_date",
	CreatedAt:        "created_at",
	UpdatedAt:        "updated_at",
}

var PaymentHistoryTableColumns = struct {
	ID               string
	HearingProjectID string
	PaymentUserID    string
	PaymentType      string
	Amount           string
	StripePiID       string
	PaymentDate      string
	CreatedAt        string
	UpdatedAt        string
}{
	ID:               "payment_histories.id",
	HearingProjectID: "payment_histories.hearing_project_id",
	PaymentUserID:    "payment_histories.payment_user_id",
	PaymentType:      "payment_histories.payment_type",
	Amount:           "payment_histories.amount",
	StripePiID:       "payment_histories.stripe_pi_id",
	PaymentDate:      "payment_histories.payment_date",
	CreatedAt:        "payment_histories.created_at",
	UpdatedAt:        "payment_histories.updated_at",
}

// Generated where

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var PaymentHistoryWhere = struct {
	ID               whereHelper__byte
	HearingProjectID whereHelper__byte
	PaymentUserID    whereHelper__byte
	PaymentType      whereHelperstring
	Amount           whereHelperint
	StripePiID       whereHelperstring
	PaymentDate      whereHelpertime_Time
	CreatedAt        whereHelpertime_Time
	UpdatedAt        whereHelpertime_Time
}{
	ID:               whereHelper__byte{field: "\"payment_histories\".\"id\""},
	HearingProjectID: whereHelper__byte{field: "\"payment_histories\".\"hearing_project_id\""},
	PaymentUserID:    whereHelper__byte{field: "\"payment_histories\".\"payment_user_id\""},
	PaymentType:      whereHelperstring{field: "\"payment_histories\".\"payment_type\""},
	Amount:           whereHelperint{field: "\"payment_histories\".\"amount\""},
	StripePiID:       whereHelperstring{field: "\"payment_histories\".\"stripe_pi_id\""},
	PaymentDate:      whereHelpertime_Time{field: "\"payment_histories\".\"payment_date\""},
	CreatedAt:        whereHelpertime_Time{field: "\"payment_histories\".\"created_at\""},
	UpdatedAt:        whereHelpertime_Time{field: "\"payment_histories\".\"updated_at\""},
}

// PaymentHistoryRels is where relationship names are stored.
var PaymentHistoryRels = struct {
	HearingProject string
	PaymentUser    string
	Tickets        string
}{
	HearingProject: "HearingProject",
	PaymentUser:    "PaymentUser",
	Tickets:        "Tickets",
}

// paymentHistoryR is where relationships are stored.
type paymentHistoryR struct {
	HearingProject *HearingProject `boil:"HearingProject" json:"HearingProject" toml:"HearingProject" yaml:"HearingProject"`
	PaymentUser    *PaymentUser    `boil:"PaymentUser" json:"PaymentUser" toml:"PaymentUser" yaml:"PaymentUser"`
	Tickets        TicketSlice     `boil:"Tickets" json:"Tickets" toml:"Tickets" yaml:"Tickets"`
}

// NewStruct creates a new relationship struct
func (*paymentHistoryR) NewStruct() *paymentHistoryR {
	return &paymentHistoryR{}
}

func (r *paymentHistoryR) GetHearingProject() *HearingProject {
	if r == nil {
		return nil
	}
	return r.HearingProject
}

func (r *paymentHistoryR) GetPaymentUser() *PaymentUser {
	if r == nil {
		return nil
	}
	return r.PaymentUser
}

func (r *paymentHistoryR) GetTickets() TicketSlice {
	if r == nil {
		return nil
	}
	return r.Tickets
}

// paymentHistoryL is where Load methods for each relationship are stored.
type paymentHistoryL struct{}

var (
	paymentHistoryAllColumns            = []string{"id", "hearing_project_id", "payment_user_id", "payment_type", "amount", "stripe_pi_id", "payment_date", "created_at", "updated_at"}
	paymentHistoryColumnsWithoutDefault = []string{"hearing_project_id", "payment_user_id", "payment_type", "amount", "stripe_pi_id", "payment_date"}
	paymentHistoryColumnsWithDefault    = []string{"id", "created_at", "updated_at"}
	paymentHistoryPrimaryKeyColumns     = []string{"id"}
	paymentHistoryGeneratedColumns      = []string{}
)

type (
	// PaymentHistorySlice is an alias for a slice of pointers to PaymentHistory.
	// This should almost always be used instead of []PaymentHistory.
	PaymentHistorySlice []*PaymentHistory
	// PaymentHistoryHook is the signature for custom PaymentHistory hook methods
	PaymentHistoryHook func(context.Context, boil.ContextExecutor, *PaymentHistory) error

	paymentHistoryQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	paymentHistoryType                 = reflect.TypeOf(&PaymentHistory{})
	paymentHistoryMapping              = queries.MakeStructMapping(paymentHistoryType)
	paymentHistoryPrimaryKeyMapping, _ = queries.BindMapping(paymentHistoryType, paymentHistoryMapping, paymentHistoryPrimaryKeyColumns)
	paymentHistoryInsertCacheMut       sync.RWMutex
	paymentHistoryInsertCache          = make(map[string]insertCache)
	paymentHistoryUpdateCacheMut       sync.RWMutex
	paymentHistoryUpdateCache          = make(map[string]updateCache)
	paymentHistoryUpsertCacheMut       sync.RWMutex
	paymentHistoryUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var paymentHistoryAfterSelectHooks []PaymentHistoryHook

var paymentHistoryBeforeInsertHooks []PaymentHistoryHook
var paymentHistoryAfterInsertHooks []PaymentHistoryHook

var paymentHistoryBeforeUpdateHooks []PaymentHistoryHook
var paymentHistoryAfterUpdateHooks []PaymentHistoryHook

var paymentHistoryBeforeDeleteHooks []PaymentHistoryHook
var paymentHistoryAfterDeleteHooks []PaymentHistoryHook

var paymentHistoryBeforeUpsertHooks []PaymentHistoryHook
var paymentHistoryAfterUpsertHooks []PaymentHistoryHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *PaymentHistory) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range paymentHistoryAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *PaymentHistory) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range paymentHistoryBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *PaymentHistory) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range paymentHistoryAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *PaymentHistory) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range paymentHistoryBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *PaymentHistory) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range paymentHistoryAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *PaymentHistory) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range paymentHistoryBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *PaymentHistory) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range paymentHistoryAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *PaymentHistory) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range paymentHistoryBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *PaymentHistory) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range paymentHistoryAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPaymentHistoryHook registers your hook function for all future operations.
func AddPaymentHistoryHook(hookPoint boil.HookPoint, paymentHistoryHook PaymentHistoryHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		paymentHistoryAfterSelectHooks = append(paymentHistoryAfterSelectHooks, paymentHistoryHook)
	case boil.BeforeInsertHook:
		paymentHistoryBeforeInsertHooks = append(paymentHistoryBeforeInsertHooks, paymentHistoryHook)
	case boil.AfterInsertHook:
		paymentHistoryAfterInsertHooks = append(paymentHistoryAfterInsertHooks, paymentHistoryHook)
	case boil.BeforeUpdateHook:
		paymentHistoryBeforeUpdateHooks = append(paymentHistoryBeforeUpdateHooks, paymentHistoryHook)
	case boil.AfterUpdateHook:
		paymentHistoryAfterUpdateHooks = append(paymentHistoryAfterUpdateHooks, paymentHistoryHook)
	case boil.BeforeDeleteHook:
		paymentHistoryBeforeDeleteHooks = append(paymentHistoryBeforeDeleteHooks, paymentHistoryHook)
	case boil.AfterDeleteHook:
		paymentHistoryAfterDeleteHooks = append(paymentHistoryAfterDeleteHooks, paymentHistoryHook)
	case boil.BeforeUpsertHook:
		paymentHistoryBeforeUpsertHooks = append(paymentHistoryBeforeUpsertHooks, paymentHistoryHook)
	case boil.AfterUpsertHook:
		paymentHistoryAfterUpsertHooks = append(paymentHistoryAfterUpsertHooks, paymentHistoryHook)
	}
}

// One returns a single paymentHistory record from the query.
func (q paymentHistoryQuery) One(ctx context.Context, exec boil.ContextExecutor) (*PaymentHistory, error) {
	o := &PaymentHistory{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for payment_histories")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all PaymentHistory records from the query.
func (q paymentHistoryQuery) All(ctx context.Context, exec boil.ContextExecutor) (PaymentHistorySlice, error) {
	var o []*PaymentHistory

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to PaymentHistory slice")
	}

	if len(paymentHistoryAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all PaymentHistory records in the query.
func (q paymentHistoryQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count payment_histories rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q paymentHistoryQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if payment_histories exists")
	}

	return count > 0, nil
}

// HearingProject pointed to by the foreign key.
func (o *PaymentHistory) HearingProject(mods ...qm.QueryMod) hearingProjectQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.HearingProjectID),
	}

	queryMods = append(queryMods, mods...)

	return HearingProjects(queryMods...)
}

// PaymentUser pointed to by the foreign key.
func (o *PaymentHistory) PaymentUser(mods ...qm.QueryMod) paymentUserQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.PaymentUserID),
	}

	queryMods = append(queryMods, mods...)

	return PaymentUsers(queryMods...)
}

// Tickets retrieves all the ticket's Tickets with an executor.
func (o *PaymentHistory) Tickets(mods ...qm.QueryMod) ticketQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"tickets\".\"payment_history_id\"=?", o.ID),
	)

	return Tickets(queryMods...)
}

// LoadHearingProject allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (paymentHistoryL) LoadHearingProject(ctx context.Context, e boil.ContextExecutor, singular bool, maybePaymentHistory interface{}, mods queries.Applicator) error {
	var slice []*PaymentHistory
	var object *PaymentHistory

	if singular {
		var ok bool
		object, ok = maybePaymentHistory.(*PaymentHistory)
		if !ok {
			object = new(PaymentHistory)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePaymentHistory)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePaymentHistory))
			}
		}
	} else {
		s, ok := maybePaymentHistory.(*[]*PaymentHistory)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePaymentHistory)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePaymentHistory))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &paymentHistoryR{}
		}
		if !queries.IsNil(object.HearingProjectID) {
			args = append(args, object.HearingProjectID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &paymentHistoryR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.HearingProjectID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.HearingProjectID) {
				args = append(args, obj.HearingProjectID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`hearing_projects`),
		qm.WhereIn(`hearing_projects.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load HearingProject")
	}

	var resultSlice []*HearingProject
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice HearingProject")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for hearing_projects")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for hearing_projects")
	}

	if len(hearingProjectAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.HearingProject = foreign
		if foreign.R == nil {
			foreign.R = &hearingProjectR{}
		}
		foreign.R.PaymentHistories = append(foreign.R.PaymentHistories, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.HearingProjectID, foreign.ID) {
				local.R.HearingProject = foreign
				if foreign.R == nil {
					foreign.R = &hearingProjectR{}
				}
				foreign.R.PaymentHistories = append(foreign.R.PaymentHistories, local)
				break
			}
		}
	}

	return nil
}

// LoadPaymentUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (paymentHistoryL) LoadPaymentUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybePaymentHistory interface{}, mods queries.Applicator) error {
	var slice []*PaymentHistory
	var object *PaymentHistory

	if singular {
		var ok bool
		object, ok = maybePaymentHistory.(*PaymentHistory)
		if !ok {
			object = new(PaymentHistory)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePaymentHistory)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePaymentHistory))
			}
		}
	} else {
		s, ok := maybePaymentHistory.(*[]*PaymentHistory)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePaymentHistory)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePaymentHistory))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &paymentHistoryR{}
		}
		if !queries.IsNil(object.PaymentUserID) {
			args = append(args, object.PaymentUserID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &paymentHistoryR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.PaymentUserID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.PaymentUserID) {
				args = append(args, obj.PaymentUserID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`payment_users`),
		qm.WhereIn(`payment_users.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load PaymentUser")
	}

	var resultSlice []*PaymentUser
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice PaymentUser")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for payment_users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for payment_users")
	}

	if len(paymentUserAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.PaymentUser = foreign
		if foreign.R == nil {
			foreign.R = &paymentUserR{}
		}
		foreign.R.PaymentHistories = append(foreign.R.PaymentHistories, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.PaymentUserID, foreign.ID) {
				local.R.PaymentUser = foreign
				if foreign.R == nil {
					foreign.R = &paymentUserR{}
				}
				foreign.R.PaymentHistories = append(foreign.R.PaymentHistories, local)
				break
			}
		}
	}

	return nil
}

// LoadTickets allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (paymentHistoryL) LoadTickets(ctx context.Context, e boil.ContextExecutor, singular bool, maybePaymentHistory interface{}, mods queries.Applicator) error {
	var slice []*PaymentHistory
	var object *PaymentHistory

	if singular {
		var ok bool
		object, ok = maybePaymentHistory.(*PaymentHistory)
		if !ok {
			object = new(PaymentHistory)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePaymentHistory)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePaymentHistory))
			}
		}
	} else {
		s, ok := maybePaymentHistory.(*[]*PaymentHistory)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePaymentHistory)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePaymentHistory))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &paymentHistoryR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &paymentHistoryR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`tickets`),
		qm.WhereIn(`tickets.payment_history_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load tickets")
	}

	var resultSlice []*Ticket
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice tickets")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on tickets")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for tickets")
	}

	if len(ticketAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Tickets = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &ticketR{}
			}
			foreign.R.PaymentHistory = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.PaymentHistoryID) {
				local.R.Tickets = append(local.R.Tickets, foreign)
				if foreign.R == nil {
					foreign.R = &ticketR{}
				}
				foreign.R.PaymentHistory = local
				break
			}
		}
	}

	return nil
}

// SetHearingProject of the paymentHistory to the related item.
// Sets o.R.HearingProject to related.
// Adds o to related.R.PaymentHistories.
func (o *PaymentHistory) SetHearingProject(ctx context.Context, exec boil.ContextExecutor, insert bool, related *HearingProject) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"payment_histories\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"hearing_project_id"}),
		strmangle.WhereClause("\"", "\"", 2, paymentHistoryPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.HearingProjectID, related.ID)
	if o.R == nil {
		o.R = &paymentHistoryR{
			HearingProject: related,
		}
	} else {
		o.R.HearingProject = related
	}

	if related.R == nil {
		related.R = &hearingProjectR{
			PaymentHistories: PaymentHistorySlice{o},
		}
	} else {
		related.R.PaymentHistories = append(related.R.PaymentHistories, o)
	}

	return nil
}

// SetPaymentUser of the paymentHistory to the related item.
// Sets o.R.PaymentUser to related.
// Adds o to related.R.PaymentHistories.
func (o *PaymentHistory) SetPaymentUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *PaymentUser) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"payment_histories\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"payment_user_id"}),
		strmangle.WhereClause("\"", "\"", 2, paymentHistoryPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.PaymentUserID, related.ID)
	if o.R == nil {
		o.R = &paymentHistoryR{
			PaymentUser: related,
		}
	} else {
		o.R.PaymentUser = related
	}

	if related.R == nil {
		related.R = &paymentUserR{
			PaymentHistories: PaymentHistorySlice{o},
		}
	} else {
		related.R.PaymentHistories = append(related.R.PaymentHistories, o)
	}

	return nil
}

// AddTickets adds the given related objects to the existing relationships
// of the payment_history, optionally inserting them as new records.
// Appends related to o.R.Tickets.
// Sets related.R.PaymentHistory appropriately.
func (o *PaymentHistory) AddTickets(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Ticket) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.PaymentHistoryID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"tickets\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"payment_history_id"}),
				strmangle.WhereClause("\"", "\"", 2, ticketPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.PaymentHistoryID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &paymentHistoryR{
			Tickets: related,
		}
	} else {
		o.R.Tickets = append(o.R.Tickets, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &ticketR{
				PaymentHistory: o,
			}
		} else {
			rel.R.PaymentHistory = o
		}
	}
	return nil
}

// PaymentHistories retrieves all the records using an executor.
func PaymentHistories(mods ...qm.QueryMod) paymentHistoryQuery {
	mods = append(mods, qm.From("\"payment_histories\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"payment_histories\".*"})
	}

	return paymentHistoryQuery{q}
}

// FindPaymentHistory retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPaymentHistory(ctx context.Context, exec boil.ContextExecutor, iD []byte, selectCols ...string) (*PaymentHistory, error) {
	paymentHistoryObj := &PaymentHistory{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"payment_histories\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, paymentHistoryObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from payment_histories")
	}

	if err = paymentHistoryObj.doAfterSelectHooks(ctx, exec); err != nil {
		return paymentHistoryObj, err
	}

	return paymentHistoryObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *PaymentHistory) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no payment_histories provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(paymentHistoryColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	paymentHistoryInsertCacheMut.RLock()
	cache, cached := paymentHistoryInsertCache[key]
	paymentHistoryInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			paymentHistoryAllColumns,
			paymentHistoryColumnsWithDefault,
			paymentHistoryColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(paymentHistoryType, paymentHistoryMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(paymentHistoryType, paymentHistoryMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"payment_histories\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"payment_histories\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into payment_histories")
	}

	if !cached {
		paymentHistoryInsertCacheMut.Lock()
		paymentHistoryInsertCache[key] = cache
		paymentHistoryInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the PaymentHistory.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *PaymentHistory) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	paymentHistoryUpdateCacheMut.RLock()
	cache, cached := paymentHistoryUpdateCache[key]
	paymentHistoryUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			paymentHistoryAllColumns,
			paymentHistoryPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update payment_histories, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"payment_histories\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, paymentHistoryPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(paymentHistoryType, paymentHistoryMapping, append(wl, paymentHistoryPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update payment_histories row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for payment_histories")
	}

	if !cached {
		paymentHistoryUpdateCacheMut.Lock()
		paymentHistoryUpdateCache[key] = cache
		paymentHistoryUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q paymentHistoryQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for payment_histories")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for payment_histories")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PaymentHistorySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), paymentHistoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"payment_histories\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, paymentHistoryPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in paymentHistory slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all paymentHistory")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *PaymentHistory) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no payment_histories provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(paymentHistoryColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	paymentHistoryUpsertCacheMut.RLock()
	cache, cached := paymentHistoryUpsertCache[key]
	paymentHistoryUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			paymentHistoryAllColumns,
			paymentHistoryColumnsWithDefault,
			paymentHistoryColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			paymentHistoryAllColumns,
			paymentHistoryPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert payment_histories, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(paymentHistoryPrimaryKeyColumns))
			copy(conflict, paymentHistoryPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"payment_histories\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(paymentHistoryType, paymentHistoryMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(paymentHistoryType, paymentHistoryMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert payment_histories")
	}

	if !cached {
		paymentHistoryUpsertCacheMut.Lock()
		paymentHistoryUpsertCache[key] = cache
		paymentHistoryUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single PaymentHistory record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *PaymentHistory) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no PaymentHistory provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), paymentHistoryPrimaryKeyMapping)
	sql := "DELETE FROM \"payment_histories\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from payment_histories")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for payment_histories")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q paymentHistoryQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no paymentHistoryQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from payment_histories")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for payment_histories")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PaymentHistorySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(paymentHistoryBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), paymentHistoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"payment_histories\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, paymentHistoryPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from paymentHistory slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for payment_histories")
	}

	if len(paymentHistoryAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *PaymentHistory) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPaymentHistory(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PaymentHistorySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PaymentHistorySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), paymentHistoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"payment_histories\".* FROM \"payment_histories\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, paymentHistoryPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in PaymentHistorySlice")
	}

	*o = slice

	return nil
}

// PaymentHistoryExists checks if the PaymentHistory row exists.
func PaymentHistoryExists(ctx context.Context, exec boil.ContextExecutor, iD []byte) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"payment_histories\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if payment_histories exists")
	}

	return exists, nil
}

// Exists checks if the PaymentHistory row exists.
func (o *PaymentHistory) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return PaymentHistoryExists(ctx, exec, o.ID)
}
