// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SolutionMaster is an object representing the database table.
type SolutionMaster struct { // ソリューションマスタID
	ID []byte `boil:"id" json:"id" toml:"id" yaml:"id"`
	// ソリューション名
	Solution string `boil:"solution" json:"solution" toml:"solution" yaml:"solution"`
	// 業界マスタID
	IndustryMasterID []byte `boil:"industry_master_id" json:"industry_master_id" toml:"industry_master_id" yaml:"industry_master_id"`
	// 業務種類マスタID
	BusinessCategoryMasterID []byte `boil:"business_category_master_id" json:"business_category_master_id" toml:"business_category_master_id" yaml:"business_category_master_id"`
	// データ作成日
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	// データ更新日
	UpdatedAt time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *solutionMasterR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L solutionMasterL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SolutionMasterColumns = struct {
	ID                       string
	Solution                 string
	IndustryMasterID         string
	BusinessCategoryMasterID string
	CreatedAt                string
	UpdatedAt                string
}{
	ID:                       "id",
	Solution:                 "solution",
	IndustryMasterID:         "industry_master_id",
	BusinessCategoryMasterID: "business_category_master_id",
	CreatedAt:                "created_at",
	UpdatedAt:                "updated_at",
}

var SolutionMasterTableColumns = struct {
	ID                       string
	Solution                 string
	IndustryMasterID         string
	BusinessCategoryMasterID string
	CreatedAt                string
	UpdatedAt                string
}{
	ID:                       "solution_masters.id",
	Solution:                 "solution_masters.solution",
	IndustryMasterID:         "solution_masters.industry_master_id",
	BusinessCategoryMasterID: "solution_masters.business_category_master_id",
	CreatedAt:                "solution_masters.created_at",
	UpdatedAt:                "solution_masters.updated_at",
}

// Generated where

var SolutionMasterWhere = struct {
	ID                       whereHelper__byte
	Solution                 whereHelperstring
	IndustryMasterID         whereHelper__byte
	BusinessCategoryMasterID whereHelper__byte
	CreatedAt                whereHelpertime_Time
	UpdatedAt                whereHelpertime_Time
}{
	ID:                       whereHelper__byte{field: "\"solution_masters\".\"id\""},
	Solution:                 whereHelperstring{field: "\"solution_masters\".\"solution\""},
	IndustryMasterID:         whereHelper__byte{field: "\"solution_masters\".\"industry_master_id\""},
	BusinessCategoryMasterID: whereHelper__byte{field: "\"solution_masters\".\"business_category_master_id\""},
	CreatedAt:                whereHelpertime_Time{field: "\"solution_masters\".\"created_at\""},
	UpdatedAt:                whereHelpertime_Time{field: "\"solution_masters\".\"updated_at\""},
}

// SolutionMasterRels is where relationship names are stored.
var SolutionMasterRels = struct {
	BusinessCategoryMaster string
	IndustryMaster         string
	SolutionProducts       string
}{
	BusinessCategoryMaster: "BusinessCategoryMaster",
	IndustryMaster:         "IndustryMaster",
	SolutionProducts:       "SolutionProducts",
}

// solutionMasterR is where relationships are stored.
type solutionMasterR struct {
	BusinessCategoryMaster *BusinessCategoryMaster `boil:"BusinessCategoryMaster" json:"BusinessCategoryMaster" toml:"BusinessCategoryMaster" yaml:"BusinessCategoryMaster"`
	IndustryMaster         *IndustryMaster         `boil:"IndustryMaster" json:"IndustryMaster" toml:"IndustryMaster" yaml:"IndustryMaster"`
	SolutionProducts       SolutionProductSlice    `boil:"SolutionProducts" json:"SolutionProducts" toml:"SolutionProducts" yaml:"SolutionProducts"`
}

// NewStruct creates a new relationship struct
func (*solutionMasterR) NewStruct() *solutionMasterR {
	return &solutionMasterR{}
}

func (r *solutionMasterR) GetBusinessCategoryMaster() *BusinessCategoryMaster {
	if r == nil {
		return nil
	}
	return r.BusinessCategoryMaster
}

func (r *solutionMasterR) GetIndustryMaster() *IndustryMaster {
	if r == nil {
		return nil
	}
	return r.IndustryMaster
}

func (r *solutionMasterR) GetSolutionProducts() SolutionProductSlice {
	if r == nil {
		return nil
	}
	return r.SolutionProducts
}

// solutionMasterL is where Load methods for each relationship are stored.
type solutionMasterL struct{}

var (
	solutionMasterAllColumns            = []string{"id", "solution", "industry_master_id", "business_category_master_id", "created_at", "updated_at"}
	solutionMasterColumnsWithoutDefault = []string{"solution", "industry_master_id", "business_category_master_id"}
	solutionMasterColumnsWithDefault    = []string{"id", "created_at", "updated_at"}
	solutionMasterPrimaryKeyColumns     = []string{"id"}
	solutionMasterGeneratedColumns      = []string{}
)

type (
	// SolutionMasterSlice is an alias for a slice of pointers to SolutionMaster.
	// This should almost always be used instead of []SolutionMaster.
	SolutionMasterSlice []*SolutionMaster
	// SolutionMasterHook is the signature for custom SolutionMaster hook methods
	SolutionMasterHook func(context.Context, boil.ContextExecutor, *SolutionMaster) error

	solutionMasterQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	solutionMasterType                 = reflect.TypeOf(&SolutionMaster{})
	solutionMasterMapping              = queries.MakeStructMapping(solutionMasterType)
	solutionMasterPrimaryKeyMapping, _ = queries.BindMapping(solutionMasterType, solutionMasterMapping, solutionMasterPrimaryKeyColumns)
	solutionMasterInsertCacheMut       sync.RWMutex
	solutionMasterInsertCache          = make(map[string]insertCache)
	solutionMasterUpdateCacheMut       sync.RWMutex
	solutionMasterUpdateCache          = make(map[string]updateCache)
	solutionMasterUpsertCacheMut       sync.RWMutex
	solutionMasterUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var solutionMasterAfterSelectHooks []SolutionMasterHook

var solutionMasterBeforeInsertHooks []SolutionMasterHook
var solutionMasterAfterInsertHooks []SolutionMasterHook

var solutionMasterBeforeUpdateHooks []SolutionMasterHook
var solutionMasterAfterUpdateHooks []SolutionMasterHook

var solutionMasterBeforeDeleteHooks []SolutionMasterHook
var solutionMasterAfterDeleteHooks []SolutionMasterHook

var solutionMasterBeforeUpsertHooks []SolutionMasterHook
var solutionMasterAfterUpsertHooks []SolutionMasterHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SolutionMaster) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range solutionMasterAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SolutionMaster) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range solutionMasterBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SolutionMaster) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range solutionMasterAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SolutionMaster) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range solutionMasterBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SolutionMaster) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range solutionMasterAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SolutionMaster) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range solutionMasterBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SolutionMaster) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range solutionMasterAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SolutionMaster) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range solutionMasterBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SolutionMaster) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range solutionMasterAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSolutionMasterHook registers your hook function for all future operations.
func AddSolutionMasterHook(hookPoint boil.HookPoint, solutionMasterHook SolutionMasterHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		solutionMasterAfterSelectHooks = append(solutionMasterAfterSelectHooks, solutionMasterHook)
	case boil.BeforeInsertHook:
		solutionMasterBeforeInsertHooks = append(solutionMasterBeforeInsertHooks, solutionMasterHook)
	case boil.AfterInsertHook:
		solutionMasterAfterInsertHooks = append(solutionMasterAfterInsertHooks, solutionMasterHook)
	case boil.BeforeUpdateHook:
		solutionMasterBeforeUpdateHooks = append(solutionMasterBeforeUpdateHooks, solutionMasterHook)
	case boil.AfterUpdateHook:
		solutionMasterAfterUpdateHooks = append(solutionMasterAfterUpdateHooks, solutionMasterHook)
	case boil.BeforeDeleteHook:
		solutionMasterBeforeDeleteHooks = append(solutionMasterBeforeDeleteHooks, solutionMasterHook)
	case boil.AfterDeleteHook:
		solutionMasterAfterDeleteHooks = append(solutionMasterAfterDeleteHooks, solutionMasterHook)
	case boil.BeforeUpsertHook:
		solutionMasterBeforeUpsertHooks = append(solutionMasterBeforeUpsertHooks, solutionMasterHook)
	case boil.AfterUpsertHook:
		solutionMasterAfterUpsertHooks = append(solutionMasterAfterUpsertHooks, solutionMasterHook)
	}
}

// One returns a single solutionMaster record from the query.
func (q solutionMasterQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SolutionMaster, error) {
	o := &SolutionMaster{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for solution_masters")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SolutionMaster records from the query.
func (q solutionMasterQuery) All(ctx context.Context, exec boil.ContextExecutor) (SolutionMasterSlice, error) {
	var o []*SolutionMaster

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to SolutionMaster slice")
	}

	if len(solutionMasterAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SolutionMaster records in the query.
func (q solutionMasterQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count solution_masters rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q solutionMasterQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if solution_masters exists")
	}

	return count > 0, nil
}

// BusinessCategoryMaster pointed to by the foreign key.
func (o *SolutionMaster) BusinessCategoryMaster(mods ...qm.QueryMod) businessCategoryMasterQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.BusinessCategoryMasterID),
	}

	queryMods = append(queryMods, mods...)

	return BusinessCategoryMasters(queryMods...)
}

// IndustryMaster pointed to by the foreign key.
func (o *SolutionMaster) IndustryMaster(mods ...qm.QueryMod) industryMasterQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.IndustryMasterID),
	}

	queryMods = append(queryMods, mods...)

	return IndustryMasters(queryMods...)
}

// SolutionProducts retrieves all the solution_product's SolutionProducts with an executor.
func (o *SolutionMaster) SolutionProducts(mods ...qm.QueryMod) solutionProductQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"solution_products\".\"solution_master_id\"=?", o.ID),
	)

	return SolutionProducts(queryMods...)
}

// LoadBusinessCategoryMaster allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (solutionMasterL) LoadBusinessCategoryMaster(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSolutionMaster interface{}, mods queries.Applicator) error {
	var slice []*SolutionMaster
	var object *SolutionMaster

	if singular {
		var ok bool
		object, ok = maybeSolutionMaster.(*SolutionMaster)
		if !ok {
			object = new(SolutionMaster)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeSolutionMaster)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeSolutionMaster))
			}
		}
	} else {
		s, ok := maybeSolutionMaster.(*[]*SolutionMaster)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeSolutionMaster)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeSolutionMaster))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &solutionMasterR{}
		}
		if !queries.IsNil(object.BusinessCategoryMasterID) {
			args = append(args, object.BusinessCategoryMasterID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &solutionMasterR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.BusinessCategoryMasterID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.BusinessCategoryMasterID) {
				args = append(args, obj.BusinessCategoryMasterID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`business_category_masters`),
		qm.WhereIn(`business_category_masters.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load BusinessCategoryMaster")
	}

	var resultSlice []*BusinessCategoryMaster
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice BusinessCategoryMaster")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for business_category_masters")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for business_category_masters")
	}

	if len(businessCategoryMasterAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BusinessCategoryMaster = foreign
		if foreign.R == nil {
			foreign.R = &businessCategoryMasterR{}
		}
		foreign.R.SolutionMasters = append(foreign.R.SolutionMasters, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.BusinessCategoryMasterID, foreign.ID) {
				local.R.BusinessCategoryMaster = foreign
				if foreign.R == nil {
					foreign.R = &businessCategoryMasterR{}
				}
				foreign.R.SolutionMasters = append(foreign.R.SolutionMasters, local)
				break
			}
		}
	}

	return nil
}

// LoadIndustryMaster allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (solutionMasterL) LoadIndustryMaster(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSolutionMaster interface{}, mods queries.Applicator) error {
	var slice []*SolutionMaster
	var object *SolutionMaster

	if singular {
		var ok bool
		object, ok = maybeSolutionMaster.(*SolutionMaster)
		if !ok {
			object = new(SolutionMaster)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeSolutionMaster)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeSolutionMaster))
			}
		}
	} else {
		s, ok := maybeSolutionMaster.(*[]*SolutionMaster)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeSolutionMaster)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeSolutionMaster))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &solutionMasterR{}
		}
		if !queries.IsNil(object.IndustryMasterID) {
			args = append(args, object.IndustryMasterID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &solutionMasterR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.IndustryMasterID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.IndustryMasterID) {
				args = append(args, obj.IndustryMasterID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`industry_masters`),
		qm.WhereIn(`industry_masters.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load IndustryMaster")
	}

	var resultSlice []*IndustryMaster
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice IndustryMaster")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for industry_masters")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for industry_masters")
	}

	if len(industryMasterAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.IndustryMaster = foreign
		if foreign.R == nil {
			foreign.R = &industryMasterR{}
		}
		foreign.R.SolutionMasters = append(foreign.R.SolutionMasters, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.IndustryMasterID, foreign.ID) {
				local.R.IndustryMaster = foreign
				if foreign.R == nil {
					foreign.R = &industryMasterR{}
				}
				foreign.R.SolutionMasters = append(foreign.R.SolutionMasters, local)
				break
			}
		}
	}

	return nil
}

// LoadSolutionProducts allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (solutionMasterL) LoadSolutionProducts(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSolutionMaster interface{}, mods queries.Applicator) error {
	var slice []*SolutionMaster
	var object *SolutionMaster

	if singular {
		var ok bool
		object, ok = maybeSolutionMaster.(*SolutionMaster)
		if !ok {
			object = new(SolutionMaster)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeSolutionMaster)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeSolutionMaster))
			}
		}
	} else {
		s, ok := maybeSolutionMaster.(*[]*SolutionMaster)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeSolutionMaster)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeSolutionMaster))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &solutionMasterR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &solutionMasterR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`solution_products`),
		qm.WhereIn(`solution_products.solution_master_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load solution_products")
	}

	var resultSlice []*SolutionProduct
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice solution_products")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on solution_products")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for solution_products")
	}

	if len(solutionProductAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.SolutionProducts = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &solutionProductR{}
			}
			foreign.R.SolutionMaster = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.SolutionMasterID) {
				local.R.SolutionProducts = append(local.R.SolutionProducts, foreign)
				if foreign.R == nil {
					foreign.R = &solutionProductR{}
				}
				foreign.R.SolutionMaster = local
				break
			}
		}
	}

	return nil
}

// SetBusinessCategoryMaster of the solutionMaster to the related item.
// Sets o.R.BusinessCategoryMaster to related.
// Adds o to related.R.SolutionMasters.
func (o *SolutionMaster) SetBusinessCategoryMaster(ctx context.Context, exec boil.ContextExecutor, insert bool, related *BusinessCategoryMaster) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"solution_masters\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"business_category_master_id"}),
		strmangle.WhereClause("\"", "\"", 2, solutionMasterPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.BusinessCategoryMasterID, related.ID)
	if o.R == nil {
		o.R = &solutionMasterR{
			BusinessCategoryMaster: related,
		}
	} else {
		o.R.BusinessCategoryMaster = related
	}

	if related.R == nil {
		related.R = &businessCategoryMasterR{
			SolutionMasters: SolutionMasterSlice{o},
		}
	} else {
		related.R.SolutionMasters = append(related.R.SolutionMasters, o)
	}

	return nil
}

// SetIndustryMaster of the solutionMaster to the related item.
// Sets o.R.IndustryMaster to related.
// Adds o to related.R.SolutionMasters.
func (o *SolutionMaster) SetIndustryMaster(ctx context.Context, exec boil.ContextExecutor, insert bool, related *IndustryMaster) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"solution_masters\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"industry_master_id"}),
		strmangle.WhereClause("\"", "\"", 2, solutionMasterPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.IndustryMasterID, related.ID)
	if o.R == nil {
		o.R = &solutionMasterR{
			IndustryMaster: related,
		}
	} else {
		o.R.IndustryMaster = related
	}

	if related.R == nil {
		related.R = &industryMasterR{
			SolutionMasters: SolutionMasterSlice{o},
		}
	} else {
		related.R.SolutionMasters = append(related.R.SolutionMasters, o)
	}

	return nil
}

// AddSolutionProducts adds the given related objects to the existing relationships
// of the solution_master, optionally inserting them as new records.
// Appends related to o.R.SolutionProducts.
// Sets related.R.SolutionMaster appropriately.
func (o *SolutionMaster) AddSolutionProducts(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SolutionProduct) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.SolutionMasterID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"solution_products\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"solution_master_id"}),
				strmangle.WhereClause("\"", "\"", 2, solutionProductPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.SolutionMasterID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &solutionMasterR{
			SolutionProducts: related,
		}
	} else {
		o.R.SolutionProducts = append(o.R.SolutionProducts, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &solutionProductR{
				SolutionMaster: o,
			}
		} else {
			rel.R.SolutionMaster = o
		}
	}
	return nil
}

// SolutionMasters retrieves all the records using an executor.
func SolutionMasters(mods ...qm.QueryMod) solutionMasterQuery {
	mods = append(mods, qm.From("\"solution_masters\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"solution_masters\".*"})
	}

	return solutionMasterQuery{q}
}

// FindSolutionMaster retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSolutionMaster(ctx context.Context, exec boil.ContextExecutor, iD []byte, selectCols ...string) (*SolutionMaster, error) {
	solutionMasterObj := &SolutionMaster{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"solution_masters\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, solutionMasterObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from solution_masters")
	}

	if err = solutionMasterObj.doAfterSelectHooks(ctx, exec); err != nil {
		return solutionMasterObj, err
	}

	return solutionMasterObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SolutionMaster) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no solution_masters provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(solutionMasterColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	solutionMasterInsertCacheMut.RLock()
	cache, cached := solutionMasterInsertCache[key]
	solutionMasterInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			solutionMasterAllColumns,
			solutionMasterColumnsWithDefault,
			solutionMasterColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(solutionMasterType, solutionMasterMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(solutionMasterType, solutionMasterMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"solution_masters\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"solution_masters\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into solution_masters")
	}

	if !cached {
		solutionMasterInsertCacheMut.Lock()
		solutionMasterInsertCache[key] = cache
		solutionMasterInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SolutionMaster.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SolutionMaster) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	solutionMasterUpdateCacheMut.RLock()
	cache, cached := solutionMasterUpdateCache[key]
	solutionMasterUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			solutionMasterAllColumns,
			solutionMasterPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update solution_masters, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"solution_masters\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, solutionMasterPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(solutionMasterType, solutionMasterMapping, append(wl, solutionMasterPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update solution_masters row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for solution_masters")
	}

	if !cached {
		solutionMasterUpdateCacheMut.Lock()
		solutionMasterUpdateCache[key] = cache
		solutionMasterUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q solutionMasterQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for solution_masters")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for solution_masters")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SolutionMasterSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), solutionMasterPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"solution_masters\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, solutionMasterPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in solutionMaster slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all solutionMaster")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SolutionMaster) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no solution_masters provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(solutionMasterColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	solutionMasterUpsertCacheMut.RLock()
	cache, cached := solutionMasterUpsertCache[key]
	solutionMasterUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			solutionMasterAllColumns,
			solutionMasterColumnsWithDefault,
			solutionMasterColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			solutionMasterAllColumns,
			solutionMasterPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert solution_masters, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(solutionMasterPrimaryKeyColumns))
			copy(conflict, solutionMasterPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"solution_masters\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(solutionMasterType, solutionMasterMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(solutionMasterType, solutionMasterMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert solution_masters")
	}

	if !cached {
		solutionMasterUpsertCacheMut.Lock()
		solutionMasterUpsertCache[key] = cache
		solutionMasterUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SolutionMaster record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SolutionMaster) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no SolutionMaster provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), solutionMasterPrimaryKeyMapping)
	sql := "DELETE FROM \"solution_masters\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from solution_masters")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for solution_masters")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q solutionMasterQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no solutionMasterQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from solution_masters")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for solution_masters")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SolutionMasterSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(solutionMasterBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), solutionMasterPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"solution_masters\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, solutionMasterPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from solutionMaster slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for solution_masters")
	}

	if len(solutionMasterAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SolutionMaster) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSolutionMaster(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SolutionMasterSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SolutionMasterSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), solutionMasterPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"solution_masters\".* FROM \"solution_masters\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, solutionMasterPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in SolutionMasterSlice")
	}

	*o = slice

	return nil
}

// SolutionMasterExists checks if the SolutionMaster row exists.
func SolutionMasterExists(ctx context.Context, exec boil.ContextExecutor, iD []byte) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"solution_masters\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if solution_masters exists")
	}

	return exists, nil
}

// Exists checks if the SolutionMaster row exists.
func (o *SolutionMaster) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return SolutionMasterExists(ctx, exec, o.ID)
}
