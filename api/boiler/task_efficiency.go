// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// TaskEfficiency is an object representing the database table.
type TaskEfficiency struct { // 費用対効率ID
	ID []byte `boil:"id" json:"id" toml:"id" yaml:"id"`
	// 業務ID
	TaskID []byte `boil:"task_id" json:"task_id" toml:"task_id" yaml:"task_id"`
	// 人数
	HeadCount null.Int `boil:"head_count" json:"head_count,omitempty" toml:"head_count" yaml:"head_count,omitempty"`
	// 一人当たりの時給
	PerHour null.Int `boil:"per_hour" json:"per_hour,omitempty" toml:"per_hour" yaml:"per_hour,omitempty"`
	// 頻度1
	Frequency1 null.Int `boil:"frequency1" json:"frequency1,omitempty" toml:"frequency1" yaml:"frequency1,omitempty"`
	// 頻度2
	Frequency2 null.Int `boil:"frequency2" json:"frequency2,omitempty" toml:"frequency2" yaml:"frequency2,omitempty"`
	// 時間
	Hour null.Int `boil:"hour" json:"hour,omitempty" toml:"hour" yaml:"hour,omitempty"`
	// データ作成日
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	// データ更新日
	UpdatedAt time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *taskEfficiencyR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L taskEfficiencyL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TaskEfficiencyColumns = struct {
	ID         string
	TaskID     string
	HeadCount  string
	PerHour    string
	Frequency1 string
	Frequency2 string
	Hour       string
	CreatedAt  string
	UpdatedAt  string
}{
	ID:         "id",
	TaskID:     "task_id",
	HeadCount:  "head_count",
	PerHour:    "per_hour",
	Frequency1: "frequency1",
	Frequency2: "frequency2",
	Hour:       "hour",
	CreatedAt:  "created_at",
	UpdatedAt:  "updated_at",
}

var TaskEfficiencyTableColumns = struct {
	ID         string
	TaskID     string
	HeadCount  string
	PerHour    string
	Frequency1 string
	Frequency2 string
	Hour       string
	CreatedAt  string
	UpdatedAt  string
}{
	ID:         "task_efficiency.id",
	TaskID:     "task_efficiency.task_id",
	HeadCount:  "task_efficiency.head_count",
	PerHour:    "task_efficiency.per_hour",
	Frequency1: "task_efficiency.frequency1",
	Frequency2: "task_efficiency.frequency2",
	Hour:       "task_efficiency.hour",
	CreatedAt:  "task_efficiency.created_at",
	UpdatedAt:  "task_efficiency.updated_at",
}

// Generated where

var TaskEfficiencyWhere = struct {
	ID         whereHelper__byte
	TaskID     whereHelper__byte
	HeadCount  whereHelpernull_Int
	PerHour    whereHelpernull_Int
	Frequency1 whereHelpernull_Int
	Frequency2 whereHelpernull_Int
	Hour       whereHelpernull_Int
	CreatedAt  whereHelpertime_Time
	UpdatedAt  whereHelpertime_Time
}{
	ID:         whereHelper__byte{field: "\"task_efficiency\".\"id\""},
	TaskID:     whereHelper__byte{field: "\"task_efficiency\".\"task_id\""},
	HeadCount:  whereHelpernull_Int{field: "\"task_efficiency\".\"head_count\""},
	PerHour:    whereHelpernull_Int{field: "\"task_efficiency\".\"per_hour\""},
	Frequency1: whereHelpernull_Int{field: "\"task_efficiency\".\"frequency1\""},
	Frequency2: whereHelpernull_Int{field: "\"task_efficiency\".\"frequency2\""},
	Hour:       whereHelpernull_Int{field: "\"task_efficiency\".\"hour\""},
	CreatedAt:  whereHelpertime_Time{field: "\"task_efficiency\".\"created_at\""},
	UpdatedAt:  whereHelpertime_Time{field: "\"task_efficiency\".\"updated_at\""},
}

// TaskEfficiencyRels is where relationship names are stored.
var TaskEfficiencyRels = struct {
	Task string
}{
	Task: "Task",
}

// taskEfficiencyR is where relationships are stored.
type taskEfficiencyR struct {
	Task *Task `boil:"Task" json:"Task" toml:"Task" yaml:"Task"`
}

// NewStruct creates a new relationship struct
func (*taskEfficiencyR) NewStruct() *taskEfficiencyR {
	return &taskEfficiencyR{}
}

func (r *taskEfficiencyR) GetTask() *Task {
	if r == nil {
		return nil
	}
	return r.Task
}

// taskEfficiencyL is where Load methods for each relationship are stored.
type taskEfficiencyL struct{}

var (
	taskEfficiencyAllColumns            = []string{"id", "task_id", "head_count", "per_hour", "frequency1", "frequency2", "hour", "created_at", "updated_at"}
	taskEfficiencyColumnsWithoutDefault = []string{"task_id"}
	taskEfficiencyColumnsWithDefault    = []string{"id", "head_count", "per_hour", "frequency1", "frequency2", "hour", "created_at", "updated_at"}
	taskEfficiencyPrimaryKeyColumns     = []string{"id"}
	taskEfficiencyGeneratedColumns      = []string{}
)

type (
	// TaskEfficiencySlice is an alias for a slice of pointers to TaskEfficiency.
	// This should almost always be used instead of []TaskEfficiency.
	TaskEfficiencySlice []*TaskEfficiency
	// TaskEfficiencyHook is the signature for custom TaskEfficiency hook methods
	TaskEfficiencyHook func(context.Context, boil.ContextExecutor, *TaskEfficiency) error

	taskEfficiencyQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	taskEfficiencyType                 = reflect.TypeOf(&TaskEfficiency{})
	taskEfficiencyMapping              = queries.MakeStructMapping(taskEfficiencyType)
	taskEfficiencyPrimaryKeyMapping, _ = queries.BindMapping(taskEfficiencyType, taskEfficiencyMapping, taskEfficiencyPrimaryKeyColumns)
	taskEfficiencyInsertCacheMut       sync.RWMutex
	taskEfficiencyInsertCache          = make(map[string]insertCache)
	taskEfficiencyUpdateCacheMut       sync.RWMutex
	taskEfficiencyUpdateCache          = make(map[string]updateCache)
	taskEfficiencyUpsertCacheMut       sync.RWMutex
	taskEfficiencyUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var taskEfficiencyAfterSelectHooks []TaskEfficiencyHook

var taskEfficiencyBeforeInsertHooks []TaskEfficiencyHook
var taskEfficiencyAfterInsertHooks []TaskEfficiencyHook

var taskEfficiencyBeforeUpdateHooks []TaskEfficiencyHook
var taskEfficiencyAfterUpdateHooks []TaskEfficiencyHook

var taskEfficiencyBeforeDeleteHooks []TaskEfficiencyHook
var taskEfficiencyAfterDeleteHooks []TaskEfficiencyHook

var taskEfficiencyBeforeUpsertHooks []TaskEfficiencyHook
var taskEfficiencyAfterUpsertHooks []TaskEfficiencyHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *TaskEfficiency) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range taskEfficiencyAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *TaskEfficiency) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range taskEfficiencyBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *TaskEfficiency) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range taskEfficiencyAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *TaskEfficiency) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range taskEfficiencyBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *TaskEfficiency) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range taskEfficiencyAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *TaskEfficiency) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range taskEfficiencyBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *TaskEfficiency) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range taskEfficiencyAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *TaskEfficiency) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range taskEfficiencyBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *TaskEfficiency) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range taskEfficiencyAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTaskEfficiencyHook registers your hook function for all future operations.
func AddTaskEfficiencyHook(hookPoint boil.HookPoint, taskEfficiencyHook TaskEfficiencyHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		taskEfficiencyAfterSelectHooks = append(taskEfficiencyAfterSelectHooks, taskEfficiencyHook)
	case boil.BeforeInsertHook:
		taskEfficiencyBeforeInsertHooks = append(taskEfficiencyBeforeInsertHooks, taskEfficiencyHook)
	case boil.AfterInsertHook:
		taskEfficiencyAfterInsertHooks = append(taskEfficiencyAfterInsertHooks, taskEfficiencyHook)
	case boil.BeforeUpdateHook:
		taskEfficiencyBeforeUpdateHooks = append(taskEfficiencyBeforeUpdateHooks, taskEfficiencyHook)
	case boil.AfterUpdateHook:
		taskEfficiencyAfterUpdateHooks = append(taskEfficiencyAfterUpdateHooks, taskEfficiencyHook)
	case boil.BeforeDeleteHook:
		taskEfficiencyBeforeDeleteHooks = append(taskEfficiencyBeforeDeleteHooks, taskEfficiencyHook)
	case boil.AfterDeleteHook:
		taskEfficiencyAfterDeleteHooks = append(taskEfficiencyAfterDeleteHooks, taskEfficiencyHook)
	case boil.BeforeUpsertHook:
		taskEfficiencyBeforeUpsertHooks = append(taskEfficiencyBeforeUpsertHooks, taskEfficiencyHook)
	case boil.AfterUpsertHook:
		taskEfficiencyAfterUpsertHooks = append(taskEfficiencyAfterUpsertHooks, taskEfficiencyHook)
	}
}

// One returns a single taskEfficiency record from the query.
func (q taskEfficiencyQuery) One(ctx context.Context, exec boil.ContextExecutor) (*TaskEfficiency, error) {
	o := &TaskEfficiency{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for task_efficiency")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all TaskEfficiency records from the query.
func (q taskEfficiencyQuery) All(ctx context.Context, exec boil.ContextExecutor) (TaskEfficiencySlice, error) {
	var o []*TaskEfficiency

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to TaskEfficiency slice")
	}

	if len(taskEfficiencyAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all TaskEfficiency records in the query.
func (q taskEfficiencyQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count task_efficiency rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q taskEfficiencyQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if task_efficiency exists")
	}

	return count > 0, nil
}

// Task pointed to by the foreign key.
func (o *TaskEfficiency) Task(mods ...qm.QueryMod) taskQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.TaskID),
	}

	queryMods = append(queryMods, mods...)

	return Tasks(queryMods...)
}

// LoadTask allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (taskEfficiencyL) LoadTask(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTaskEfficiency interface{}, mods queries.Applicator) error {
	var slice []*TaskEfficiency
	var object *TaskEfficiency

	if singular {
		var ok bool
		object, ok = maybeTaskEfficiency.(*TaskEfficiency)
		if !ok {
			object = new(TaskEfficiency)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTaskEfficiency)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTaskEfficiency))
			}
		}
	} else {
		s, ok := maybeTaskEfficiency.(*[]*TaskEfficiency)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTaskEfficiency)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTaskEfficiency))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &taskEfficiencyR{}
		}
		if !queries.IsNil(object.TaskID) {
			args = append(args, object.TaskID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &taskEfficiencyR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.TaskID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.TaskID) {
				args = append(args, obj.TaskID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`tasks`),
		qm.WhereIn(`tasks.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Task")
	}

	var resultSlice []*Task
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Task")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for tasks")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for tasks")
	}

	if len(taskAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Task = foreign
		if foreign.R == nil {
			foreign.R = &taskR{}
		}
		foreign.R.TaskEfficiencies = append(foreign.R.TaskEfficiencies, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.TaskID, foreign.ID) {
				local.R.Task = foreign
				if foreign.R == nil {
					foreign.R = &taskR{}
				}
				foreign.R.TaskEfficiencies = append(foreign.R.TaskEfficiencies, local)
				break
			}
		}
	}

	return nil
}

// SetTask of the taskEfficiency to the related item.
// Sets o.R.Task to related.
// Adds o to related.R.TaskEfficiencies.
func (o *TaskEfficiency) SetTask(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Task) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"task_efficiency\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"task_id"}),
		strmangle.WhereClause("\"", "\"", 2, taskEfficiencyPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.TaskID, related.ID)
	if o.R == nil {
		o.R = &taskEfficiencyR{
			Task: related,
		}
	} else {
		o.R.Task = related
	}

	if related.R == nil {
		related.R = &taskR{
			TaskEfficiencies: TaskEfficiencySlice{o},
		}
	} else {
		related.R.TaskEfficiencies = append(related.R.TaskEfficiencies, o)
	}

	return nil
}

// TaskEfficiencies retrieves all the records using an executor.
func TaskEfficiencies(mods ...qm.QueryMod) taskEfficiencyQuery {
	mods = append(mods, qm.From("\"task_efficiency\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"task_efficiency\".*"})
	}

	return taskEfficiencyQuery{q}
}

// FindTaskEfficiency retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTaskEfficiency(ctx context.Context, exec boil.ContextExecutor, iD []byte, selectCols ...string) (*TaskEfficiency, error) {
	taskEfficiencyObj := &TaskEfficiency{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"task_efficiency\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, taskEfficiencyObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from task_efficiency")
	}

	if err = taskEfficiencyObj.doAfterSelectHooks(ctx, exec); err != nil {
		return taskEfficiencyObj, err
	}

	return taskEfficiencyObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *TaskEfficiency) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no task_efficiency provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(taskEfficiencyColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	taskEfficiencyInsertCacheMut.RLock()
	cache, cached := taskEfficiencyInsertCache[key]
	taskEfficiencyInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			taskEfficiencyAllColumns,
			taskEfficiencyColumnsWithDefault,
			taskEfficiencyColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(taskEfficiencyType, taskEfficiencyMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(taskEfficiencyType, taskEfficiencyMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"task_efficiency\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"task_efficiency\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into task_efficiency")
	}

	if !cached {
		taskEfficiencyInsertCacheMut.Lock()
		taskEfficiencyInsertCache[key] = cache
		taskEfficiencyInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the TaskEfficiency.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *TaskEfficiency) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	taskEfficiencyUpdateCacheMut.RLock()
	cache, cached := taskEfficiencyUpdateCache[key]
	taskEfficiencyUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			taskEfficiencyAllColumns,
			taskEfficiencyPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update task_efficiency, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"task_efficiency\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, taskEfficiencyPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(taskEfficiencyType, taskEfficiencyMapping, append(wl, taskEfficiencyPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update task_efficiency row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for task_efficiency")
	}

	if !cached {
		taskEfficiencyUpdateCacheMut.Lock()
		taskEfficiencyUpdateCache[key] = cache
		taskEfficiencyUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q taskEfficiencyQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for task_efficiency")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for task_efficiency")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TaskEfficiencySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), taskEfficiencyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"task_efficiency\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, taskEfficiencyPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in taskEfficiency slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all taskEfficiency")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *TaskEfficiency) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no task_efficiency provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(taskEfficiencyColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	taskEfficiencyUpsertCacheMut.RLock()
	cache, cached := taskEfficiencyUpsertCache[key]
	taskEfficiencyUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			taskEfficiencyAllColumns,
			taskEfficiencyColumnsWithDefault,
			taskEfficiencyColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			taskEfficiencyAllColumns,
			taskEfficiencyPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert task_efficiency, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(taskEfficiencyPrimaryKeyColumns))
			copy(conflict, taskEfficiencyPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"task_efficiency\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(taskEfficiencyType, taskEfficiencyMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(taskEfficiencyType, taskEfficiencyMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert task_efficiency")
	}

	if !cached {
		taskEfficiencyUpsertCacheMut.Lock()
		taskEfficiencyUpsertCache[key] = cache
		taskEfficiencyUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single TaskEfficiency record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *TaskEfficiency) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no TaskEfficiency provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), taskEfficiencyPrimaryKeyMapping)
	sql := "DELETE FROM \"task_efficiency\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from task_efficiency")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for task_efficiency")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q taskEfficiencyQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no taskEfficiencyQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from task_efficiency")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for task_efficiency")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TaskEfficiencySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(taskEfficiencyBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), taskEfficiencyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"task_efficiency\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, taskEfficiencyPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from taskEfficiency slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for task_efficiency")
	}

	if len(taskEfficiencyAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *TaskEfficiency) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindTaskEfficiency(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TaskEfficiencySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TaskEfficiencySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), taskEfficiencyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"task_efficiency\".* FROM \"task_efficiency\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, taskEfficiencyPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in TaskEfficiencySlice")
	}

	*o = slice

	return nil
}

// TaskEfficiencyExists checks if the TaskEfficiency row exists.
func TaskEfficiencyExists(ctx context.Context, exec boil.ContextExecutor, iD []byte) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"task_efficiency\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if task_efficiency exists")
	}

	return exists, nil
}

// Exists checks if the TaskEfficiency row exists.
func (o *TaskEfficiency) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return TaskEfficiencyExists(ctx, exec, o.ID)
}
