// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// HearingProject is an object representing the database table.
type HearingProject struct { // ヒアリングプロジェクトID
	ID []byte `boil:"id" json:"id" toml:"id" yaml:"id"`
	// 会社ID
	CompanyID []byte `boil:"company_id" json:"company_id" toml:"company_id" yaml:"company_id"`
	// ヒアリングプロジェクト名
	Name string `boil:"name" json:"name" toml:"name" yaml:"name"`
	// サブスクリプションのプラン
	Plan string `boil:"plan" json:"plan" toml:"plan" yaml:"plan"`
	// データ作成日
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	// データ更新日
	UpdatedAt time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *hearingProjectR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L hearingProjectL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var HearingProjectColumns = struct {
	ID        string
	CompanyID string
	Name      string
	Plan      string
	CreatedAt string
	UpdatedAt string
}{
	ID:        "id",
	CompanyID: "company_id",
	Name:      "name",
	Plan:      "plan",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
}

var HearingProjectTableColumns = struct {
	ID        string
	CompanyID string
	Name      string
	Plan      string
	CreatedAt string
	UpdatedAt string
}{
	ID:        "hearing_projects.id",
	CompanyID: "hearing_projects.company_id",
	Name:      "hearing_projects.name",
	Plan:      "hearing_projects.plan",
	CreatedAt: "hearing_projects.created_at",
	UpdatedAt: "hearing_projects.updated_at",
}

// Generated where

var HearingProjectWhere = struct {
	ID        whereHelper__byte
	CompanyID whereHelper__byte
	Name      whereHelperstring
	Plan      whereHelperstring
	CreatedAt whereHelpertime_Time
	UpdatedAt whereHelpertime_Time
}{
	ID:        whereHelper__byte{field: "\"hearing_projects\".\"id\""},
	CompanyID: whereHelper__byte{field: "\"hearing_projects\".\"company_id\""},
	Name:      whereHelperstring{field: "\"hearing_projects\".\"name\""},
	Plan:      whereHelperstring{field: "\"hearing_projects\".\"plan\""},
	CreatedAt: whereHelpertime_Time{field: "\"hearing_projects\".\"created_at\""},
	UpdatedAt: whereHelpertime_Time{field: "\"hearing_projects\".\"updated_at\""},
}

// HearingProjectRels is where relationship names are stored.
var HearingProjectRels = struct {
	Company                  string
	HearingProjectMembers    string
	Hearings                 string
	PaymentHistories         string
	PaymentUsers             string
	ProjectSpecificSolutions string
	Tickets                  string
}{
	Company:                  "Company",
	HearingProjectMembers:    "HearingProjectMembers",
	Hearings:                 "Hearings",
	PaymentHistories:         "PaymentHistories",
	PaymentUsers:             "PaymentUsers",
	ProjectSpecificSolutions: "ProjectSpecificSolutions",
	Tickets:                  "Tickets",
}

// hearingProjectR is where relationships are stored.
type hearingProjectR struct {
	Company                  *Company                     `boil:"Company" json:"Company" toml:"Company" yaml:"Company"`
	HearingProjectMembers    HearingProjectMemberSlice    `boil:"HearingProjectMembers" json:"HearingProjectMembers" toml:"HearingProjectMembers" yaml:"HearingProjectMembers"`
	Hearings                 HearingSlice                 `boil:"Hearings" json:"Hearings" toml:"Hearings" yaml:"Hearings"`
	PaymentHistories         PaymentHistorySlice          `boil:"PaymentHistories" json:"PaymentHistories" toml:"PaymentHistories" yaml:"PaymentHistories"`
	PaymentUsers             PaymentUserSlice             `boil:"PaymentUsers" json:"PaymentUsers" toml:"PaymentUsers" yaml:"PaymentUsers"`
	ProjectSpecificSolutions ProjectSpecificSolutionSlice `boil:"ProjectSpecificSolutions" json:"ProjectSpecificSolutions" toml:"ProjectSpecificSolutions" yaml:"ProjectSpecificSolutions"`
	Tickets                  TicketSlice                  `boil:"Tickets" json:"Tickets" toml:"Tickets" yaml:"Tickets"`
}

// NewStruct creates a new relationship struct
func (*hearingProjectR) NewStruct() *hearingProjectR {
	return &hearingProjectR{}
}

func (r *hearingProjectR) GetCompany() *Company {
	if r == nil {
		return nil
	}
	return r.Company
}

func (r *hearingProjectR) GetHearingProjectMembers() HearingProjectMemberSlice {
	if r == nil {
		return nil
	}
	return r.HearingProjectMembers
}

func (r *hearingProjectR) GetHearings() HearingSlice {
	if r == nil {
		return nil
	}
	return r.Hearings
}

func (r *hearingProjectR) GetPaymentHistories() PaymentHistorySlice {
	if r == nil {
		return nil
	}
	return r.PaymentHistories
}

func (r *hearingProjectR) GetPaymentUsers() PaymentUserSlice {
	if r == nil {
		return nil
	}
	return r.PaymentUsers
}

func (r *hearingProjectR) GetProjectSpecificSolutions() ProjectSpecificSolutionSlice {
	if r == nil {
		return nil
	}
	return r.ProjectSpecificSolutions
}

func (r *hearingProjectR) GetTickets() TicketSlice {
	if r == nil {
		return nil
	}
	return r.Tickets
}

// hearingProjectL is where Load methods for each relationship are stored.
type hearingProjectL struct{}

var (
	hearingProjectAllColumns            = []string{"id", "company_id", "name", "plan", "created_at", "updated_at"}
	hearingProjectColumnsWithoutDefault = []string{"company_id", "name", "plan"}
	hearingProjectColumnsWithDefault    = []string{"id", "created_at", "updated_at"}
	hearingProjectPrimaryKeyColumns     = []string{"id"}
	hearingProjectGeneratedColumns      = []string{}
)

type (
	// HearingProjectSlice is an alias for a slice of pointers to HearingProject.
	// This should almost always be used instead of []HearingProject.
	HearingProjectSlice []*HearingProject
	// HearingProjectHook is the signature for custom HearingProject hook methods
	HearingProjectHook func(context.Context, boil.ContextExecutor, *HearingProject) error

	hearingProjectQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	hearingProjectType                 = reflect.TypeOf(&HearingProject{})
	hearingProjectMapping              = queries.MakeStructMapping(hearingProjectType)
	hearingProjectPrimaryKeyMapping, _ = queries.BindMapping(hearingProjectType, hearingProjectMapping, hearingProjectPrimaryKeyColumns)
	hearingProjectInsertCacheMut       sync.RWMutex
	hearingProjectInsertCache          = make(map[string]insertCache)
	hearingProjectUpdateCacheMut       sync.RWMutex
	hearingProjectUpdateCache          = make(map[string]updateCache)
	hearingProjectUpsertCacheMut       sync.RWMutex
	hearingProjectUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var hearingProjectAfterSelectHooks []HearingProjectHook

var hearingProjectBeforeInsertHooks []HearingProjectHook
var hearingProjectAfterInsertHooks []HearingProjectHook

var hearingProjectBeforeUpdateHooks []HearingProjectHook
var hearingProjectAfterUpdateHooks []HearingProjectHook

var hearingProjectBeforeDeleteHooks []HearingProjectHook
var hearingProjectAfterDeleteHooks []HearingProjectHook

var hearingProjectBeforeUpsertHooks []HearingProjectHook
var hearingProjectAfterUpsertHooks []HearingProjectHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *HearingProject) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range hearingProjectAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *HearingProject) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range hearingProjectBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *HearingProject) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range hearingProjectAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *HearingProject) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range hearingProjectBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *HearingProject) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range hearingProjectAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *HearingProject) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range hearingProjectBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *HearingProject) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range hearingProjectAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *HearingProject) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range hearingProjectBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *HearingProject) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range hearingProjectAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddHearingProjectHook registers your hook function for all future operations.
func AddHearingProjectHook(hookPoint boil.HookPoint, hearingProjectHook HearingProjectHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		hearingProjectAfterSelectHooks = append(hearingProjectAfterSelectHooks, hearingProjectHook)
	case boil.BeforeInsertHook:
		hearingProjectBeforeInsertHooks = append(hearingProjectBeforeInsertHooks, hearingProjectHook)
	case boil.AfterInsertHook:
		hearingProjectAfterInsertHooks = append(hearingProjectAfterInsertHooks, hearingProjectHook)
	case boil.BeforeUpdateHook:
		hearingProjectBeforeUpdateHooks = append(hearingProjectBeforeUpdateHooks, hearingProjectHook)
	case boil.AfterUpdateHook:
		hearingProjectAfterUpdateHooks = append(hearingProjectAfterUpdateHooks, hearingProjectHook)
	case boil.BeforeDeleteHook:
		hearingProjectBeforeDeleteHooks = append(hearingProjectBeforeDeleteHooks, hearingProjectHook)
	case boil.AfterDeleteHook:
		hearingProjectAfterDeleteHooks = append(hearingProjectAfterDeleteHooks, hearingProjectHook)
	case boil.BeforeUpsertHook:
		hearingProjectBeforeUpsertHooks = append(hearingProjectBeforeUpsertHooks, hearingProjectHook)
	case boil.AfterUpsertHook:
		hearingProjectAfterUpsertHooks = append(hearingProjectAfterUpsertHooks, hearingProjectHook)
	}
}

// One returns a single hearingProject record from the query.
func (q hearingProjectQuery) One(ctx context.Context, exec boil.ContextExecutor) (*HearingProject, error) {
	o := &HearingProject{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for hearing_projects")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all HearingProject records from the query.
func (q hearingProjectQuery) All(ctx context.Context, exec boil.ContextExecutor) (HearingProjectSlice, error) {
	var o []*HearingProject

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to HearingProject slice")
	}

	if len(hearingProjectAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all HearingProject records in the query.
func (q hearingProjectQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count hearing_projects rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q hearingProjectQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if hearing_projects exists")
	}

	return count > 0, nil
}

// Company pointed to by the foreign key.
func (o *HearingProject) Company(mods ...qm.QueryMod) companyQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.CompanyID),
	}

	queryMods = append(queryMods, mods...)

	return Companies(queryMods...)
}

// HearingProjectMembers retrieves all the hearing_project_member's HearingProjectMembers with an executor.
func (o *HearingProject) HearingProjectMembers(mods ...qm.QueryMod) hearingProjectMemberQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"hearing_project_members\".\"hearing_project_id\"=?", o.ID),
	)

	return HearingProjectMembers(queryMods...)
}

// Hearings retrieves all the hearing's Hearings with an executor.
func (o *HearingProject) Hearings(mods ...qm.QueryMod) hearingQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"hearings\".\"hearing_project_id\"=?", o.ID),
	)

	return Hearings(queryMods...)
}

// PaymentHistories retrieves all the payment_history's PaymentHistories with an executor.
func (o *HearingProject) PaymentHistories(mods ...qm.QueryMod) paymentHistoryQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"payment_histories\".\"hearing_project_id\"=?", o.ID),
	)

	return PaymentHistories(queryMods...)
}

// PaymentUsers retrieves all the payment_user's PaymentUsers with an executor.
func (o *HearingProject) PaymentUsers(mods ...qm.QueryMod) paymentUserQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"payment_users\".\"hearing_project_id\"=?", o.ID),
	)

	return PaymentUsers(queryMods...)
}

// ProjectSpecificSolutions retrieves all the project_specific_solution's ProjectSpecificSolutions with an executor.
func (o *HearingProject) ProjectSpecificSolutions(mods ...qm.QueryMod) projectSpecificSolutionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"project_specific_solutions\".\"hearing_project_id\"=?", o.ID),
	)

	return ProjectSpecificSolutions(queryMods...)
}

// Tickets retrieves all the ticket's Tickets with an executor.
func (o *HearingProject) Tickets(mods ...qm.QueryMod) ticketQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"tickets\".\"hearing_project_id\"=?", o.ID),
	)

	return Tickets(queryMods...)
}

// LoadCompany allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (hearingProjectL) LoadCompany(ctx context.Context, e boil.ContextExecutor, singular bool, maybeHearingProject interface{}, mods queries.Applicator) error {
	var slice []*HearingProject
	var object *HearingProject

	if singular {
		var ok bool
		object, ok = maybeHearingProject.(*HearingProject)
		if !ok {
			object = new(HearingProject)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeHearingProject)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeHearingProject))
			}
		}
	} else {
		s, ok := maybeHearingProject.(*[]*HearingProject)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeHearingProject)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeHearingProject))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &hearingProjectR{}
		}
		if !queries.IsNil(object.CompanyID) {
			args = append(args, object.CompanyID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &hearingProjectR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.CompanyID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.CompanyID) {
				args = append(args, obj.CompanyID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`companies`),
		qm.WhereIn(`companies.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Company")
	}

	var resultSlice []*Company
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Company")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for companies")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for companies")
	}

	if len(companyAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Company = foreign
		if foreign.R == nil {
			foreign.R = &companyR{}
		}
		foreign.R.HearingProjects = append(foreign.R.HearingProjects, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.CompanyID, foreign.ID) {
				local.R.Company = foreign
				if foreign.R == nil {
					foreign.R = &companyR{}
				}
				foreign.R.HearingProjects = append(foreign.R.HearingProjects, local)
				break
			}
		}
	}

	return nil
}

// LoadHearingProjectMembers allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (hearingProjectL) LoadHearingProjectMembers(ctx context.Context, e boil.ContextExecutor, singular bool, maybeHearingProject interface{}, mods queries.Applicator) error {
	var slice []*HearingProject
	var object *HearingProject

	if singular {
		var ok bool
		object, ok = maybeHearingProject.(*HearingProject)
		if !ok {
			object = new(HearingProject)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeHearingProject)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeHearingProject))
			}
		}
	} else {
		s, ok := maybeHearingProject.(*[]*HearingProject)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeHearingProject)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeHearingProject))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &hearingProjectR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &hearingProjectR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`hearing_project_members`),
		qm.WhereIn(`hearing_project_members.hearing_project_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load hearing_project_members")
	}

	var resultSlice []*HearingProjectMember
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice hearing_project_members")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on hearing_project_members")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for hearing_project_members")
	}

	if len(hearingProjectMemberAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.HearingProjectMembers = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &hearingProjectMemberR{}
			}
			foreign.R.HearingProject = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.HearingProjectID) {
				local.R.HearingProjectMembers = append(local.R.HearingProjectMembers, foreign)
				if foreign.R == nil {
					foreign.R = &hearingProjectMemberR{}
				}
				foreign.R.HearingProject = local
				break
			}
		}
	}

	return nil
}

// LoadHearings allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (hearingProjectL) LoadHearings(ctx context.Context, e boil.ContextExecutor, singular bool, maybeHearingProject interface{}, mods queries.Applicator) error {
	var slice []*HearingProject
	var object *HearingProject

	if singular {
		var ok bool
		object, ok = maybeHearingProject.(*HearingProject)
		if !ok {
			object = new(HearingProject)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeHearingProject)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeHearingProject))
			}
		}
	} else {
		s, ok := maybeHearingProject.(*[]*HearingProject)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeHearingProject)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeHearingProject))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &hearingProjectR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &hearingProjectR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`hearings`),
		qm.WhereIn(`hearings.hearing_project_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load hearings")
	}

	var resultSlice []*Hearing
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice hearings")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on hearings")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for hearings")
	}

	if len(hearingAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Hearings = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &hearingR{}
			}
			foreign.R.HearingProject = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.HearingProjectID) {
				local.R.Hearings = append(local.R.Hearings, foreign)
				if foreign.R == nil {
					foreign.R = &hearingR{}
				}
				foreign.R.HearingProject = local
				break
			}
		}
	}

	return nil
}

// LoadPaymentHistories allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (hearingProjectL) LoadPaymentHistories(ctx context.Context, e boil.ContextExecutor, singular bool, maybeHearingProject interface{}, mods queries.Applicator) error {
	var slice []*HearingProject
	var object *HearingProject

	if singular {
		var ok bool
		object, ok = maybeHearingProject.(*HearingProject)
		if !ok {
			object = new(HearingProject)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeHearingProject)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeHearingProject))
			}
		}
	} else {
		s, ok := maybeHearingProject.(*[]*HearingProject)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeHearingProject)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeHearingProject))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &hearingProjectR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &hearingProjectR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`payment_histories`),
		qm.WhereIn(`payment_histories.hearing_project_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load payment_histories")
	}

	var resultSlice []*PaymentHistory
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice payment_histories")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on payment_histories")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for payment_histories")
	}

	if len(paymentHistoryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.PaymentHistories = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &paymentHistoryR{}
			}
			foreign.R.HearingProject = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.HearingProjectID) {
				local.R.PaymentHistories = append(local.R.PaymentHistories, foreign)
				if foreign.R == nil {
					foreign.R = &paymentHistoryR{}
				}
				foreign.R.HearingProject = local
				break
			}
		}
	}

	return nil
}

// LoadPaymentUsers allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (hearingProjectL) LoadPaymentUsers(ctx context.Context, e boil.ContextExecutor, singular bool, maybeHearingProject interface{}, mods queries.Applicator) error {
	var slice []*HearingProject
	var object *HearingProject

	if singular {
		var ok bool
		object, ok = maybeHearingProject.(*HearingProject)
		if !ok {
			object = new(HearingProject)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeHearingProject)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeHearingProject))
			}
		}
	} else {
		s, ok := maybeHearingProject.(*[]*HearingProject)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeHearingProject)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeHearingProject))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &hearingProjectR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &hearingProjectR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`payment_users`),
		qm.WhereIn(`payment_users.hearing_project_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load payment_users")
	}

	var resultSlice []*PaymentUser
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice payment_users")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on payment_users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for payment_users")
	}

	if len(paymentUserAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.PaymentUsers = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &paymentUserR{}
			}
			foreign.R.HearingProject = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.HearingProjectID) {
				local.R.PaymentUsers = append(local.R.PaymentUsers, foreign)
				if foreign.R == nil {
					foreign.R = &paymentUserR{}
				}
				foreign.R.HearingProject = local
				break
			}
		}
	}

	return nil
}

// LoadProjectSpecificSolutions allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (hearingProjectL) LoadProjectSpecificSolutions(ctx context.Context, e boil.ContextExecutor, singular bool, maybeHearingProject interface{}, mods queries.Applicator) error {
	var slice []*HearingProject
	var object *HearingProject

	if singular {
		var ok bool
		object, ok = maybeHearingProject.(*HearingProject)
		if !ok {
			object = new(HearingProject)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeHearingProject)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeHearingProject))
			}
		}
	} else {
		s, ok := maybeHearingProject.(*[]*HearingProject)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeHearingProject)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeHearingProject))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &hearingProjectR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &hearingProjectR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`project_specific_solutions`),
		qm.WhereIn(`project_specific_solutions.hearing_project_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load project_specific_solutions")
	}

	var resultSlice []*ProjectSpecificSolution
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice project_specific_solutions")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on project_specific_solutions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for project_specific_solutions")
	}

	if len(projectSpecificSolutionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ProjectSpecificSolutions = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &projectSpecificSolutionR{}
			}
			foreign.R.HearingProject = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.HearingProjectID) {
				local.R.ProjectSpecificSolutions = append(local.R.ProjectSpecificSolutions, foreign)
				if foreign.R == nil {
					foreign.R = &projectSpecificSolutionR{}
				}
				foreign.R.HearingProject = local
				break
			}
		}
	}

	return nil
}

// LoadTickets allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (hearingProjectL) LoadTickets(ctx context.Context, e boil.ContextExecutor, singular bool, maybeHearingProject interface{}, mods queries.Applicator) error {
	var slice []*HearingProject
	var object *HearingProject

	if singular {
		var ok bool
		object, ok = maybeHearingProject.(*HearingProject)
		if !ok {
			object = new(HearingProject)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeHearingProject)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeHearingProject))
			}
		}
	} else {
		s, ok := maybeHearingProject.(*[]*HearingProject)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeHearingProject)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeHearingProject))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &hearingProjectR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &hearingProjectR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`tickets`),
		qm.WhereIn(`tickets.hearing_project_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load tickets")
	}

	var resultSlice []*Ticket
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice tickets")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on tickets")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for tickets")
	}

	if len(ticketAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Tickets = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &ticketR{}
			}
			foreign.R.HearingProject = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.HearingProjectID) {
				local.R.Tickets = append(local.R.Tickets, foreign)
				if foreign.R == nil {
					foreign.R = &ticketR{}
				}
				foreign.R.HearingProject = local
				break
			}
		}
	}

	return nil
}

// SetCompany of the hearingProject to the related item.
// Sets o.R.Company to related.
// Adds o to related.R.HearingProjects.
func (o *HearingProject) SetCompany(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Company) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"hearing_projects\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"company_id"}),
		strmangle.WhereClause("\"", "\"", 2, hearingProjectPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.CompanyID, related.ID)
	if o.R == nil {
		o.R = &hearingProjectR{
			Company: related,
		}
	} else {
		o.R.Company = related
	}

	if related.R == nil {
		related.R = &companyR{
			HearingProjects: HearingProjectSlice{o},
		}
	} else {
		related.R.HearingProjects = append(related.R.HearingProjects, o)
	}

	return nil
}

// AddHearingProjectMembers adds the given related objects to the existing relationships
// of the hearing_project, optionally inserting them as new records.
// Appends related to o.R.HearingProjectMembers.
// Sets related.R.HearingProject appropriately.
func (o *HearingProject) AddHearingProjectMembers(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*HearingProjectMember) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.HearingProjectID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"hearing_project_members\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"hearing_project_id"}),
				strmangle.WhereClause("\"", "\"", 2, hearingProjectMemberPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.HearingProjectID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &hearingProjectR{
			HearingProjectMembers: related,
		}
	} else {
		o.R.HearingProjectMembers = append(o.R.HearingProjectMembers, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &hearingProjectMemberR{
				HearingProject: o,
			}
		} else {
			rel.R.HearingProject = o
		}
	}
	return nil
}

// AddHearings adds the given related objects to the existing relationships
// of the hearing_project, optionally inserting them as new records.
// Appends related to o.R.Hearings.
// Sets related.R.HearingProject appropriately.
func (o *HearingProject) AddHearings(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Hearing) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.HearingProjectID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"hearings\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"hearing_project_id"}),
				strmangle.WhereClause("\"", "\"", 2, hearingPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.HearingProjectID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &hearingProjectR{
			Hearings: related,
		}
	} else {
		o.R.Hearings = append(o.R.Hearings, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &hearingR{
				HearingProject: o,
			}
		} else {
			rel.R.HearingProject = o
		}
	}
	return nil
}

// AddPaymentHistories adds the given related objects to the existing relationships
// of the hearing_project, optionally inserting them as new records.
// Appends related to o.R.PaymentHistories.
// Sets related.R.HearingProject appropriately.
func (o *HearingProject) AddPaymentHistories(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*PaymentHistory) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.HearingProjectID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"payment_histories\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"hearing_project_id"}),
				strmangle.WhereClause("\"", "\"", 2, paymentHistoryPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.HearingProjectID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &hearingProjectR{
			PaymentHistories: related,
		}
	} else {
		o.R.PaymentHistories = append(o.R.PaymentHistories, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &paymentHistoryR{
				HearingProject: o,
			}
		} else {
			rel.R.HearingProject = o
		}
	}
	return nil
}

// AddPaymentUsers adds the given related objects to the existing relationships
// of the hearing_project, optionally inserting them as new records.
// Appends related to o.R.PaymentUsers.
// Sets related.R.HearingProject appropriately.
func (o *HearingProject) AddPaymentUsers(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*PaymentUser) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.HearingProjectID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"payment_users\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"hearing_project_id"}),
				strmangle.WhereClause("\"", "\"", 2, paymentUserPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.HearingProjectID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &hearingProjectR{
			PaymentUsers: related,
		}
	} else {
		o.R.PaymentUsers = append(o.R.PaymentUsers, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &paymentUserR{
				HearingProject: o,
			}
		} else {
			rel.R.HearingProject = o
		}
	}
	return nil
}

// AddProjectSpecificSolutions adds the given related objects to the existing relationships
// of the hearing_project, optionally inserting them as new records.
// Appends related to o.R.ProjectSpecificSolutions.
// Sets related.R.HearingProject appropriately.
func (o *HearingProject) AddProjectSpecificSolutions(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ProjectSpecificSolution) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.HearingProjectID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"project_specific_solutions\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"hearing_project_id"}),
				strmangle.WhereClause("\"", "\"", 2, projectSpecificSolutionPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.HearingProjectID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &hearingProjectR{
			ProjectSpecificSolutions: related,
		}
	} else {
		o.R.ProjectSpecificSolutions = append(o.R.ProjectSpecificSolutions, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &projectSpecificSolutionR{
				HearingProject: o,
			}
		} else {
			rel.R.HearingProject = o
		}
	}
	return nil
}

// AddTickets adds the given related objects to the existing relationships
// of the hearing_project, optionally inserting them as new records.
// Appends related to o.R.Tickets.
// Sets related.R.HearingProject appropriately.
func (o *HearingProject) AddTickets(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Ticket) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.HearingProjectID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"tickets\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"hearing_project_id"}),
				strmangle.WhereClause("\"", "\"", 2, ticketPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.HearingProjectID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &hearingProjectR{
			Tickets: related,
		}
	} else {
		o.R.Tickets = append(o.R.Tickets, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &ticketR{
				HearingProject: o,
			}
		} else {
			rel.R.HearingProject = o
		}
	}
	return nil
}

// HearingProjects retrieves all the records using an executor.
func HearingProjects(mods ...qm.QueryMod) hearingProjectQuery {
	mods = append(mods, qm.From("\"hearing_projects\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"hearing_projects\".*"})
	}

	return hearingProjectQuery{q}
}

// FindHearingProject retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindHearingProject(ctx context.Context, exec boil.ContextExecutor, iD []byte, selectCols ...string) (*HearingProject, error) {
	hearingProjectObj := &HearingProject{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"hearing_projects\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, hearingProjectObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from hearing_projects")
	}

	if err = hearingProjectObj.doAfterSelectHooks(ctx, exec); err != nil {
		return hearingProjectObj, err
	}

	return hearingProjectObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *HearingProject) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no hearing_projects provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(hearingProjectColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	hearingProjectInsertCacheMut.RLock()
	cache, cached := hearingProjectInsertCache[key]
	hearingProjectInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			hearingProjectAllColumns,
			hearingProjectColumnsWithDefault,
			hearingProjectColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(hearingProjectType, hearingProjectMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(hearingProjectType, hearingProjectMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"hearing_projects\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"hearing_projects\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into hearing_projects")
	}

	if !cached {
		hearingProjectInsertCacheMut.Lock()
		hearingProjectInsertCache[key] = cache
		hearingProjectInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the HearingProject.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *HearingProject) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	hearingProjectUpdateCacheMut.RLock()
	cache, cached := hearingProjectUpdateCache[key]
	hearingProjectUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			hearingProjectAllColumns,
			hearingProjectPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update hearing_projects, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"hearing_projects\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, hearingProjectPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(hearingProjectType, hearingProjectMapping, append(wl, hearingProjectPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update hearing_projects row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for hearing_projects")
	}

	if !cached {
		hearingProjectUpdateCacheMut.Lock()
		hearingProjectUpdateCache[key] = cache
		hearingProjectUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q hearingProjectQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for hearing_projects")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for hearing_projects")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o HearingProjectSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), hearingProjectPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"hearing_projects\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, hearingProjectPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in hearingProject slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all hearingProject")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *HearingProject) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no hearing_projects provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(hearingProjectColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	hearingProjectUpsertCacheMut.RLock()
	cache, cached := hearingProjectUpsertCache[key]
	hearingProjectUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			hearingProjectAllColumns,
			hearingProjectColumnsWithDefault,
			hearingProjectColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			hearingProjectAllColumns,
			hearingProjectPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert hearing_projects, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(hearingProjectPrimaryKeyColumns))
			copy(conflict, hearingProjectPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"hearing_projects\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(hearingProjectType, hearingProjectMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(hearingProjectType, hearingProjectMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert hearing_projects")
	}

	if !cached {
		hearingProjectUpsertCacheMut.Lock()
		hearingProjectUpsertCache[key] = cache
		hearingProjectUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single HearingProject record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *HearingProject) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no HearingProject provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), hearingProjectPrimaryKeyMapping)
	sql := "DELETE FROM \"hearing_projects\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from hearing_projects")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for hearing_projects")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q hearingProjectQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no hearingProjectQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from hearing_projects")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for hearing_projects")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o HearingProjectSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(hearingProjectBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), hearingProjectPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"hearing_projects\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, hearingProjectPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from hearingProject slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for hearing_projects")
	}

	if len(hearingProjectAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *HearingProject) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindHearingProject(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *HearingProjectSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := HearingProjectSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), hearingProjectPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"hearing_projects\".* FROM \"hearing_projects\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, hearingProjectPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in HearingProjectSlice")
	}

	*o = slice

	return nil
}

// HearingProjectExists checks if the HearingProject row exists.
func HearingProjectExists(ctx context.Context, exec boil.ContextExecutor, iD []byte) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"hearing_projects\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if hearing_projects exists")
	}

	return exists, nil
}

// Exists checks if the HearingProject row exists.
func (o *HearingProject) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return HearingProjectExists(ctx, exec, o.ID)
}
