// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SolutionConstructionManagementProduct is an object representing the database table.
type SolutionConstructionManagementProduct struct { // 施工管理プロダクトID
	ID []byte `boil:"id" json:"id" toml:"id" yaml:"id"`
	// ソリューションプロダクトID
	SolutionProductID []byte `boil:"solution_product_id" json:"solution_product_id" toml:"solution_product_id" yaml:"solution_product_id"`
	// アプリケーション有無
	ApplicationAvailability null.Bool `boil:"application_availability" json:"application_availability,omitempty" toml:"application_availability" yaml:"application_availability,omitempty"`
	// 無料トライアルの有無
	FreeTrial null.Bool `boil:"free_trial" json:"free_trial,omitempty" toml:"free_trial" yaml:"free_trial,omitempty"`
	// 工程管理
	ProcessControl null.Bool `boil:"process_control" json:"process_control,omitempty" toml:"process_control" yaml:"process_control,omitempty"`
	// 顧客管理
	CustomerManagement null.Bool `boil:"customer_management" json:"customer_management,omitempty" toml:"customer_management" yaml:"customer_management,omitempty"`
	// 作業者管理
	WorkerManagement null.Bool `boil:"worker_management" json:"worker_management,omitempty" toml:"worker_management" yaml:"worker_management,omitempty"`
	// データ作成日
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	// データ更新日
	UpdatedAt time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *solutionConstructionManagementProductR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L solutionConstructionManagementProductL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SolutionConstructionManagementProductColumns = struct {
	ID                      string
	SolutionProductID       string
	ApplicationAvailability string
	FreeTrial               string
	ProcessControl          string
	CustomerManagement      string
	WorkerManagement        string
	CreatedAt               string
	UpdatedAt               string
}{
	ID:                      "id",
	SolutionProductID:       "solution_product_id",
	ApplicationAvailability: "application_availability",
	FreeTrial:               "free_trial",
	ProcessControl:          "process_control",
	CustomerManagement:      "customer_management",
	WorkerManagement:        "worker_management",
	CreatedAt:               "created_at",
	UpdatedAt:               "updated_at",
}

var SolutionConstructionManagementProductTableColumns = struct {
	ID                      string
	SolutionProductID       string
	ApplicationAvailability string
	FreeTrial               string
	ProcessControl          string
	CustomerManagement      string
	WorkerManagement        string
	CreatedAt               string
	UpdatedAt               string
}{
	ID:                      "solution_construction_management_products.id",
	SolutionProductID:       "solution_construction_management_products.solution_product_id",
	ApplicationAvailability: "solution_construction_management_products.application_availability",
	FreeTrial:               "solution_construction_management_products.free_trial",
	ProcessControl:          "solution_construction_management_products.process_control",
	CustomerManagement:      "solution_construction_management_products.customer_management",
	WorkerManagement:        "solution_construction_management_products.worker_management",
	CreatedAt:               "solution_construction_management_products.created_at",
	UpdatedAt:               "solution_construction_management_products.updated_at",
}

// Generated where

type whereHelpernull_Bool struct{ field string }

func (w whereHelpernull_Bool) EQ(x null.Bool) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Bool) NEQ(x null.Bool) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Bool) LT(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Bool) LTE(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Bool) GT(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Bool) GTE(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Bool) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Bool) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var SolutionConstructionManagementProductWhere = struct {
	ID                      whereHelper__byte
	SolutionProductID       whereHelper__byte
	ApplicationAvailability whereHelpernull_Bool
	FreeTrial               whereHelpernull_Bool
	ProcessControl          whereHelpernull_Bool
	CustomerManagement      whereHelpernull_Bool
	WorkerManagement        whereHelpernull_Bool
	CreatedAt               whereHelpertime_Time
	UpdatedAt               whereHelpertime_Time
}{
	ID:                      whereHelper__byte{field: "\"solution_construction_management_products\".\"id\""},
	SolutionProductID:       whereHelper__byte{field: "\"solution_construction_management_products\".\"solution_product_id\""},
	ApplicationAvailability: whereHelpernull_Bool{field: "\"solution_construction_management_products\".\"application_availability\""},
	FreeTrial:               whereHelpernull_Bool{field: "\"solution_construction_management_products\".\"free_trial\""},
	ProcessControl:          whereHelpernull_Bool{field: "\"solution_construction_management_products\".\"process_control\""},
	CustomerManagement:      whereHelpernull_Bool{field: "\"solution_construction_management_products\".\"customer_management\""},
	WorkerManagement:        whereHelpernull_Bool{field: "\"solution_construction_management_products\".\"worker_management\""},
	CreatedAt:               whereHelpertime_Time{field: "\"solution_construction_management_products\".\"created_at\""},
	UpdatedAt:               whereHelpertime_Time{field: "\"solution_construction_management_products\".\"updated_at\""},
}

// SolutionConstructionManagementProductRels is where relationship names are stored.
var SolutionConstructionManagementProductRels = struct {
	SolutionProduct string
}{
	SolutionProduct: "SolutionProduct",
}

// solutionConstructionManagementProductR is where relationships are stored.
type solutionConstructionManagementProductR struct {
	SolutionProduct *SolutionProduct `boil:"SolutionProduct" json:"SolutionProduct" toml:"SolutionProduct" yaml:"SolutionProduct"`
}

// NewStruct creates a new relationship struct
func (*solutionConstructionManagementProductR) NewStruct() *solutionConstructionManagementProductR {
	return &solutionConstructionManagementProductR{}
}

func (r *solutionConstructionManagementProductR) GetSolutionProduct() *SolutionProduct {
	if r == nil {
		return nil
	}
	return r.SolutionProduct
}

// solutionConstructionManagementProductL is where Load methods for each relationship are stored.
type solutionConstructionManagementProductL struct{}

var (
	solutionConstructionManagementProductAllColumns            = []string{"id", "solution_product_id", "application_availability", "free_trial", "process_control", "customer_management", "worker_management", "created_at", "updated_at"}
	solutionConstructionManagementProductColumnsWithoutDefault = []string{"solution_product_id"}
	solutionConstructionManagementProductColumnsWithDefault    = []string{"id", "application_availability", "free_trial", "process_control", "customer_management", "worker_management", "created_at", "updated_at"}
	solutionConstructionManagementProductPrimaryKeyColumns     = []string{"id"}
	solutionConstructionManagementProductGeneratedColumns      = []string{}
)

type (
	// SolutionConstructionManagementProductSlice is an alias for a slice of pointers to SolutionConstructionManagementProduct.
	// This should almost always be used instead of []SolutionConstructionManagementProduct.
	SolutionConstructionManagementProductSlice []*SolutionConstructionManagementProduct
	// SolutionConstructionManagementProductHook is the signature for custom SolutionConstructionManagementProduct hook methods
	SolutionConstructionManagementProductHook func(context.Context, boil.ContextExecutor, *SolutionConstructionManagementProduct) error

	solutionConstructionManagementProductQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	solutionConstructionManagementProductType                 = reflect.TypeOf(&SolutionConstructionManagementProduct{})
	solutionConstructionManagementProductMapping              = queries.MakeStructMapping(solutionConstructionManagementProductType)
	solutionConstructionManagementProductPrimaryKeyMapping, _ = queries.BindMapping(solutionConstructionManagementProductType, solutionConstructionManagementProductMapping, solutionConstructionManagementProductPrimaryKeyColumns)
	solutionConstructionManagementProductInsertCacheMut       sync.RWMutex
	solutionConstructionManagementProductInsertCache          = make(map[string]insertCache)
	solutionConstructionManagementProductUpdateCacheMut       sync.RWMutex
	solutionConstructionManagementProductUpdateCache          = make(map[string]updateCache)
	solutionConstructionManagementProductUpsertCacheMut       sync.RWMutex
	solutionConstructionManagementProductUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var solutionConstructionManagementProductAfterSelectHooks []SolutionConstructionManagementProductHook

var solutionConstructionManagementProductBeforeInsertHooks []SolutionConstructionManagementProductHook
var solutionConstructionManagementProductAfterInsertHooks []SolutionConstructionManagementProductHook

var solutionConstructionManagementProductBeforeUpdateHooks []SolutionConstructionManagementProductHook
var solutionConstructionManagementProductAfterUpdateHooks []SolutionConstructionManagementProductHook

var solutionConstructionManagementProductBeforeDeleteHooks []SolutionConstructionManagementProductHook
var solutionConstructionManagementProductAfterDeleteHooks []SolutionConstructionManagementProductHook

var solutionConstructionManagementProductBeforeUpsertHooks []SolutionConstructionManagementProductHook
var solutionConstructionManagementProductAfterUpsertHooks []SolutionConstructionManagementProductHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SolutionConstructionManagementProduct) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range solutionConstructionManagementProductAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SolutionConstructionManagementProduct) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range solutionConstructionManagementProductBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SolutionConstructionManagementProduct) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range solutionConstructionManagementProductAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SolutionConstructionManagementProduct) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range solutionConstructionManagementProductBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SolutionConstructionManagementProduct) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range solutionConstructionManagementProductAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SolutionConstructionManagementProduct) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range solutionConstructionManagementProductBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SolutionConstructionManagementProduct) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range solutionConstructionManagementProductAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SolutionConstructionManagementProduct) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range solutionConstructionManagementProductBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SolutionConstructionManagementProduct) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range solutionConstructionManagementProductAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSolutionConstructionManagementProductHook registers your hook function for all future operations.
func AddSolutionConstructionManagementProductHook(hookPoint boil.HookPoint, solutionConstructionManagementProductHook SolutionConstructionManagementProductHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		solutionConstructionManagementProductAfterSelectHooks = append(solutionConstructionManagementProductAfterSelectHooks, solutionConstructionManagementProductHook)
	case boil.BeforeInsertHook:
		solutionConstructionManagementProductBeforeInsertHooks = append(solutionConstructionManagementProductBeforeInsertHooks, solutionConstructionManagementProductHook)
	case boil.AfterInsertHook:
		solutionConstructionManagementProductAfterInsertHooks = append(solutionConstructionManagementProductAfterInsertHooks, solutionConstructionManagementProductHook)
	case boil.BeforeUpdateHook:
		solutionConstructionManagementProductBeforeUpdateHooks = append(solutionConstructionManagementProductBeforeUpdateHooks, solutionConstructionManagementProductHook)
	case boil.AfterUpdateHook:
		solutionConstructionManagementProductAfterUpdateHooks = append(solutionConstructionManagementProductAfterUpdateHooks, solutionConstructionManagementProductHook)
	case boil.BeforeDeleteHook:
		solutionConstructionManagementProductBeforeDeleteHooks = append(solutionConstructionManagementProductBeforeDeleteHooks, solutionConstructionManagementProductHook)
	case boil.AfterDeleteHook:
		solutionConstructionManagementProductAfterDeleteHooks = append(solutionConstructionManagementProductAfterDeleteHooks, solutionConstructionManagementProductHook)
	case boil.BeforeUpsertHook:
		solutionConstructionManagementProductBeforeUpsertHooks = append(solutionConstructionManagementProductBeforeUpsertHooks, solutionConstructionManagementProductHook)
	case boil.AfterUpsertHook:
		solutionConstructionManagementProductAfterUpsertHooks = append(solutionConstructionManagementProductAfterUpsertHooks, solutionConstructionManagementProductHook)
	}
}

// One returns a single solutionConstructionManagementProduct record from the query.
func (q solutionConstructionManagementProductQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SolutionConstructionManagementProduct, error) {
	o := &SolutionConstructionManagementProduct{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for solution_construction_management_products")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SolutionConstructionManagementProduct records from the query.
func (q solutionConstructionManagementProductQuery) All(ctx context.Context, exec boil.ContextExecutor) (SolutionConstructionManagementProductSlice, error) {
	var o []*SolutionConstructionManagementProduct

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to SolutionConstructionManagementProduct slice")
	}

	if len(solutionConstructionManagementProductAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SolutionConstructionManagementProduct records in the query.
func (q solutionConstructionManagementProductQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count solution_construction_management_products rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q solutionConstructionManagementProductQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if solution_construction_management_products exists")
	}

	return count > 0, nil
}

// SolutionProduct pointed to by the foreign key.
func (o *SolutionConstructionManagementProduct) SolutionProduct(mods ...qm.QueryMod) solutionProductQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.SolutionProductID),
	}

	queryMods = append(queryMods, mods...)

	return SolutionProducts(queryMods...)
}

// LoadSolutionProduct allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (solutionConstructionManagementProductL) LoadSolutionProduct(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSolutionConstructionManagementProduct interface{}, mods queries.Applicator) error {
	var slice []*SolutionConstructionManagementProduct
	var object *SolutionConstructionManagementProduct

	if singular {
		var ok bool
		object, ok = maybeSolutionConstructionManagementProduct.(*SolutionConstructionManagementProduct)
		if !ok {
			object = new(SolutionConstructionManagementProduct)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeSolutionConstructionManagementProduct)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeSolutionConstructionManagementProduct))
			}
		}
	} else {
		s, ok := maybeSolutionConstructionManagementProduct.(*[]*SolutionConstructionManagementProduct)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeSolutionConstructionManagementProduct)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeSolutionConstructionManagementProduct))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &solutionConstructionManagementProductR{}
		}
		if !queries.IsNil(object.SolutionProductID) {
			args = append(args, object.SolutionProductID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &solutionConstructionManagementProductR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.SolutionProductID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.SolutionProductID) {
				args = append(args, obj.SolutionProductID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`solution_products`),
		qm.WhereIn(`solution_products.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load SolutionProduct")
	}

	var resultSlice []*SolutionProduct
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice SolutionProduct")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for solution_products")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for solution_products")
	}

	if len(solutionProductAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.SolutionProduct = foreign
		if foreign.R == nil {
			foreign.R = &solutionProductR{}
		}
		foreign.R.SolutionConstructionManagementProduct = object
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.SolutionProductID, foreign.ID) {
				local.R.SolutionProduct = foreign
				if foreign.R == nil {
					foreign.R = &solutionProductR{}
				}
				foreign.R.SolutionConstructionManagementProduct = local
				break
			}
		}
	}

	return nil
}

// SetSolutionProduct of the solutionConstructionManagementProduct to the related item.
// Sets o.R.SolutionProduct to related.
// Adds o to related.R.SolutionConstructionManagementProduct.
func (o *SolutionConstructionManagementProduct) SetSolutionProduct(ctx context.Context, exec boil.ContextExecutor, insert bool, related *SolutionProduct) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"solution_construction_management_products\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"solution_product_id"}),
		strmangle.WhereClause("\"", "\"", 2, solutionConstructionManagementProductPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.SolutionProductID, related.ID)
	if o.R == nil {
		o.R = &solutionConstructionManagementProductR{
			SolutionProduct: related,
		}
	} else {
		o.R.SolutionProduct = related
	}

	if related.R == nil {
		related.R = &solutionProductR{
			SolutionConstructionManagementProduct: o,
		}
	} else {
		related.R.SolutionConstructionManagementProduct = o
	}

	return nil
}

// SolutionConstructionManagementProducts retrieves all the records using an executor.
func SolutionConstructionManagementProducts(mods ...qm.QueryMod) solutionConstructionManagementProductQuery {
	mods = append(mods, qm.From("\"solution_construction_management_products\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"solution_construction_management_products\".*"})
	}

	return solutionConstructionManagementProductQuery{q}
}

// FindSolutionConstructionManagementProduct retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSolutionConstructionManagementProduct(ctx context.Context, exec boil.ContextExecutor, iD []byte, selectCols ...string) (*SolutionConstructionManagementProduct, error) {
	solutionConstructionManagementProductObj := &SolutionConstructionManagementProduct{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"solution_construction_management_products\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, solutionConstructionManagementProductObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from solution_construction_management_products")
	}

	if err = solutionConstructionManagementProductObj.doAfterSelectHooks(ctx, exec); err != nil {
		return solutionConstructionManagementProductObj, err
	}

	return solutionConstructionManagementProductObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SolutionConstructionManagementProduct) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no solution_construction_management_products provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(solutionConstructionManagementProductColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	solutionConstructionManagementProductInsertCacheMut.RLock()
	cache, cached := solutionConstructionManagementProductInsertCache[key]
	solutionConstructionManagementProductInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			solutionConstructionManagementProductAllColumns,
			solutionConstructionManagementProductColumnsWithDefault,
			solutionConstructionManagementProductColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(solutionConstructionManagementProductType, solutionConstructionManagementProductMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(solutionConstructionManagementProductType, solutionConstructionManagementProductMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"solution_construction_management_products\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"solution_construction_management_products\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into solution_construction_management_products")
	}

	if !cached {
		solutionConstructionManagementProductInsertCacheMut.Lock()
		solutionConstructionManagementProductInsertCache[key] = cache
		solutionConstructionManagementProductInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SolutionConstructionManagementProduct.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SolutionConstructionManagementProduct) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	solutionConstructionManagementProductUpdateCacheMut.RLock()
	cache, cached := solutionConstructionManagementProductUpdateCache[key]
	solutionConstructionManagementProductUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			solutionConstructionManagementProductAllColumns,
			solutionConstructionManagementProductPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update solution_construction_management_products, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"solution_construction_management_products\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, solutionConstructionManagementProductPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(solutionConstructionManagementProductType, solutionConstructionManagementProductMapping, append(wl, solutionConstructionManagementProductPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update solution_construction_management_products row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for solution_construction_management_products")
	}

	if !cached {
		solutionConstructionManagementProductUpdateCacheMut.Lock()
		solutionConstructionManagementProductUpdateCache[key] = cache
		solutionConstructionManagementProductUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q solutionConstructionManagementProductQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for solution_construction_management_products")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for solution_construction_management_products")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SolutionConstructionManagementProductSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), solutionConstructionManagementProductPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"solution_construction_management_products\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, solutionConstructionManagementProductPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in solutionConstructionManagementProduct slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all solutionConstructionManagementProduct")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SolutionConstructionManagementProduct) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no solution_construction_management_products provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(solutionConstructionManagementProductColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	solutionConstructionManagementProductUpsertCacheMut.RLock()
	cache, cached := solutionConstructionManagementProductUpsertCache[key]
	solutionConstructionManagementProductUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			solutionConstructionManagementProductAllColumns,
			solutionConstructionManagementProductColumnsWithDefault,
			solutionConstructionManagementProductColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			solutionConstructionManagementProductAllColumns,
			solutionConstructionManagementProductPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert solution_construction_management_products, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(solutionConstructionManagementProductPrimaryKeyColumns))
			copy(conflict, solutionConstructionManagementProductPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"solution_construction_management_products\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(solutionConstructionManagementProductType, solutionConstructionManagementProductMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(solutionConstructionManagementProductType, solutionConstructionManagementProductMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert solution_construction_management_products")
	}

	if !cached {
		solutionConstructionManagementProductUpsertCacheMut.Lock()
		solutionConstructionManagementProductUpsertCache[key] = cache
		solutionConstructionManagementProductUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SolutionConstructionManagementProduct record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SolutionConstructionManagementProduct) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no SolutionConstructionManagementProduct provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), solutionConstructionManagementProductPrimaryKeyMapping)
	sql := "DELETE FROM \"solution_construction_management_products\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from solution_construction_management_products")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for solution_construction_management_products")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q solutionConstructionManagementProductQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no solutionConstructionManagementProductQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from solution_construction_management_products")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for solution_construction_management_products")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SolutionConstructionManagementProductSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(solutionConstructionManagementProductBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), solutionConstructionManagementProductPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"solution_construction_management_products\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, solutionConstructionManagementProductPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from solutionConstructionManagementProduct slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for solution_construction_management_products")
	}

	if len(solutionConstructionManagementProductAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SolutionConstructionManagementProduct) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSolutionConstructionManagementProduct(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SolutionConstructionManagementProductSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SolutionConstructionManagementProductSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), solutionConstructionManagementProductPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"solution_construction_management_products\".* FROM \"solution_construction_management_products\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, solutionConstructionManagementProductPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in SolutionConstructionManagementProductSlice")
	}

	*o = slice

	return nil
}

// SolutionConstructionManagementProductExists checks if the SolutionConstructionManagementProduct row exists.
func SolutionConstructionManagementProductExists(ctx context.Context, exec boil.ContextExecutor, iD []byte) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"solution_construction_management_products\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if solution_construction_management_products exists")
	}

	return exists, nil
}

// Exists checks if the SolutionConstructionManagementProduct row exists.
func (o *SolutionConstructionManagementProduct) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return SolutionConstructionManagementProductExists(ctx, exec, o.ID)
}
